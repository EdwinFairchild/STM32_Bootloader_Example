
STM32_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ff4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  080041c4  080041c4  000141c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004354  08004354  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004354  08004354  00014354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800435c  0800435c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800435c  0800435c  0001435c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004360  08004360  00014360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000074  080043d8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20000244  080043d8  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e83a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026db  00000000  00000000  0002e8de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  00030fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  00031990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002217a  00000000  00000000  00032268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da13  00000000  00000000  000543e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9744  00000000  00000000  00061df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012b539  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029a0  00000000  00000000  0012b58c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080041ac 	.word	0x080041ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080041ac 	.word	0x080041ac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <MX_GPIO_Init+0x98>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a1e      	ldr	r2, [pc, #120]	; (8000650 <MX_GPIO_Init+0x98>)
 80005d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <MX_GPIO_Init+0x98>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <MX_GPIO_Init+0x98>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a17      	ldr	r2, [pc, #92]	; (8000650 <MX_GPIO_Init+0x98>)
 80005f4:	f043 0301 	orr.w	r3, r3, #1
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <MX_GPIO_Init+0x98>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_GPIO_Init+0x98>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a10      	ldr	r2, [pc, #64]	; (8000650 <MX_GPIO_Init+0x98>)
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_GPIO_Init+0x98>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(user_led_GPIO_Port, user_led_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2120      	movs	r1, #32
 8000626:	480b      	ldr	r0, [pc, #44]	; (8000654 <MX_GPIO_Init+0x9c>)
 8000628:	f001 f8e0 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = user_led_Pin;
 800062c:	2320      	movs	r3, #32
 800062e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000630:	2301      	movs	r3, #1
 8000632:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(user_led_GPIO_Port, &GPIO_InitStruct);
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	4619      	mov	r1, r3
 8000642:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_GPIO_Init+0x9c>)
 8000644:	f000 ff3e 	bl	80014c4 <HAL_GPIO_Init>

}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40023800 	.word	0x40023800
 8000654:	40020000 	.word	0x40020000

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f000 fa34 	bl	8000ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f80a 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f7ff ffa8 	bl	80005b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000668:	f000 f92a 	bl	80008c0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800066c:	f000 f952 	bl	8000914 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //should not return from here
  bootloader_main();
 8000670:	f002 fcf8 	bl	8003064 <bootloader_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000674:	e7fe      	b.n	8000674 <main+0x1c>
	...

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	2234      	movs	r2, #52	; 0x34
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f003 f95a 	bl	8003940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b2c      	ldr	r3, [pc, #176]	; (8000754 <SystemClock_Config+0xdc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a2b      	ldr	r2, [pc, #172]	; (8000754 <SystemClock_Config+0xdc>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b29      	ldr	r3, [pc, #164]	; (8000754 <SystemClock_Config+0xdc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	2300      	movs	r3, #0
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	4b26      	ldr	r3, [pc, #152]	; (8000758 <SystemClock_Config+0xe0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a25      	ldr	r2, [pc, #148]	; (8000758 <SystemClock_Config+0xe0>)
 80006c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <SystemClock_Config+0xe0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d4:	2301      	movs	r3, #1
 80006d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e8:	2304      	movs	r3, #4
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006ec:	23b4      	movs	r3, #180	; 0xb4
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4618      	mov	r0, r3
 8000702:	f001 fba9 	bl	8001e58 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800070c:	f000 f826 	bl	800075c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000710:	f001 f886 	bl	8001820 <HAL_PWREx_EnableOverDrive>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800071a:	f000 f81f 	bl	800075c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	230f      	movs	r3, #15
 8000720:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	2302      	movs	r3, #2
 8000724:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800072e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000734:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000736:	f107 0308 	add.w	r3, r7, #8
 800073a:	2105      	movs	r1, #5
 800073c:	4618      	mov	r0, r3
 800073e:	f001 f8bf 	bl	80018c0 <HAL_RCC_ClockConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000748:	f000 f808 	bl	800075c <Error_Handler>
  }
}
 800074c:	bf00      	nop
 800074e:	3750      	adds	r7, #80	; 0x50
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000

0800075c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>
	...

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <HAL_MspInit+0x4c>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000776:	4a0f      	ldr	r2, [pc, #60]	; (80007b4 <HAL_MspInit+0x4c>)
 8000778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077c:	6453      	str	r3, [r2, #68]	; 0x44
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <HAL_MspInit+0x4c>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <HAL_MspInit+0x4c>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	4a08      	ldr	r2, [pc, #32]	; (80007b4 <HAL_MspInit+0x4c>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000798:	6413      	str	r3, [r2, #64]	; 0x40
 800079a:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <HAL_MspInit+0x4c>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <NMI_Handler+0x4>

080007be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <HardFault_Handler+0x4>

080007c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <MemManage_Handler+0x4>

080007ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <BusFault_Handler+0x4>

080007d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <UsageFault_Handler+0x4>

080007d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr

08000800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000804:	f000 f9b2 	bl	8000b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	bd80      	pop	{r7, pc}

0800080c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000810:	4805      	ldr	r0, [pc, #20]	; (8000828 <USART2_IRQHandler+0x1c>)
 8000812:	f001 fe0d 	bl	8002430 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  bootloader_USART2_callback(USART2->DR);
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <USART2_IRQHandler+0x20>)
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4618      	mov	r0, r3
 800081e:	f002 ff85 	bl	800372c <bootloader_USART2_callback>
  /* USER CODE END USART2_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2000013c 	.word	0x2000013c
 800082c:	40004400 	.word	0x40004400

08000830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000838:	4a14      	ldr	r2, [pc, #80]	; (800088c <_sbrk+0x5c>)
 800083a:	4b15      	ldr	r3, [pc, #84]	; (8000890 <_sbrk+0x60>)
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <_sbrk+0x64>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d102      	bne.n	8000852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <_sbrk+0x64>)
 800084e:	4a12      	ldr	r2, [pc, #72]	; (8000898 <_sbrk+0x68>)
 8000850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <_sbrk+0x64>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4413      	add	r3, r2
 800085a:	693a      	ldr	r2, [r7, #16]
 800085c:	429a      	cmp	r2, r3
 800085e:	d207      	bcs.n	8000870 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000860:	f003 f844 	bl	80038ec <__errno>
 8000864:	4603      	mov	r3, r0
 8000866:	220c      	movs	r2, #12
 8000868:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800086a:	f04f 33ff 	mov.w	r3, #4294967295
 800086e:	e009      	b.n	8000884 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <_sbrk+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000876:	4b07      	ldr	r3, [pc, #28]	; (8000894 <_sbrk+0x64>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4413      	add	r3, r2
 800087e:	4a05      	ldr	r2, [pc, #20]	; (8000894 <_sbrk+0x64>)
 8000880:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000882:	68fb      	ldr	r3, [r7, #12]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3718      	adds	r7, #24
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20020000 	.word	0x20020000
 8000890:	00000400 	.word	0x00000400
 8000894:	20000090 	.word	0x20000090
 8000898:	20000248 	.word	0x20000248

0800089c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <SystemInit+0x20>)
 80008a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <SystemInit+0x20>)
 80008a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008c6:	4a12      	ldr	r2, [pc, #72]	; (8000910 <MX_USART2_UART_Init+0x50>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_USART2_UART_Init+0x4c>)
 80008f8:	f001 fd4c 	bl	8002394 <HAL_UART_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000902:	f7ff ff2b 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2000013c 	.word	0x2000013c
 8000910:	40004400 	.word	0x40004400

08000914 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_USART3_UART_Init+0x4c>)
 800091a:	4a12      	ldr	r2, [pc, #72]	; (8000964 <MX_USART3_UART_Init+0x50>)
 800091c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_USART3_UART_Init+0x4c>)
 8000920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000924:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_USART3_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_USART3_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_USART3_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_USART3_UART_Init+0x4c>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_USART3_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_USART3_UART_Init+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_USART3_UART_Init+0x4c>)
 800094c:	f001 fd22 	bl	8002394 <HAL_UART_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000956:	f7ff ff01 	bl	800075c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200000f8 	.word	0x200000f8
 8000964:	40004800 	.word	0x40004800

08000968 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08c      	sub	sp, #48	; 0x30
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a36      	ldr	r2, [pc, #216]	; (8000a60 <HAL_UART_MspInit+0xf8>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d134      	bne.n	80009f4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	61bb      	str	r3, [r7, #24]
 800098e:	4b35      	ldr	r3, [pc, #212]	; (8000a64 <HAL_UART_MspInit+0xfc>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a34      	ldr	r2, [pc, #208]	; (8000a64 <HAL_UART_MspInit+0xfc>)
 8000994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
 800099a:	4b32      	ldr	r3, [pc, #200]	; (8000a64 <HAL_UART_MspInit+0xfc>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a2:	61bb      	str	r3, [r7, #24]
 80009a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	4b2e      	ldr	r3, [pc, #184]	; (8000a64 <HAL_UART_MspInit+0xfc>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a2d      	ldr	r2, [pc, #180]	; (8000a64 <HAL_UART_MspInit+0xfc>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <HAL_UART_MspInit+0xfc>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009c2:	230c      	movs	r3, #12
 80009c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009d2:	2307      	movs	r3, #7
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4822      	ldr	r0, [pc, #136]	; (8000a68 <HAL_UART_MspInit+0x100>)
 80009de:	f000 fd71 	bl	80014c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	2026      	movs	r0, #38	; 0x26
 80009e8:	f000 f9bb 	bl	8000d62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009ec:	2026      	movs	r0, #38	; 0x26
 80009ee:	f000 f9d4 	bl	8000d9a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80009f2:	e031      	b.n	8000a58 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <HAL_UART_MspInit+0x104>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d12c      	bne.n	8000a58 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <HAL_UART_MspInit+0xfc>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	4a17      	ldr	r2, [pc, #92]	; (8000a64 <HAL_UART_MspInit+0xfc>)
 8000a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <HAL_UART_MspInit+0xfc>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <HAL_UART_MspInit+0xfc>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a10      	ldr	r2, [pc, #64]	; (8000a64 <HAL_UART_MspInit+0xfc>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_UART_MspInit+0xfc>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a36:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a48:	2307      	movs	r3, #7
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4807      	ldr	r0, [pc, #28]	; (8000a70 <HAL_UART_MspInit+0x108>)
 8000a54:	f000 fd36 	bl	80014c4 <HAL_GPIO_Init>
}
 8000a58:	bf00      	nop
 8000a5a:	3730      	adds	r7, #48	; 0x30
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40004400 	.word	0x40004400
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020000 	.word	0x40020000
 8000a6c:	40004800 	.word	0x40004800
 8000a70:	40020800 	.word	0x40020800

08000a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a78:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a7a:	490e      	ldr	r1, [pc, #56]	; (8000ab4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a7c:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a80:	e002      	b.n	8000a88 <LoopCopyDataInit>

08000a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a86:	3304      	adds	r3, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a8c:	d3f9      	bcc.n	8000a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a90:	4c0b      	ldr	r4, [pc, #44]	; (8000ac0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a94:	e001      	b.n	8000a9a <LoopFillZerobss>

08000a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a98:	3204      	adds	r2, #4

08000a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a9c:	d3fb      	bcc.n	8000a96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a9e:	f7ff fefd 	bl	800089c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f002 ff29 	bl	80038f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aa6:	f7ff fdd7 	bl	8000658 <main>
  bx  lr    
 8000aaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000aac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ab8:	08004364 	.word	0x08004364
  ldr r2, =_sbss
 8000abc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ac0:	20000244 	.word	0x20000244

08000ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC_IRQHandler>
	...

08000ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000acc:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <HAL_Init+0x40>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <HAL_Init+0x40>)
 8000ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <HAL_Init+0x40>)
 8000ade:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <HAL_Init+0x40>)
 8000aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f92b 	bl	8000d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af6:	200f      	movs	r0, #15
 8000af8:	f000 f808 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000afc:	f7ff fe34 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023c00 	.word	0x40023c00

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_InitTick+0x54>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_InitTick+0x58>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f943 	bl	8000db6 <HAL_SYSTICK_Config>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00e      	b.n	8000b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d80a      	bhi.n	8000b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f000 f90b 	bl	8000d62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b4c:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <HAL_InitTick+0x5c>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e000      	b.n	8000b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000000 	.word	0x20000000
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000004 	.word	0x20000004

08000b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_IncTick+0x20>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_IncTick+0x24>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <HAL_IncTick+0x24>)
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	20000180 	.word	0x20000180

08000b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b03      	ldr	r3, [pc, #12]	; (8000ba8 <HAL_GetTick+0x14>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000180 	.word	0x20000180

08000bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bde:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	60d3      	str	r3, [r2, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	db0b      	blt.n	8000c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	f003 021f 	and.w	r2, r3, #31
 8000c28:	4907      	ldr	r1, [pc, #28]	; (8000c48 <__NVIC_EnableIRQ+0x38>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	095b      	lsrs	r3, r3, #5
 8000c30:	2001      	movs	r0, #1
 8000c32:	fa00 f202 	lsl.w	r2, r0, r2
 8000c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000e100 	.word	0xe000e100

08000c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	db0a      	blt.n	8000c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	490c      	ldr	r1, [pc, #48]	; (8000c98 <__NVIC_SetPriority+0x4c>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	0112      	lsls	r2, r2, #4
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	440b      	add	r3, r1
 8000c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c74:	e00a      	b.n	8000c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4908      	ldr	r1, [pc, #32]	; (8000c9c <__NVIC_SetPriority+0x50>)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	3b04      	subs	r3, #4
 8000c84:	0112      	lsls	r2, r2, #4
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	440b      	add	r3, r1
 8000c8a:	761a      	strb	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f1c3 0307 	rsb	r3, r3, #7
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	bf28      	it	cs
 8000cbe:	2304      	movcs	r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	2b06      	cmp	r3, #6
 8000cc8:	d902      	bls.n	8000cd0 <NVIC_EncodePriority+0x30>
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3b03      	subs	r3, #3
 8000cce:	e000      	b.n	8000cd2 <NVIC_EncodePriority+0x32>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43d9      	mvns	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	4313      	orrs	r3, r2
         );
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3724      	adds	r7, #36	; 0x24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d18:	d301      	bcc.n	8000d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00f      	b.n	8000d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <SysTick_Config+0x40>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d26:	210f      	movs	r1, #15
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f7ff ff8e 	bl	8000c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <SysTick_Config+0x40>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d36:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <SysTick_Config+0x40>)
 8000d38:	2207      	movs	r2, #7
 8000d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	e000e010 	.word	0xe000e010

08000d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff ff29 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d74:	f7ff ff3e 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f7ff ff8e 	bl	8000ca0 <NVIC_EncodePriority>
 8000d84:	4602      	mov	r2, r0
 8000d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff5d 	bl	8000c4c <__NVIC_SetPriority>
}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff31 	bl	8000c10 <__NVIC_EnableIRQ>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ffa2 	bl	8000d08 <SysTick_Config>
 8000dc4:	4603      	mov	r3, r0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b084      	sub	sp, #16
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dda:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ddc:	f7ff feda 	bl	8000b94 <HAL_GetTick>
 8000de0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d008      	beq.n	8000e00 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2280      	movs	r2, #128	; 0x80
 8000df2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e052      	b.n	8000ea6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f022 0216 	bic.w	r2, r2, #22
 8000e0e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	695a      	ldr	r2, [r3, #20]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e1e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d103      	bne.n	8000e30 <HAL_DMA_Abort+0x62>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d007      	beq.n	8000e40 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f022 0208 	bic.w	r2, r2, #8
 8000e3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f022 0201 	bic.w	r2, r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e50:	e013      	b.n	8000e7a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e52:	f7ff fe9f 	bl	8000b94 <HAL_GetTick>
 8000e56:	4602      	mov	r2, r0
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	2b05      	cmp	r3, #5
 8000e5e:	d90c      	bls.n	8000e7a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2220      	movs	r2, #32
 8000e64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2203      	movs	r2, #3
 8000e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e015      	b.n	8000ea6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1e4      	bne.n	8000e52 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e8c:	223f      	movs	r2, #63	; 0x3f
 8000e8e:	409a      	lsls	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2201      	movs	r2, #1
 8000e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d004      	beq.n	8000ecc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2280      	movs	r2, #128	; 0x80
 8000ec6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e00c      	b.n	8000ee6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2205      	movs	r2, #5
 8000ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 0201 	bic.w	r2, r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f06:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <HAL_FLASH_Program+0xa0>)
 8000f08:	7e1b      	ldrb	r3, [r3, #24]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d101      	bne.n	8000f12 <HAL_FLASH_Program+0x1e>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	e03b      	b.n	8000f8a <HAL_FLASH_Program+0x96>
 8000f12:	4b20      	ldr	r3, [pc, #128]	; (8000f94 <HAL_FLASH_Program+0xa0>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f1c:	f000 f870 	bl	8001000 <FLASH_WaitForLastOperation>
 8000f20:	4603      	mov	r3, r0
 8000f22:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000f24:	7dfb      	ldrb	r3, [r7, #23]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d12b      	bne.n	8000f82 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d105      	bne.n	8000f3c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000f30:	783b      	ldrb	r3, [r7, #0]
 8000f32:	4619      	mov	r1, r3
 8000f34:	68b8      	ldr	r0, [r7, #8]
 8000f36:	f000 f91b 	bl	8001170 <FLASH_Program_Byte>
 8000f3a:	e016      	b.n	8000f6a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d105      	bne.n	8000f4e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000f42:	883b      	ldrh	r3, [r7, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	68b8      	ldr	r0, [r7, #8]
 8000f48:	f000 f8ee 	bl	8001128 <FLASH_Program_HalfWord>
 8000f4c:	e00d      	b.n	8000f6a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d105      	bne.n	8000f60 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	4619      	mov	r1, r3
 8000f58:	68b8      	ldr	r0, [r7, #8]
 8000f5a:	f000 f8c3 	bl	80010e4 <FLASH_Program_Word>
 8000f5e:	e004      	b.n	8000f6a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000f60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f64:	68b8      	ldr	r0, [r7, #8]
 8000f66:	f000 f88b 	bl	8001080 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000f6e:	f000 f847 	bl	8001000 <FLASH_WaitForLastOperation>
 8000f72:	4603      	mov	r3, r0
 8000f74:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <HAL_FLASH_Program+0xa4>)
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <HAL_FLASH_Program+0xa4>)
 8000f7c:	f023 0301 	bic.w	r3, r3, #1
 8000f80:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000f82:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <HAL_FLASH_Program+0xa0>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	761a      	strb	r2, [r3, #24]
  
  return status;
 8000f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000184 	.word	0x20000184
 8000f98:	40023c00 	.word	0x40023c00

08000f9c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <HAL_FLASH_Unlock+0x38>)
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	da0b      	bge.n	8000fc6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <HAL_FLASH_Unlock+0x38>)
 8000fb0:	4a09      	ldr	r2, [pc, #36]	; (8000fd8 <HAL_FLASH_Unlock+0x3c>)
 8000fb2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000fb4:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <HAL_FLASH_Unlock+0x38>)
 8000fb6:	4a09      	ldr	r2, [pc, #36]	; (8000fdc <HAL_FLASH_Unlock+0x40>)
 8000fb8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_FLASH_Unlock+0x38>)
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	da01      	bge.n	8000fc6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	40023c00 	.word	0x40023c00
 8000fd8:	45670123 	.word	0x45670123
 8000fdc:	cdef89ab 	.word	0xcdef89ab

08000fe0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <HAL_FLASH_Lock+0x1c>)
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <HAL_FLASH_Lock+0x1c>)
 8000fea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fee:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	40023c00 	.word	0x40023c00

08001000 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800100c:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <FLASH_WaitForLastOperation+0x78>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001012:	f7ff fdbf 	bl	8000b94 <HAL_GetTick>
 8001016:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001018:	e010      	b.n	800103c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001020:	d00c      	beq.n	800103c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d007      	beq.n	8001038 <FLASH_WaitForLastOperation+0x38>
 8001028:	f7ff fdb4 	bl	8000b94 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	429a      	cmp	r2, r3
 8001036:	d201      	bcs.n	800103c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e019      	b.n	8001070 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <FLASH_WaitForLastOperation+0x7c>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1e8      	bne.n	800101a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <FLASH_WaitForLastOperation+0x7c>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <FLASH_WaitForLastOperation+0x7c>)
 8001056:	2201      	movs	r2, #1
 8001058:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <FLASH_WaitForLastOperation+0x7c>)
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001066:	f000 f8a5 	bl	80011b4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
  
}  
 8001070:	4618      	mov	r0, r3
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000184 	.word	0x20000184
 800107c:	40023c00 	.word	0x40023c00

08001080 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <FLASH_Program_DoubleWord+0x60>)
 800108e:	691b      	ldr	r3, [r3, #16]
 8001090:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <FLASH_Program_DoubleWord+0x60>)
 8001092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001096:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <FLASH_Program_DoubleWord+0x60>)
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <FLASH_Program_DoubleWord+0x60>)
 800109e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80010a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <FLASH_Program_DoubleWord+0x60>)
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <FLASH_Program_DoubleWord+0x60>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80010b6:	f3bf 8f6f 	isb	sy
}
 80010ba:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80010bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	f04f 0300 	mov.w	r3, #0
 80010c8:	000a      	movs	r2, r1
 80010ca:	2300      	movs	r3, #0
 80010cc:	68f9      	ldr	r1, [r7, #12]
 80010ce:	3104      	adds	r1, #4
 80010d0:	4613      	mov	r3, r2
 80010d2:	600b      	str	r3, [r1, #0]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	40023c00 	.word	0x40023c00

080010e4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80010ee:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <FLASH_Program_Word+0x40>)
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	4a0c      	ldr	r2, [pc, #48]	; (8001124 <FLASH_Program_Word+0x40>)
 80010f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <FLASH_Program_Word+0x40>)
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	4a09      	ldr	r2, [pc, #36]	; (8001124 <FLASH_Program_Word+0x40>)
 8001100:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001104:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <FLASH_Program_Word+0x40>)
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	4a06      	ldr	r2, [pc, #24]	; (8001124 <FLASH_Program_Word+0x40>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	601a      	str	r2, [r3, #0]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	40023c00 	.word	0x40023c00

08001128 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <FLASH_Program_HalfWord+0x44>)
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	4a0c      	ldr	r2, [pc, #48]	; (800116c <FLASH_Program_HalfWord+0x44>)
 800113a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800113e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001140:	4b0a      	ldr	r3, [pc, #40]	; (800116c <FLASH_Program_HalfWord+0x44>)
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	4a09      	ldr	r2, [pc, #36]	; (800116c <FLASH_Program_HalfWord+0x44>)
 8001146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <FLASH_Program_HalfWord+0x44>)
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	4a06      	ldr	r2, [pc, #24]	; (800116c <FLASH_Program_HalfWord+0x44>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	801a      	strh	r2, [r3, #0]
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40023c00 	.word	0x40023c00

08001170 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <FLASH_Program_Byte+0x40>)
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	4a0b      	ldr	r2, [pc, #44]	; (80011b0 <FLASH_Program_Byte+0x40>)
 8001182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001186:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <FLASH_Program_Byte+0x40>)
 800118a:	4a09      	ldr	r2, [pc, #36]	; (80011b0 <FLASH_Program_Byte+0x40>)
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <FLASH_Program_Byte+0x40>)
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <FLASH_Program_Byte+0x40>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	78fa      	ldrb	r2, [r7, #3]
 80011a0:	701a      	strb	r2, [r3, #0]
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40023c00 	.word	0x40023c00

080011b4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80011b8:	4b2f      	ldr	r3, [pc, #188]	; (8001278 <FLASH_SetErrorCode+0xc4>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	f003 0310 	and.w	r3, r3, #16
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d008      	beq.n	80011d6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80011c4:	4b2d      	ldr	r3, [pc, #180]	; (800127c <FLASH_SetErrorCode+0xc8>)
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	f043 0310 	orr.w	r3, r3, #16
 80011cc:	4a2b      	ldr	r2, [pc, #172]	; (800127c <FLASH_SetErrorCode+0xc8>)
 80011ce:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80011d0:	4b29      	ldr	r3, [pc, #164]	; (8001278 <FLASH_SetErrorCode+0xc4>)
 80011d2:	2210      	movs	r2, #16
 80011d4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80011d6:	4b28      	ldr	r3, [pc, #160]	; (8001278 <FLASH_SetErrorCode+0xc4>)
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	f003 0320 	and.w	r3, r3, #32
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d008      	beq.n	80011f4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <FLASH_SetErrorCode+0xc8>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f043 0308 	orr.w	r3, r3, #8
 80011ea:	4a24      	ldr	r2, [pc, #144]	; (800127c <FLASH_SetErrorCode+0xc8>)
 80011ec:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80011ee:	4b22      	ldr	r3, [pc, #136]	; (8001278 <FLASH_SetErrorCode+0xc4>)
 80011f0:	2220      	movs	r2, #32
 80011f2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <FLASH_SetErrorCode+0xc4>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d008      	beq.n	8001212 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001200:	4b1e      	ldr	r3, [pc, #120]	; (800127c <FLASH_SetErrorCode+0xc8>)
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	f043 0304 	orr.w	r3, r3, #4
 8001208:	4a1c      	ldr	r2, [pc, #112]	; (800127c <FLASH_SetErrorCode+0xc8>)
 800120a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <FLASH_SetErrorCode+0xc4>)
 800120e:	2240      	movs	r2, #64	; 0x40
 8001210:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <FLASH_SetErrorCode+0xc4>)
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121a:	2b00      	cmp	r3, #0
 800121c:	d008      	beq.n	8001230 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <FLASH_SetErrorCode+0xc8>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f043 0302 	orr.w	r3, r3, #2
 8001226:	4a15      	ldr	r2, [pc, #84]	; (800127c <FLASH_SetErrorCode+0xc8>)
 8001228:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <FLASH_SetErrorCode+0xc4>)
 800122c:	2280      	movs	r2, #128	; 0x80
 800122e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <FLASH_SetErrorCode+0xc4>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001238:	2b00      	cmp	r3, #0
 800123a:	d009      	beq.n	8001250 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <FLASH_SetErrorCode+0xc8>)
 800123e:	69db      	ldr	r3, [r3, #28]
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	4a0d      	ldr	r2, [pc, #52]	; (800127c <FLASH_SetErrorCode+0xc8>)
 8001246:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <FLASH_SetErrorCode+0xc4>)
 800124a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800124e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <FLASH_SetErrorCode+0xc4>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d008      	beq.n	800126e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <FLASH_SetErrorCode+0xc8>)
 800125e:	69db      	ldr	r3, [r3, #28]
 8001260:	f043 0320 	orr.w	r3, r3, #32
 8001264:	4a05      	ldr	r2, [pc, #20]	; (800127c <FLASH_SetErrorCode+0xc8>)
 8001266:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001268:	4b03      	ldr	r3, [pc, #12]	; (8001278 <FLASH_SetErrorCode+0xc4>)
 800126a:	2202      	movs	r2, #2
 800126c:	60da      	str	r2, [r3, #12]
  }
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	40023c00 	.word	0x40023c00
 800127c:	20000184 	.word	0x20000184

08001280 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001292:	4b31      	ldr	r3, [pc, #196]	; (8001358 <HAL_FLASHEx_Erase+0xd8>)
 8001294:	7e1b      	ldrb	r3, [r3, #24]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d101      	bne.n	800129e <HAL_FLASHEx_Erase+0x1e>
 800129a:	2302      	movs	r3, #2
 800129c:	e058      	b.n	8001350 <HAL_FLASHEx_Erase+0xd0>
 800129e:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <HAL_FLASHEx_Erase+0xd8>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012a8:	f7ff feaa 	bl	8001000 <FLASH_WaitForLastOperation>
 80012ac:	4603      	mov	r3, r0
 80012ae:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d148      	bne.n	8001348 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d115      	bne.n	80012f2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	691b      	ldr	r3, [r3, #16]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	4619      	mov	r1, r3
 80012d2:	4610      	mov	r0, r2
 80012d4:	f000 f844 	bl	8001360 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012dc:	f7ff fe90 	bl	8001000 <FLASH_WaitForLastOperation>
 80012e0:	4603      	mov	r3, r0
 80012e2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80012e4:	4b1d      	ldr	r3, [pc, #116]	; (800135c <HAL_FLASHEx_Erase+0xdc>)
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	4a1c      	ldr	r2, [pc, #112]	; (800135c <HAL_FLASHEx_Erase+0xdc>)
 80012ea:	f023 0304 	bic.w	r3, r3, #4
 80012ee:	6113      	str	r3, [r2, #16]
 80012f0:	e028      	b.n	8001344 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	e01c      	b.n	8001334 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	4619      	mov	r1, r3
 8001302:	68b8      	ldr	r0, [r7, #8]
 8001304:	f000 f850 	bl	80013a8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001308:	f24c 3050 	movw	r0, #50000	; 0xc350
 800130c:	f7ff fe78 	bl	8001000 <FLASH_WaitForLastOperation>
 8001310:	4603      	mov	r3, r0
 8001312:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <HAL_FLASHEx_Erase+0xdc>)
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	4a10      	ldr	r2, [pc, #64]	; (800135c <HAL_FLASHEx_Erase+0xdc>)
 800131a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800131e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	601a      	str	r2, [r3, #0]
          break;
 800132c:	e00a      	b.n	8001344 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	3301      	adds	r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	4413      	add	r3, r2
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	429a      	cmp	r2, r3
 8001342:	d3da      	bcc.n	80012fa <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001344:	f000 f878 	bl	8001438 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001348:	4b03      	ldr	r3, [pc, #12]	; (8001358 <HAL_FLASHEx_Erase+0xd8>)
 800134a:	2200      	movs	r2, #0
 800134c:	761a      	strb	r2, [r3, #24]

  return status;
 800134e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000184 	.word	0x20000184
 800135c:	40023c00 	.word	0x40023c00

08001360 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <FLASH_MassErase+0x44>)
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	4a0c      	ldr	r2, [pc, #48]	; (80013a4 <FLASH_MassErase+0x44>)
 8001372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001376:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <FLASH_MassErase+0x44>)
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <FLASH_MassErase+0x44>)
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <FLASH_MassErase+0x44>)
 8001386:	691a      	ldr	r2, [r3, #16]
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	4313      	orrs	r3, r2
 800138e:	4a05      	ldr	r2, [pc, #20]	; (80013a4 <FLASH_MassErase+0x44>)
 8001390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001394:	6113      	str	r3, [r2, #16]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023c00 	.word	0x40023c00

080013a8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d102      	bne.n	80013c4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	e010      	b.n	80013e6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d103      	bne.n	80013d2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80013ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	e009      	b.n	80013e6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d103      	bne.n	80013e0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80013d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	e002      	b.n	80013e6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80013e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013e4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80013e6:	4b13      	ldr	r3, [pc, #76]	; (8001434 <FLASH_Erase_Sector+0x8c>)
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <FLASH_Erase_Sector+0x8c>)
 80013ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <FLASH_Erase_Sector+0x8c>)
 80013f4:	691a      	ldr	r2, [r3, #16]
 80013f6:	490f      	ldr	r1, [pc, #60]	; (8001434 <FLASH_Erase_Sector+0x8c>)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80013fe:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <FLASH_Erase_Sector+0x8c>)
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	4a0c      	ldr	r2, [pc, #48]	; (8001434 <FLASH_Erase_Sector+0x8c>)
 8001404:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001408:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800140a:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <FLASH_Erase_Sector+0x8c>)
 800140c:	691a      	ldr	r2, [r3, #16]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	4313      	orrs	r3, r2
 8001414:	4a07      	ldr	r2, [pc, #28]	; (8001434 <FLASH_Erase_Sector+0x8c>)
 8001416:	f043 0302 	orr.w	r3, r3, #2
 800141a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <FLASH_Erase_Sector+0x8c>)
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <FLASH_Erase_Sector+0x8c>)
 8001422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001426:	6113      	str	r3, [r2, #16]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	40023c00 	.word	0x40023c00

08001438 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800143c:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <FLASH_FlushCaches+0x88>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001444:	2b00      	cmp	r3, #0
 8001446:	d017      	beq.n	8001478 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <FLASH_FlushCaches+0x88>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a1c      	ldr	r2, [pc, #112]	; (80014c0 <FLASH_FlushCaches+0x88>)
 800144e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001452:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <FLASH_FlushCaches+0x88>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a19      	ldr	r2, [pc, #100]	; (80014c0 <FLASH_FlushCaches+0x88>)
 800145a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <FLASH_FlushCaches+0x88>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a16      	ldr	r2, [pc, #88]	; (80014c0 <FLASH_FlushCaches+0x88>)
 8001466:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800146a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <FLASH_FlushCaches+0x88>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a13      	ldr	r2, [pc, #76]	; (80014c0 <FLASH_FlushCaches+0x88>)
 8001472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001476:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <FLASH_FlushCaches+0x88>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001480:	2b00      	cmp	r3, #0
 8001482:	d017      	beq.n	80014b4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001484:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <FLASH_FlushCaches+0x88>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0d      	ldr	r2, [pc, #52]	; (80014c0 <FLASH_FlushCaches+0x88>)
 800148a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800148e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <FLASH_FlushCaches+0x88>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <FLASH_FlushCaches+0x88>)
 8001496:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <FLASH_FlushCaches+0x88>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a07      	ldr	r2, [pc, #28]	; (80014c0 <FLASH_FlushCaches+0x88>)
 80014a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014a6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <FLASH_FlushCaches+0x88>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <FLASH_FlushCaches+0x88>)
 80014ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014b2:	6013      	str	r3, [r2, #0]
  }
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40023c00 	.word	0x40023c00

080014c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
 80014de:	e165      	b.n	80017ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014e0:	2201      	movs	r2, #1
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	f040 8154 	bne.w	80017a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	2b01      	cmp	r3, #1
 8001508:	d005      	beq.n	8001516 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001512:	2b02      	cmp	r3, #2
 8001514:	d130      	bne.n	8001578 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	2203      	movs	r2, #3
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4013      	ands	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	68da      	ldr	r2, [r3, #12]
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800154c:	2201      	movs	r2, #1
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	091b      	lsrs	r3, r3, #4
 8001562:	f003 0201 	and.w	r2, r3, #1
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	2b03      	cmp	r3, #3
 8001582:	d017      	beq.n	80015b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	2203      	movs	r2, #3
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d123      	bne.n	8001608 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	08da      	lsrs	r2, r3, #3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3208      	adds	r2, #8
 80015c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	691a      	ldr	r2, [r3, #16]
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	08da      	lsrs	r2, r3, #3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3208      	adds	r2, #8
 8001602:	69b9      	ldr	r1, [r7, #24]
 8001604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 0203 	and.w	r2, r3, #3
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 80ae 	beq.w	80017a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b5d      	ldr	r3, [pc, #372]	; (80017c4 <HAL_GPIO_Init+0x300>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	4a5c      	ldr	r2, [pc, #368]	; (80017c4 <HAL_GPIO_Init+0x300>)
 8001654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001658:	6453      	str	r3, [r2, #68]	; 0x44
 800165a:	4b5a      	ldr	r3, [pc, #360]	; (80017c4 <HAL_GPIO_Init+0x300>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001666:	4a58      	ldr	r2, [pc, #352]	; (80017c8 <HAL_GPIO_Init+0x304>)
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3302      	adds	r3, #2
 800166e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	220f      	movs	r2, #15
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43db      	mvns	r3, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4013      	ands	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a4f      	ldr	r2, [pc, #316]	; (80017cc <HAL_GPIO_Init+0x308>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d025      	beq.n	80016de <HAL_GPIO_Init+0x21a>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a4e      	ldr	r2, [pc, #312]	; (80017d0 <HAL_GPIO_Init+0x30c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d01f      	beq.n	80016da <HAL_GPIO_Init+0x216>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a4d      	ldr	r2, [pc, #308]	; (80017d4 <HAL_GPIO_Init+0x310>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d019      	beq.n	80016d6 <HAL_GPIO_Init+0x212>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4c      	ldr	r2, [pc, #304]	; (80017d8 <HAL_GPIO_Init+0x314>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d013      	beq.n	80016d2 <HAL_GPIO_Init+0x20e>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4b      	ldr	r2, [pc, #300]	; (80017dc <HAL_GPIO_Init+0x318>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d00d      	beq.n	80016ce <HAL_GPIO_Init+0x20a>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a4a      	ldr	r2, [pc, #296]	; (80017e0 <HAL_GPIO_Init+0x31c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d007      	beq.n	80016ca <HAL_GPIO_Init+0x206>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a49      	ldr	r2, [pc, #292]	; (80017e4 <HAL_GPIO_Init+0x320>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d101      	bne.n	80016c6 <HAL_GPIO_Init+0x202>
 80016c2:	2306      	movs	r3, #6
 80016c4:	e00c      	b.n	80016e0 <HAL_GPIO_Init+0x21c>
 80016c6:	2307      	movs	r3, #7
 80016c8:	e00a      	b.n	80016e0 <HAL_GPIO_Init+0x21c>
 80016ca:	2305      	movs	r3, #5
 80016cc:	e008      	b.n	80016e0 <HAL_GPIO_Init+0x21c>
 80016ce:	2304      	movs	r3, #4
 80016d0:	e006      	b.n	80016e0 <HAL_GPIO_Init+0x21c>
 80016d2:	2303      	movs	r3, #3
 80016d4:	e004      	b.n	80016e0 <HAL_GPIO_Init+0x21c>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e002      	b.n	80016e0 <HAL_GPIO_Init+0x21c>
 80016da:	2301      	movs	r3, #1
 80016dc:	e000      	b.n	80016e0 <HAL_GPIO_Init+0x21c>
 80016de:	2300      	movs	r3, #0
 80016e0:	69fa      	ldr	r2, [r7, #28]
 80016e2:	f002 0203 	and.w	r2, r2, #3
 80016e6:	0092      	lsls	r2, r2, #2
 80016e8:	4093      	lsls	r3, r2
 80016ea:	69ba      	ldr	r2, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016f0:	4935      	ldr	r1, [pc, #212]	; (80017c8 <HAL_GPIO_Init+0x304>)
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	089b      	lsrs	r3, r3, #2
 80016f6:	3302      	adds	r3, #2
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016fe:	4b3a      	ldr	r3, [pc, #232]	; (80017e8 <HAL_GPIO_Init+0x324>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001722:	4a31      	ldr	r2, [pc, #196]	; (80017e8 <HAL_GPIO_Init+0x324>)
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001728:	4b2f      	ldr	r3, [pc, #188]	; (80017e8 <HAL_GPIO_Init+0x324>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800174c:	4a26      	ldr	r2, [pc, #152]	; (80017e8 <HAL_GPIO_Init+0x324>)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001752:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <HAL_GPIO_Init+0x324>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001776:	4a1c      	ldr	r2, [pc, #112]	; (80017e8 <HAL_GPIO_Init+0x324>)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800177c:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <HAL_GPIO_Init+0x324>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d003      	beq.n	80017a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017a0:	4a11      	ldr	r2, [pc, #68]	; (80017e8 <HAL_GPIO_Init+0x324>)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3301      	adds	r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	2b0f      	cmp	r3, #15
 80017b0:	f67f ae96 	bls.w	80014e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40013800 	.word	0x40013800
 80017cc:	40020000 	.word	0x40020000
 80017d0:	40020400 	.word	0x40020400
 80017d4:	40020800 	.word	0x40020800
 80017d8:	40020c00 	.word	0x40020c00
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40021400 	.word	0x40021400
 80017e4:	40021800 	.word	0x40021800
 80017e8:	40013c00 	.word	0x40013c00

080017ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	807b      	strh	r3, [r7, #2]
 80017f8:	4613      	mov	r3, r2
 80017fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017fc:	787b      	ldrb	r3, [r7, #1]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001802:	887a      	ldrh	r2, [r7, #2]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001808:	e003      	b.n	8001812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800180a:	887b      	ldrh	r3, [r7, #2]
 800180c:	041a      	lsls	r2, r3, #16
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	619a      	str	r2, [r3, #24]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	603b      	str	r3, [r7, #0]
 800182e:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	4a1f      	ldr	r2, [pc, #124]	; (80018b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001838:	6413      	str	r3, [r2, #64]	; 0x40
 800183a:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <HAL_PWREx_EnableOverDrive+0x90>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001846:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800184c:	f7ff f9a2 	bl	8000b94 <HAL_GetTick>
 8001850:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001852:	e009      	b.n	8001868 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001854:	f7ff f99e 	bl	8000b94 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001862:	d901      	bls.n	8001868 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e01f      	b.n	80018a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001874:	d1ee      	bne.n	8001854 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001878:	2201      	movs	r2, #1
 800187a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800187c:	f7ff f98a 	bl	8000b94 <HAL_GetTick>
 8001880:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001882:	e009      	b.n	8001898 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001884:	f7ff f986 	bl	8000b94 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001892:	d901      	bls.n	8001898 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e007      	b.n	80018a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001898:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018a4:	d1ee      	bne.n	8001884 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40023800 	.word	0x40023800
 80018b4:	420e0040 	.word	0x420e0040
 80018b8:	40007000 	.word	0x40007000
 80018bc:	420e0044 	.word	0x420e0044

080018c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0cc      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018d4:	4b68      	ldr	r3, [pc, #416]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 030f 	and.w	r3, r3, #15
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d90c      	bls.n	80018fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b65      	ldr	r3, [pc, #404]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b63      	ldr	r3, [pc, #396]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0b8      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d020      	beq.n	800194a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001914:	4b59      	ldr	r3, [pc, #356]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4a58      	ldr	r2, [pc, #352]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800191e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800192c:	4b53      	ldr	r3, [pc, #332]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	4a52      	ldr	r2, [pc, #328]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001938:	4b50      	ldr	r3, [pc, #320]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	494d      	ldr	r1, [pc, #308]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d044      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d107      	bne.n	800196e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	4b47      	ldr	r3, [pc, #284]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d119      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e07f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d003      	beq.n	800197e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800197a:	2b03      	cmp	r3, #3
 800197c:	d107      	bne.n	800198e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197e:	4b3f      	ldr	r3, [pc, #252]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e06f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198e:	4b3b      	ldr	r3, [pc, #236]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e067      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800199e:	4b37      	ldr	r3, [pc, #220]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f023 0203 	bic.w	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4934      	ldr	r1, [pc, #208]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b0:	f7ff f8f0 	bl	8000b94 <HAL_GetTick>
 80019b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b8:	f7ff f8ec 	bl	8000b94 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e04f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ce:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 020c 	and.w	r2, r3, #12
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	429a      	cmp	r2, r3
 80019de:	d1eb      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019e0:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 030f 	and.w	r3, r3, #15
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d20c      	bcs.n	8001a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e032      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d008      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	4916      	ldr	r1, [pc, #88]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d009      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	490e      	ldr	r1, [pc, #56]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a46:	f000 f855 	bl	8001af4 <HAL_RCC_GetSysClockFreq>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	490a      	ldr	r1, [pc, #40]	; (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	5ccb      	ldrb	r3, [r1, r3]
 8001a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f850 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	08004308 	.word	0x08004308
 8001a84:	20000000 	.word	0x20000000
 8001a88:	20000004 	.word	0x20000004

08001a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a92:	681b      	ldr	r3, [r3, #0]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000000 	.word	0x20000000

08001aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001aa8:	f7ff fff0 	bl	8001a8c <HAL_RCC_GetHCLKFreq>
 8001aac:	4602      	mov	r2, r0
 8001aae:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	0a9b      	lsrs	r3, r3, #10
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	4903      	ldr	r1, [pc, #12]	; (8001ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aba:	5ccb      	ldrb	r3, [r1, r3]
 8001abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	08004318 	.word	0x08004318

08001acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ad0:	f7ff ffdc 	bl	8001a8c <HAL_RCC_GetHCLKFreq>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	0b5b      	lsrs	r3, r3, #13
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	4903      	ldr	r1, [pc, #12]	; (8001af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ae2:	5ccb      	ldrb	r3, [r1, r3]
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40023800 	.word	0x40023800
 8001af0:	08004318 	.word	0x08004318

08001af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af8:	b088      	sub	sp, #32
 8001afa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b10:	4bce      	ldr	r3, [pc, #824]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	2b0c      	cmp	r3, #12
 8001b1a:	f200 818d 	bhi.w	8001e38 <HAL_RCC_GetSysClockFreq+0x344>
 8001b1e:	a201      	add	r2, pc, #4	; (adr r2, 8001b24 <HAL_RCC_GetSysClockFreq+0x30>)
 8001b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b24:	08001b59 	.word	0x08001b59
 8001b28:	08001e39 	.word	0x08001e39
 8001b2c:	08001e39 	.word	0x08001e39
 8001b30:	08001e39 	.word	0x08001e39
 8001b34:	08001b5f 	.word	0x08001b5f
 8001b38:	08001e39 	.word	0x08001e39
 8001b3c:	08001e39 	.word	0x08001e39
 8001b40:	08001e39 	.word	0x08001e39
 8001b44:	08001b65 	.word	0x08001b65
 8001b48:	08001e39 	.word	0x08001e39
 8001b4c:	08001e39 	.word	0x08001e39
 8001b50:	08001e39 	.word	0x08001e39
 8001b54:	08001cd9 	.word	0x08001cd9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b58:	4bbd      	ldr	r3, [pc, #756]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001b5a:	61bb      	str	r3, [r7, #24]
       break;
 8001b5c:	e16f      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b5e:	4bbd      	ldr	r3, [pc, #756]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x360>)
 8001b60:	61bb      	str	r3, [r7, #24]
      break;
 8001b62:	e16c      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b64:	4bb9      	ldr	r3, [pc, #740]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b6c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b6e:	4bb7      	ldr	r3, [pc, #732]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d053      	beq.n	8001c22 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b7a:	4bb4      	ldr	r3, [pc, #720]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	099b      	lsrs	r3, r3, #6
 8001b80:	461a      	mov	r2, r3
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b8a:	f04f 0100 	mov.w	r1, #0
 8001b8e:	ea02 0400 	and.w	r4, r2, r0
 8001b92:	603c      	str	r4, [r7, #0]
 8001b94:	400b      	ands	r3, r1
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	4629      	mov	r1, r5
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	014b      	lsls	r3, r1, #5
 8001baa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bae:	0142      	lsls	r2, r0, #5
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4623      	mov	r3, r4
 8001bb6:	1ac0      	subs	r0, r0, r3
 8001bb8:	462b      	mov	r3, r5
 8001bba:	eb61 0103 	sbc.w	r1, r1, r3
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	018b      	lsls	r3, r1, #6
 8001bc8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001bcc:	0182      	lsls	r2, r0, #6
 8001bce:	1a12      	subs	r2, r2, r0
 8001bd0:	eb63 0301 	sbc.w	r3, r3, r1
 8001bd4:	f04f 0000 	mov.w	r0, #0
 8001bd8:	f04f 0100 	mov.w	r1, #0
 8001bdc:	00d9      	lsls	r1, r3, #3
 8001bde:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001be2:	00d0      	lsls	r0, r2, #3
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4621      	mov	r1, r4
 8001bea:	1852      	adds	r2, r2, r1
 8001bec:	4629      	mov	r1, r5
 8001bee:	eb43 0101 	adc.w	r1, r3, r1
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	f04f 0000 	mov.w	r0, #0
 8001bf8:	f04f 0100 	mov.w	r1, #0
 8001bfc:	0259      	lsls	r1, r3, #9
 8001bfe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c02:	0250      	lsls	r0, r2, #9
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4610      	mov	r0, r2
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	f7fe fb54 	bl	80002c0 <__aeabi_uldivmod>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	61fb      	str	r3, [r7, #28]
 8001c20:	e04c      	b.n	8001cbc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c22:	4b8a      	ldr	r3, [pc, #552]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	099b      	lsrs	r3, r3, #6
 8001c28:	461a      	mov	r2, r3
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c32:	f04f 0100 	mov.w	r1, #0
 8001c36:	ea02 0a00 	and.w	sl, r2, r0
 8001c3a:	ea03 0b01 	and.w	fp, r3, r1
 8001c3e:	4650      	mov	r0, sl
 8001c40:	4659      	mov	r1, fp
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	014b      	lsls	r3, r1, #5
 8001c4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c50:	0142      	lsls	r2, r0, #5
 8001c52:	4610      	mov	r0, r2
 8001c54:	4619      	mov	r1, r3
 8001c56:	ebb0 000a 	subs.w	r0, r0, sl
 8001c5a:	eb61 010b 	sbc.w	r1, r1, fp
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	018b      	lsls	r3, r1, #6
 8001c68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c6c:	0182      	lsls	r2, r0, #6
 8001c6e:	1a12      	subs	r2, r2, r0
 8001c70:	eb63 0301 	sbc.w	r3, r3, r1
 8001c74:	f04f 0000 	mov.w	r0, #0
 8001c78:	f04f 0100 	mov.w	r1, #0
 8001c7c:	00d9      	lsls	r1, r3, #3
 8001c7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c82:	00d0      	lsls	r0, r2, #3
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	eb12 020a 	adds.w	r2, r2, sl
 8001c8c:	eb43 030b 	adc.w	r3, r3, fp
 8001c90:	f04f 0000 	mov.w	r0, #0
 8001c94:	f04f 0100 	mov.w	r1, #0
 8001c98:	0299      	lsls	r1, r3, #10
 8001c9a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c9e:	0290      	lsls	r0, r2, #10
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	461a      	mov	r2, r3
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	f7fe fb06 	bl	80002c0 <__aeabi_uldivmod>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4613      	mov	r3, r2
 8001cba:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cbc:	4b63      	ldr	r3, [pc, #396]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	0c1b      	lsrs	r3, r3, #16
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001ccc:	69fa      	ldr	r2, [r7, #28]
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd4:	61bb      	str	r3, [r7, #24]
      break;
 8001cd6:	e0b2      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd8:	4b5c      	ldr	r3, [pc, #368]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ce0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ce2:	4b5a      	ldr	r3, [pc, #360]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d04d      	beq.n	8001d8a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cee:	4b57      	ldr	r3, [pc, #348]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	099b      	lsrs	r3, r3, #6
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cfe:	f04f 0100 	mov.w	r1, #0
 8001d02:	ea02 0800 	and.w	r8, r2, r0
 8001d06:	ea03 0901 	and.w	r9, r3, r1
 8001d0a:	4640      	mov	r0, r8
 8001d0c:	4649      	mov	r1, r9
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	014b      	lsls	r3, r1, #5
 8001d18:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d1c:	0142      	lsls	r2, r0, #5
 8001d1e:	4610      	mov	r0, r2
 8001d20:	4619      	mov	r1, r3
 8001d22:	ebb0 0008 	subs.w	r0, r0, r8
 8001d26:	eb61 0109 	sbc.w	r1, r1, r9
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	f04f 0300 	mov.w	r3, #0
 8001d32:	018b      	lsls	r3, r1, #6
 8001d34:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d38:	0182      	lsls	r2, r0, #6
 8001d3a:	1a12      	subs	r2, r2, r0
 8001d3c:	eb63 0301 	sbc.w	r3, r3, r1
 8001d40:	f04f 0000 	mov.w	r0, #0
 8001d44:	f04f 0100 	mov.w	r1, #0
 8001d48:	00d9      	lsls	r1, r3, #3
 8001d4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d4e:	00d0      	lsls	r0, r2, #3
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	eb12 0208 	adds.w	r2, r2, r8
 8001d58:	eb43 0309 	adc.w	r3, r3, r9
 8001d5c:	f04f 0000 	mov.w	r0, #0
 8001d60:	f04f 0100 	mov.w	r1, #0
 8001d64:	0259      	lsls	r1, r3, #9
 8001d66:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d6a:	0250      	lsls	r0, r2, #9
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	461a      	mov	r2, r3
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	f7fe faa0 	bl	80002c0 <__aeabi_uldivmod>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4613      	mov	r3, r2
 8001d86:	61fb      	str	r3, [r7, #28]
 8001d88:	e04a      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d8a:	4b30      	ldr	r3, [pc, #192]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	099b      	lsrs	r3, r3, #6
 8001d90:	461a      	mov	r2, r3
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d9a:	f04f 0100 	mov.w	r1, #0
 8001d9e:	ea02 0400 	and.w	r4, r2, r0
 8001da2:	ea03 0501 	and.w	r5, r3, r1
 8001da6:	4620      	mov	r0, r4
 8001da8:	4629      	mov	r1, r5
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	014b      	lsls	r3, r1, #5
 8001db4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001db8:	0142      	lsls	r2, r0, #5
 8001dba:	4610      	mov	r0, r2
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	1b00      	subs	r0, r0, r4
 8001dc0:	eb61 0105 	sbc.w	r1, r1, r5
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	018b      	lsls	r3, r1, #6
 8001dce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001dd2:	0182      	lsls	r2, r0, #6
 8001dd4:	1a12      	subs	r2, r2, r0
 8001dd6:	eb63 0301 	sbc.w	r3, r3, r1
 8001dda:	f04f 0000 	mov.w	r0, #0
 8001dde:	f04f 0100 	mov.w	r1, #0
 8001de2:	00d9      	lsls	r1, r3, #3
 8001de4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001de8:	00d0      	lsls	r0, r2, #3
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	1912      	adds	r2, r2, r4
 8001df0:	eb45 0303 	adc.w	r3, r5, r3
 8001df4:	f04f 0000 	mov.w	r0, #0
 8001df8:	f04f 0100 	mov.w	r1, #0
 8001dfc:	0299      	lsls	r1, r3, #10
 8001dfe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e02:	0290      	lsls	r0, r2, #10
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	f7fe fa54 	bl	80002c0 <__aeabi_uldivmod>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	0f1b      	lsrs	r3, r3, #28
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001e2c:	69fa      	ldr	r2, [r7, #28]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	61bb      	str	r3, [r7, #24]
      break;
 8001e36:	e002      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e3a:	61bb      	str	r3, [r7, #24]
      break;
 8001e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3e:	69bb      	ldr	r3, [r7, #24]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3720      	adds	r7, #32
 8001e44:	46bd      	mov	sp, r7
 8001e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	00f42400 	.word	0x00f42400
 8001e54:	007a1200 	.word	0x007a1200

08001e58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e28d      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8083 	beq.w	8001f7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e78:	4b94      	ldr	r3, [pc, #592]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d019      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e84:	4b91      	ldr	r3, [pc, #580]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d106      	bne.n	8001e9e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e90:	4b8e      	ldr	r3, [pc, #568]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e9c:	d00c      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9e:	4b8b      	ldr	r3, [pc, #556]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ea6:	2b0c      	cmp	r3, #12
 8001ea8:	d112      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eaa:	4b88      	ldr	r3, [pc, #544]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eb6:	d10b      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eb8:	4b84      	ldr	r3, [pc, #528]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d05b      	beq.n	8001f7c <HAL_RCC_OscConfig+0x124>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d157      	bne.n	8001f7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e25a      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ed8:	d106      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x90>
 8001eda:	4b7c      	ldr	r3, [pc, #496]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a7b      	ldr	r2, [pc, #492]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e01d      	b.n	8001f24 <HAL_RCC_OscConfig+0xcc>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0xb4>
 8001ef2:	4b76      	ldr	r3, [pc, #472]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a75      	ldr	r2, [pc, #468]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b73      	ldr	r3, [pc, #460]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a72      	ldr	r2, [pc, #456]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCC_OscConfig+0xcc>
 8001f0c:	4b6f      	ldr	r3, [pc, #444]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a6e      	ldr	r2, [pc, #440]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b6c      	ldr	r3, [pc, #432]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a6b      	ldr	r2, [pc, #428]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7fe fe32 	bl	8000b94 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f34:	f7fe fe2e 	bl	8000b94 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e21f      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	4b61      	ldr	r3, [pc, #388]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0xdc>
 8001f52:	e014      	b.n	8001f7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7fe fe1e 	bl	8000b94 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7fe fe1a 	bl	8000b94 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e20b      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6e:	4b57      	ldr	r3, [pc, #348]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x104>
 8001f7a:	e000      	b.n	8001f7e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d06f      	beq.n	800206a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f8a:	4b50      	ldr	r3, [pc, #320]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d017      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f96:	4b4d      	ldr	r3, [pc, #308]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d105      	bne.n	8001fae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fa2:	4b4a      	ldr	r3, [pc, #296]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00b      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fae:	4b47      	ldr	r3, [pc, #284]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001fb6:	2b0c      	cmp	r3, #12
 8001fb8:	d11c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fba:	4b44      	ldr	r3, [pc, #272]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d116      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc6:	4b41      	ldr	r3, [pc, #260]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <HAL_RCC_OscConfig+0x186>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d001      	beq.n	8001fde <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e1d3      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fde:	4b3b      	ldr	r3, [pc, #236]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4937      	ldr	r1, [pc, #220]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff2:	e03a      	b.n	800206a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d020      	beq.n	800203e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ffc:	4b34      	ldr	r3, [pc, #208]	; (80020d0 <HAL_RCC_OscConfig+0x278>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002002:	f7fe fdc7 	bl	8000b94 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800200a:	f7fe fdc3 	bl	8000b94 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e1b4      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201c:	4b2b      	ldr	r3, [pc, #172]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002028:	4b28      	ldr	r3, [pc, #160]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4925      	ldr	r1, [pc, #148]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8002038:	4313      	orrs	r3, r2
 800203a:	600b      	str	r3, [r1, #0]
 800203c:	e015      	b.n	800206a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203e:	4b24      	ldr	r3, [pc, #144]	; (80020d0 <HAL_RCC_OscConfig+0x278>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7fe fda6 	bl	8000b94 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800204c:	f7fe fda2 	bl	8000b94 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e193      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205e:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d036      	beq.n	80020e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d016      	beq.n	80020ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <HAL_RCC_OscConfig+0x27c>)
 8002080:	2201      	movs	r2, #1
 8002082:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002084:	f7fe fd86 	bl	8000b94 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800208c:	f7fe fd82 	bl	8000b94 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e173      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <HAL_RCC_OscConfig+0x274>)
 80020a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x234>
 80020aa:	e01b      	b.n	80020e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_RCC_OscConfig+0x27c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b2:	f7fe fd6f 	bl	8000b94 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b8:	e00e      	b.n	80020d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ba:	f7fe fd6b 	bl	8000b94 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d907      	bls.n	80020d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e15c      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
 80020cc:	40023800 	.word	0x40023800
 80020d0:	42470000 	.word	0x42470000
 80020d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d8:	4b8a      	ldr	r3, [pc, #552]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 80020da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1ea      	bne.n	80020ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 8097 	beq.w	8002220 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f2:	2300      	movs	r3, #0
 80020f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f6:	4b83      	ldr	r3, [pc, #524]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10f      	bne.n	8002122 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	4b7f      	ldr	r3, [pc, #508]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	4a7e      	ldr	r2, [pc, #504]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002110:	6413      	str	r3, [r2, #64]	; 0x40
 8002112:	4b7c      	ldr	r3, [pc, #496]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800211e:	2301      	movs	r3, #1
 8002120:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002122:	4b79      	ldr	r3, [pc, #484]	; (8002308 <HAL_RCC_OscConfig+0x4b0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d118      	bne.n	8002160 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800212e:	4b76      	ldr	r3, [pc, #472]	; (8002308 <HAL_RCC_OscConfig+0x4b0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a75      	ldr	r2, [pc, #468]	; (8002308 <HAL_RCC_OscConfig+0x4b0>)
 8002134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002138:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213a:	f7fe fd2b 	bl	8000b94 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002142:	f7fe fd27 	bl	8000b94 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e118      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002154:	4b6c      	ldr	r3, [pc, #432]	; (8002308 <HAL_RCC_OscConfig+0x4b0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0f0      	beq.n	8002142 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d106      	bne.n	8002176 <HAL_RCC_OscConfig+0x31e>
 8002168:	4b66      	ldr	r3, [pc, #408]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216c:	4a65      	ldr	r2, [pc, #404]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6713      	str	r3, [r2, #112]	; 0x70
 8002174:	e01c      	b.n	80021b0 <HAL_RCC_OscConfig+0x358>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b05      	cmp	r3, #5
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x340>
 800217e:	4b61      	ldr	r3, [pc, #388]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002182:	4a60      	ldr	r2, [pc, #384]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002184:	f043 0304 	orr.w	r3, r3, #4
 8002188:	6713      	str	r3, [r2, #112]	; 0x70
 800218a:	4b5e      	ldr	r3, [pc, #376]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218e:	4a5d      	ldr	r2, [pc, #372]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6713      	str	r3, [r2, #112]	; 0x70
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0x358>
 8002198:	4b5a      	ldr	r3, [pc, #360]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800219a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219c:	4a59      	ldr	r2, [pc, #356]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800219e:	f023 0301 	bic.w	r3, r3, #1
 80021a2:	6713      	str	r3, [r2, #112]	; 0x70
 80021a4:	4b57      	ldr	r3, [pc, #348]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 80021a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a8:	4a56      	ldr	r2, [pc, #344]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 80021aa:	f023 0304 	bic.w	r3, r3, #4
 80021ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d015      	beq.n	80021e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b8:	f7fe fcec 	bl	8000b94 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021be:	e00a      	b.n	80021d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c0:	f7fe fce8 	bl	8000b94 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e0d7      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d6:	4b4b      	ldr	r3, [pc, #300]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0ee      	beq.n	80021c0 <HAL_RCC_OscConfig+0x368>
 80021e2:	e014      	b.n	800220e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e4:	f7fe fcd6 	bl	8000b94 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ea:	e00a      	b.n	8002202 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ec:	f7fe fcd2 	bl	8000b94 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e0c1      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002202:	4b40      	ldr	r3, [pc, #256]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1ee      	bne.n	80021ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800220e:	7dfb      	ldrb	r3, [r7, #23]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d105      	bne.n	8002220 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002214:	4b3b      	ldr	r3, [pc, #236]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	4a3a      	ldr	r2, [pc, #232]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800221a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800221e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80ad 	beq.w	8002384 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800222a:	4b36      	ldr	r3, [pc, #216]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b08      	cmp	r3, #8
 8002234:	d060      	beq.n	80022f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d145      	bne.n	80022ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223e:	4b33      	ldr	r3, [pc, #204]	; (800230c <HAL_RCC_OscConfig+0x4b4>)
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7fe fca6 	bl	8000b94 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800224c:	f7fe fca2 	bl	8000b94 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e093      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225e:	4b29      	ldr	r3, [pc, #164]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69da      	ldr	r2, [r3, #28]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	019b      	lsls	r3, r3, #6
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002280:	085b      	lsrs	r3, r3, #1
 8002282:	3b01      	subs	r3, #1
 8002284:	041b      	lsls	r3, r3, #16
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	061b      	lsls	r3, r3, #24
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	071b      	lsls	r3, r3, #28
 8002296:	491b      	ldr	r1, [pc, #108]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800229c:	4b1b      	ldr	r3, [pc, #108]	; (800230c <HAL_RCC_OscConfig+0x4b4>)
 800229e:	2201      	movs	r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a2:	f7fe fc77 	bl	8000b94 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022aa:	f7fe fc73 	bl	8000b94 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e064      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x452>
 80022c8:	e05c      	b.n	8002384 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <HAL_RCC_OscConfig+0x4b4>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d0:	f7fe fc60 	bl	8000b94 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d8:	f7fe fc5c 	bl	8000b94 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e04d      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_RCC_OscConfig+0x4ac>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x480>
 80022f6:	e045      	b.n	8002384 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d107      	bne.n	8002310 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e040      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
 8002304:	40023800 	.word	0x40023800
 8002308:	40007000 	.word	0x40007000
 800230c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002310:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <HAL_RCC_OscConfig+0x538>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d030      	beq.n	8002380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002328:	429a      	cmp	r2, r3
 800232a:	d129      	bne.n	8002380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d122      	bne.n	8002380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002340:	4013      	ands	r3, r2
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002346:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002348:	4293      	cmp	r3, r2
 800234a:	d119      	bne.n	8002380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002356:	085b      	lsrs	r3, r3, #1
 8002358:	3b01      	subs	r3, #1
 800235a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d10f      	bne.n	8002380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d107      	bne.n	8002380 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800

08002394 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e03f      	b.n	8002426 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe fad4 	bl	8000968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2224      	movs	r2, #36	; 0x24
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 fc7b 	bl	8002cd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	695a      	ldr	r2, [r3, #20]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68da      	ldr	r2, [r3, #12]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800240c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2220      	movs	r2, #32
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2220      	movs	r2, #32
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b0ba      	sub	sp, #232	; 0xe8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800245c:	2300      	movs	r3, #0
 800245e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800246e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10f      	bne.n	8002496 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800247a:	f003 0320 	and.w	r3, r3, #32
 800247e:	2b00      	cmp	r3, #0
 8002480:	d009      	beq.n	8002496 <HAL_UART_IRQHandler+0x66>
 8002482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002486:	f003 0320 	and.w	r3, r3, #32
 800248a:	2b00      	cmp	r3, #0
 800248c:	d003      	beq.n	8002496 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fb65 	bl	8002b5e <UART_Receive_IT>
      return;
 8002494:	e256      	b.n	8002944 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002496:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 80de 	beq.w	800265c <HAL_UART_IRQHandler+0x22c>
 80024a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d106      	bne.n	80024ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80024ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80d1 	beq.w	800265c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00b      	beq.n	80024de <HAL_UART_IRQHandler+0xae>
 80024c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d005      	beq.n	80024de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f043 0201 	orr.w	r2, r3, #1
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00b      	beq.n	8002502 <HAL_UART_IRQHandler+0xd2>
 80024ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	f043 0202 	orr.w	r2, r3, #2
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00b      	beq.n	8002526 <HAL_UART_IRQHandler+0xf6>
 800250e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d005      	beq.n	8002526 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f043 0204 	orr.w	r2, r3, #4
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d011      	beq.n	8002556 <HAL_UART_IRQHandler+0x126>
 8002532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002536:	f003 0320 	and.w	r3, r3, #32
 800253a:	2b00      	cmp	r3, #0
 800253c:	d105      	bne.n	800254a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800253e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d005      	beq.n	8002556 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f043 0208 	orr.w	r2, r3, #8
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 81ed 	beq.w	800293a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002564:	f003 0320 	and.w	r3, r3, #32
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_UART_IRQHandler+0x14e>
 800256c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002570:	f003 0320 	and.w	r3, r3, #32
 8002574:	2b00      	cmp	r3, #0
 8002576:	d002      	beq.n	800257e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 faf0 	bl	8002b5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002588:	2b40      	cmp	r3, #64	; 0x40
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d103      	bne.n	80025aa <HAL_UART_IRQHandler+0x17a>
 80025a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d04f      	beq.n	800264a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f9f8 	bl	80029a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ba:	2b40      	cmp	r3, #64	; 0x40
 80025bc:	d141      	bne.n	8002642 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	3314      	adds	r3, #20
 80025c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025cc:	e853 3f00 	ldrex	r3, [r3]
 80025d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80025d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	3314      	adds	r3, #20
 80025e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80025ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80025ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80025f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80025fa:	e841 2300 	strex	r3, r2, [r1]
 80025fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002602:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1d9      	bne.n	80025be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260e:	2b00      	cmp	r3, #0
 8002610:	d013      	beq.n	800263a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002616:	4a7d      	ldr	r2, [pc, #500]	; (800280c <HAL_UART_IRQHandler+0x3dc>)
 8002618:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261e:	4618      	mov	r0, r3
 8002620:	f7fe fc45 	bl	8000eae <HAL_DMA_Abort_IT>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d016      	beq.n	8002658 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002634:	4610      	mov	r0, r2
 8002636:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002638:	e00e      	b.n	8002658 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f99a 	bl	8002974 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002640:	e00a      	b.n	8002658 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f996 	bl	8002974 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002648:	e006      	b.n	8002658 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f992 	bl	8002974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002656:	e170      	b.n	800293a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002658:	bf00      	nop
    return;
 800265a:	e16e      	b.n	800293a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002660:	2b01      	cmp	r3, #1
 8002662:	f040 814a 	bne.w	80028fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 8143 	beq.w	80028fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 813c 	beq.w	80028fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002682:	2300      	movs	r3, #0
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a2:	2b40      	cmp	r3, #64	; 0x40
 80026a4:	f040 80b4 	bne.w	8002810 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8140 	beq.w	800293e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026c6:	429a      	cmp	r2, r3
 80026c8:	f080 8139 	bcs.w	800293e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026de:	f000 8088 	beq.w	80027f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	330c      	adds	r3, #12
 80026e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026f0:	e853 3f00 	ldrex	r3, [r3]
 80026f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80026f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002700:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	330c      	adds	r3, #12
 800270a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800270e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002712:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002716:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800271a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800271e:	e841 2300 	strex	r3, r2, [r1]
 8002722:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002726:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1d9      	bne.n	80026e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	3314      	adds	r3, #20
 8002734:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002736:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002738:	e853 3f00 	ldrex	r3, [r3]
 800273c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800273e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002740:	f023 0301 	bic.w	r3, r3, #1
 8002744:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	3314      	adds	r3, #20
 800274e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002752:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002756:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002758:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800275a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800275e:	e841 2300 	strex	r3, r2, [r1]
 8002762:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002764:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1e1      	bne.n	800272e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	3314      	adds	r3, #20
 8002770:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002774:	e853 3f00 	ldrex	r3, [r3]
 8002778:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800277a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800277c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002780:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	3314      	adds	r3, #20
 800278a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800278e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002790:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002792:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002794:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002796:	e841 2300 	strex	r3, r2, [r1]
 800279a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800279c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1e3      	bne.n	800276a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	330c      	adds	r3, #12
 80027b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ba:	e853 3f00 	ldrex	r3, [r3]
 80027be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80027c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027c2:	f023 0310 	bic.w	r3, r3, #16
 80027c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	330c      	adds	r3, #12
 80027d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80027d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80027d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027dc:	e841 2300 	strex	r3, r2, [r1]
 80027e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80027e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1e3      	bne.n	80027b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fe faee 	bl	8000dce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	b29b      	uxth	r3, r3
 8002800:	4619      	mov	r1, r3
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f8c0 	bl	8002988 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002808:	e099      	b.n	800293e <HAL_UART_IRQHandler+0x50e>
 800280a:	bf00      	nop
 800280c:	08002a67 	.word	0x08002a67
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002818:	b29b      	uxth	r3, r3
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002824:	b29b      	uxth	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 808b 	beq.w	8002942 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800282c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8086 	beq.w	8002942 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	330c      	adds	r3, #12
 800283c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002840:	e853 3f00 	ldrex	r3, [r3]
 8002844:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002848:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800284c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	330c      	adds	r3, #12
 8002856:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800285a:	647a      	str	r2, [r7, #68]	; 0x44
 800285c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002860:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002862:	e841 2300 	strex	r3, r2, [r1]
 8002866:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1e3      	bne.n	8002836 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	3314      	adds	r3, #20
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	e853 3f00 	ldrex	r3, [r3]
 800287c:	623b      	str	r3, [r7, #32]
   return(result);
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	f023 0301 	bic.w	r3, r3, #1
 8002884:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3314      	adds	r3, #20
 800288e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002892:	633a      	str	r2, [r7, #48]	; 0x30
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002896:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800289a:	e841 2300 	strex	r3, r2, [r1]
 800289e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80028a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1e3      	bne.n	800286e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	330c      	adds	r3, #12
 80028ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	e853 3f00 	ldrex	r3, [r3]
 80028c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 0310 	bic.w	r3, r3, #16
 80028ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	330c      	adds	r3, #12
 80028d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80028d8:	61fa      	str	r2, [r7, #28]
 80028da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028dc:	69b9      	ldr	r1, [r7, #24]
 80028de:	69fa      	ldr	r2, [r7, #28]
 80028e0:	e841 2300 	strex	r3, r2, [r1]
 80028e4:	617b      	str	r3, [r7, #20]
   return(result);
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1e3      	bne.n	80028b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80028ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80028f0:	4619      	mov	r1, r3
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f848 	bl	8002988 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80028f8:	e023      	b.n	8002942 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002902:	2b00      	cmp	r3, #0
 8002904:	d009      	beq.n	800291a <HAL_UART_IRQHandler+0x4ea>
 8002906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800290a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f8bb 	bl	8002a8e <UART_Transmit_IT>
    return;
 8002918:	e014      	b.n	8002944 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800291a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800291e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00e      	beq.n	8002944 <HAL_UART_IRQHandler+0x514>
 8002926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800292a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292e:	2b00      	cmp	r3, #0
 8002930:	d008      	beq.n	8002944 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f8fb 	bl	8002b2e <UART_EndTransmit_IT>
    return;
 8002938:	e004      	b.n	8002944 <HAL_UART_IRQHandler+0x514>
    return;
 800293a:	bf00      	nop
 800293c:	e002      	b.n	8002944 <HAL_UART_IRQHandler+0x514>
      return;
 800293e:	bf00      	nop
 8002940:	e000      	b.n	8002944 <HAL_UART_IRQHandler+0x514>
      return;
 8002942:	bf00      	nop
  }
}
 8002944:	37e8      	adds	r7, #232	; 0xe8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop

0800294c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b095      	sub	sp, #84	; 0x54
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	330c      	adds	r3, #12
 80029ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b2:	e853 3f00 	ldrex	r3, [r3]
 80029b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80029b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	330c      	adds	r3, #12
 80029c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029c8:	643a      	str	r2, [r7, #64]	; 0x40
 80029ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80029ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029d0:	e841 2300 	strex	r3, r2, [r1]
 80029d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80029d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1e5      	bne.n	80029a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	3314      	adds	r3, #20
 80029e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	e853 3f00 	ldrex	r3, [r3]
 80029ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	f023 0301 	bic.w	r3, r3, #1
 80029f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	3314      	adds	r3, #20
 80029fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a04:	e841 2300 	strex	r3, r2, [r1]
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1e5      	bne.n	80029dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d119      	bne.n	8002a4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	330c      	adds	r3, #12
 8002a1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	e853 3f00 	ldrex	r3, [r3]
 8002a26:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f023 0310 	bic.w	r3, r3, #16
 8002a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	330c      	adds	r3, #12
 8002a36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a38:	61ba      	str	r2, [r7, #24]
 8002a3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a3c:	6979      	ldr	r1, [r7, #20]
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	e841 2300 	strex	r3, r2, [r1]
 8002a44:	613b      	str	r3, [r7, #16]
   return(result);
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1e5      	bne.n	8002a18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a5a:	bf00      	nop
 8002a5c:	3754      	adds	r7, #84	; 0x54
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b084      	sub	sp, #16
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f7ff ff77 	bl	8002974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b085      	sub	sp, #20
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b21      	cmp	r3, #33	; 0x21
 8002aa0:	d13e      	bne.n	8002b20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aaa:	d114      	bne.n	8002ad6 <UART_Transmit_IT+0x48>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d110      	bne.n	8002ad6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ac8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	1c9a      	adds	r2, r3, #2
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	621a      	str	r2, [r3, #32]
 8002ad4:	e008      	b.n	8002ae8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	1c59      	adds	r1, r3, #1
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6211      	str	r1, [r2, #32]
 8002ae0:	781a      	ldrb	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	4619      	mov	r1, r3
 8002af6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10f      	bne.n	8002b1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68da      	ldr	r2, [r3, #12]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	e000      	b.n	8002b22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b20:	2302      	movs	r3, #2
  }
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff fefc 	bl	800294c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b08c      	sub	sp, #48	; 0x30
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b22      	cmp	r3, #34	; 0x22
 8002b70:	f040 80ab 	bne.w	8002cca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7c:	d117      	bne.n	8002bae <UART_Receive_IT+0x50>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d113      	bne.n	8002bae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba6:	1c9a      	adds	r2, r3, #2
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	629a      	str	r2, [r3, #40]	; 0x28
 8002bac:	e026      	b.n	8002bfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc0:	d007      	beq.n	8002bd2 <UART_Receive_IT+0x74>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10a      	bne.n	8002be0 <UART_Receive_IT+0x82>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	701a      	strb	r2, [r3, #0]
 8002bde:	e008      	b.n	8002bf2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d15a      	bne.n	8002cc6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0220 	bic.w	r2, r2, #32
 8002c1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695a      	ldr	r2, [r3, #20]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0201 	bic.w	r2, r2, #1
 8002c3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d135      	bne.n	8002cbc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	330c      	adds	r3, #12
 8002c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	e853 3f00 	ldrex	r3, [r3]
 8002c64:	613b      	str	r3, [r7, #16]
   return(result);
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f023 0310 	bic.w	r3, r3, #16
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	330c      	adds	r3, #12
 8002c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c76:	623a      	str	r2, [r7, #32]
 8002c78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7a:	69f9      	ldr	r1, [r7, #28]
 8002c7c:	6a3a      	ldr	r2, [r7, #32]
 8002c7e:	e841 2300 	strex	r3, r2, [r1]
 8002c82:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1e5      	bne.n	8002c56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b10      	cmp	r3, #16
 8002c96:	d10a      	bne.n	8002cae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff fe67 	bl	8002988 <HAL_UARTEx_RxEventCallback>
 8002cba:	e002      	b.n	8002cc2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7ff fe4f 	bl	8002960 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e002      	b.n	8002ccc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e000      	b.n	8002ccc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002cca:	2302      	movs	r3, #2
  }
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3730      	adds	r7, #48	; 0x30
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cd8:	b09f      	sub	sp, #124	; 0x7c
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cea:	68d9      	ldr	r1, [r3, #12]
 8002cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	ea40 0301 	orr.w	r3, r0, r1
 8002cf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	431a      	orrs	r2, r3
 8002d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d18:	f021 010c 	bic.w	r1, r1, #12
 8002d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d22:	430b      	orrs	r3, r1
 8002d24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d32:	6999      	ldr	r1, [r3, #24]
 8002d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	ea40 0301 	orr.w	r3, r0, r1
 8002d3c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	4bc5      	ldr	r3, [pc, #788]	; (8003058 <UART_SetConfig+0x384>)
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d004      	beq.n	8002d52 <UART_SetConfig+0x7e>
 8002d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4bc3      	ldr	r3, [pc, #780]	; (800305c <UART_SetConfig+0x388>)
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d103      	bne.n	8002d5a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d52:	f7fe febb 	bl	8001acc <HAL_RCC_GetPCLK2Freq>
 8002d56:	6778      	str	r0, [r7, #116]	; 0x74
 8002d58:	e002      	b.n	8002d60 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d5a:	f7fe fea3 	bl	8001aa4 <HAL_RCC_GetPCLK1Freq>
 8002d5e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d68:	f040 80b6 	bne.w	8002ed8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d6e:	461c      	mov	r4, r3
 8002d70:	f04f 0500 	mov.w	r5, #0
 8002d74:	4622      	mov	r2, r4
 8002d76:	462b      	mov	r3, r5
 8002d78:	1891      	adds	r1, r2, r2
 8002d7a:	6439      	str	r1, [r7, #64]	; 0x40
 8002d7c:	415b      	adcs	r3, r3
 8002d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d84:	1912      	adds	r2, r2, r4
 8002d86:	eb45 0303 	adc.w	r3, r5, r3
 8002d8a:	f04f 0000 	mov.w	r0, #0
 8002d8e:	f04f 0100 	mov.w	r1, #0
 8002d92:	00d9      	lsls	r1, r3, #3
 8002d94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d98:	00d0      	lsls	r0, r2, #3
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	1911      	adds	r1, r2, r4
 8002da0:	6639      	str	r1, [r7, #96]	; 0x60
 8002da2:	416b      	adcs	r3, r5
 8002da4:	667b      	str	r3, [r7, #100]	; 0x64
 8002da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	461a      	mov	r2, r3
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	1891      	adds	r1, r2, r2
 8002db2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002db4:	415b      	adcs	r3, r3
 8002db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002db8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002dbc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002dc0:	f7fd fa7e 	bl	80002c0 <__aeabi_uldivmod>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4ba5      	ldr	r3, [pc, #660]	; (8003060 <UART_SetConfig+0x38c>)
 8002dca:	fba3 2302 	umull	r2, r3, r3, r2
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	011e      	lsls	r6, r3, #4
 8002dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dd4:	461c      	mov	r4, r3
 8002dd6:	f04f 0500 	mov.w	r5, #0
 8002dda:	4622      	mov	r2, r4
 8002ddc:	462b      	mov	r3, r5
 8002dde:	1891      	adds	r1, r2, r2
 8002de0:	6339      	str	r1, [r7, #48]	; 0x30
 8002de2:	415b      	adcs	r3, r3
 8002de4:	637b      	str	r3, [r7, #52]	; 0x34
 8002de6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002dea:	1912      	adds	r2, r2, r4
 8002dec:	eb45 0303 	adc.w	r3, r5, r3
 8002df0:	f04f 0000 	mov.w	r0, #0
 8002df4:	f04f 0100 	mov.w	r1, #0
 8002df8:	00d9      	lsls	r1, r3, #3
 8002dfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002dfe:	00d0      	lsls	r0, r2, #3
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	1911      	adds	r1, r2, r4
 8002e06:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e08:	416b      	adcs	r3, r5
 8002e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	461a      	mov	r2, r3
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	1891      	adds	r1, r2, r2
 8002e18:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e1a:	415b      	adcs	r3, r3
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e22:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002e26:	f7fd fa4b 	bl	80002c0 <__aeabi_uldivmod>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4b8c      	ldr	r3, [pc, #560]	; (8003060 <UART_SetConfig+0x38c>)
 8002e30:	fba3 1302 	umull	r1, r3, r3, r2
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	2164      	movs	r1, #100	; 0x64
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	3332      	adds	r3, #50	; 0x32
 8002e42:	4a87      	ldr	r2, [pc, #540]	; (8003060 <UART_SetConfig+0x38c>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	095b      	lsrs	r3, r3, #5
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e50:	441e      	add	r6, r3
 8002e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e54:	4618      	mov	r0, r3
 8002e56:	f04f 0100 	mov.w	r1, #0
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	1894      	adds	r4, r2, r2
 8002e60:	623c      	str	r4, [r7, #32]
 8002e62:	415b      	adcs	r3, r3
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
 8002e66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e6a:	1812      	adds	r2, r2, r0
 8002e6c:	eb41 0303 	adc.w	r3, r1, r3
 8002e70:	f04f 0400 	mov.w	r4, #0
 8002e74:	f04f 0500 	mov.w	r5, #0
 8002e78:	00dd      	lsls	r5, r3, #3
 8002e7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e7e:	00d4      	lsls	r4, r2, #3
 8002e80:	4622      	mov	r2, r4
 8002e82:	462b      	mov	r3, r5
 8002e84:	1814      	adds	r4, r2, r0
 8002e86:	653c      	str	r4, [r7, #80]	; 0x50
 8002e88:	414b      	adcs	r3, r1
 8002e8a:	657b      	str	r3, [r7, #84]	; 0x54
 8002e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	461a      	mov	r2, r3
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	1891      	adds	r1, r2, r2
 8002e98:	61b9      	str	r1, [r7, #24]
 8002e9a:	415b      	adcs	r3, r3
 8002e9c:	61fb      	str	r3, [r7, #28]
 8002e9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ea2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002ea6:	f7fd fa0b 	bl	80002c0 <__aeabi_uldivmod>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4b6c      	ldr	r3, [pc, #432]	; (8003060 <UART_SetConfig+0x38c>)
 8002eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8002eb4:	095b      	lsrs	r3, r3, #5
 8002eb6:	2164      	movs	r1, #100	; 0x64
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	3332      	adds	r3, #50	; 0x32
 8002ec2:	4a67      	ldr	r2, [pc, #412]	; (8003060 <UART_SetConfig+0x38c>)
 8002ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec8:	095b      	lsrs	r3, r3, #5
 8002eca:	f003 0207 	and.w	r2, r3, #7
 8002ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4432      	add	r2, r6
 8002ed4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ed6:	e0b9      	b.n	800304c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ed8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eda:	461c      	mov	r4, r3
 8002edc:	f04f 0500 	mov.w	r5, #0
 8002ee0:	4622      	mov	r2, r4
 8002ee2:	462b      	mov	r3, r5
 8002ee4:	1891      	adds	r1, r2, r2
 8002ee6:	6139      	str	r1, [r7, #16]
 8002ee8:	415b      	adcs	r3, r3
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ef0:	1912      	adds	r2, r2, r4
 8002ef2:	eb45 0303 	adc.w	r3, r5, r3
 8002ef6:	f04f 0000 	mov.w	r0, #0
 8002efa:	f04f 0100 	mov.w	r1, #0
 8002efe:	00d9      	lsls	r1, r3, #3
 8002f00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f04:	00d0      	lsls	r0, r2, #3
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	eb12 0804 	adds.w	r8, r2, r4
 8002f0e:	eb43 0905 	adc.w	r9, r3, r5
 8002f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f04f 0100 	mov.w	r1, #0
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	008b      	lsls	r3, r1, #2
 8002f26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f2a:	0082      	lsls	r2, r0, #2
 8002f2c:	4640      	mov	r0, r8
 8002f2e:	4649      	mov	r1, r9
 8002f30:	f7fd f9c6 	bl	80002c0 <__aeabi_uldivmod>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4b49      	ldr	r3, [pc, #292]	; (8003060 <UART_SetConfig+0x38c>)
 8002f3a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	011e      	lsls	r6, r3, #4
 8002f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f44:	4618      	mov	r0, r3
 8002f46:	f04f 0100 	mov.w	r1, #0
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	1894      	adds	r4, r2, r2
 8002f50:	60bc      	str	r4, [r7, #8]
 8002f52:	415b      	adcs	r3, r3
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f5a:	1812      	adds	r2, r2, r0
 8002f5c:	eb41 0303 	adc.w	r3, r1, r3
 8002f60:	f04f 0400 	mov.w	r4, #0
 8002f64:	f04f 0500 	mov.w	r5, #0
 8002f68:	00dd      	lsls	r5, r3, #3
 8002f6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f6e:	00d4      	lsls	r4, r2, #3
 8002f70:	4622      	mov	r2, r4
 8002f72:	462b      	mov	r3, r5
 8002f74:	1814      	adds	r4, r2, r0
 8002f76:	64bc      	str	r4, [r7, #72]	; 0x48
 8002f78:	414b      	adcs	r3, r1
 8002f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f04f 0100 	mov.w	r1, #0
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	008b      	lsls	r3, r1, #2
 8002f90:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f94:	0082      	lsls	r2, r0, #2
 8002f96:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002f9a:	f7fd f991 	bl	80002c0 <__aeabi_uldivmod>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4b2f      	ldr	r3, [pc, #188]	; (8003060 <UART_SetConfig+0x38c>)
 8002fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fa8:	095b      	lsrs	r3, r3, #5
 8002faa:	2164      	movs	r1, #100	; 0x64
 8002fac:	fb01 f303 	mul.w	r3, r1, r3
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	3332      	adds	r3, #50	; 0x32
 8002fb6:	4a2a      	ldr	r2, [pc, #168]	; (8003060 <UART_SetConfig+0x38c>)
 8002fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbc:	095b      	lsrs	r3, r3, #5
 8002fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fc2:	441e      	add	r6, r3
 8002fc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f04f 0100 	mov.w	r1, #0
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	1894      	adds	r4, r2, r2
 8002fd2:	603c      	str	r4, [r7, #0]
 8002fd4:	415b      	adcs	r3, r3
 8002fd6:	607b      	str	r3, [r7, #4]
 8002fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fdc:	1812      	adds	r2, r2, r0
 8002fde:	eb41 0303 	adc.w	r3, r1, r3
 8002fe2:	f04f 0400 	mov.w	r4, #0
 8002fe6:	f04f 0500 	mov.w	r5, #0
 8002fea:	00dd      	lsls	r5, r3, #3
 8002fec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ff0:	00d4      	lsls	r4, r2, #3
 8002ff2:	4622      	mov	r2, r4
 8002ff4:	462b      	mov	r3, r5
 8002ff6:	eb12 0a00 	adds.w	sl, r2, r0
 8002ffa:	eb43 0b01 	adc.w	fp, r3, r1
 8002ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4618      	mov	r0, r3
 8003004:	f04f 0100 	mov.w	r1, #0
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	008b      	lsls	r3, r1, #2
 8003012:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003016:	0082      	lsls	r2, r0, #2
 8003018:	4650      	mov	r0, sl
 800301a:	4659      	mov	r1, fp
 800301c:	f7fd f950 	bl	80002c0 <__aeabi_uldivmod>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <UART_SetConfig+0x38c>)
 8003026:	fba3 1302 	umull	r1, r3, r3, r2
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	2164      	movs	r1, #100	; 0x64
 800302e:	fb01 f303 	mul.w	r3, r1, r3
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	3332      	adds	r3, #50	; 0x32
 8003038:	4a09      	ldr	r2, [pc, #36]	; (8003060 <UART_SetConfig+0x38c>)
 800303a:	fba2 2303 	umull	r2, r3, r2, r3
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	f003 020f 	and.w	r2, r3, #15
 8003044:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4432      	add	r2, r6
 800304a:	609a      	str	r2, [r3, #8]
}
 800304c:	bf00      	nop
 800304e:	377c      	adds	r7, #124	; 0x7c
 8003050:	46bd      	mov	sp, r7
 8003052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003056:	bf00      	nop
 8003058:	40011000 	.word	0x40011000
 800305c:	40011400 	.word	0x40011400
 8003060:	51eb851f 	.word	0x51eb851f

08003064 <bootloader_main>:
frame_format_t bl_mode_state_func(void);
frame_format_t updating_state_func(void);

//-------------------------------------------------------------------
void bootloader_main(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08c      	sub	sp, #48	; 0x30
 8003068:	af00      	add	r7, sp, #0
	// TODO: abstract :enable RX interrupt
	USART2->CR1 |= USART_CR1_RXNEIE;
 800306a:	4b18      	ldr	r3, [pc, #96]	; (80030cc <bootloader_main+0x68>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	4a17      	ldr	r2, [pc, #92]	; (80030cc <bootloader_main+0x68>)
 8003070:	f043 0320 	orr.w	r3, r3, #32
 8003074:	60d3      	str	r3, [r2, #12]

	bootloaderInit();
 8003076:	f000 f837 	bl	80030e8 <bootloaderInit>
	uint32_t timeNow = HAL_GetTick(); //current timestamp
 800307a:	f7fd fd8b 	bl	8000b94 <HAL_GetTick>
 800307e:	62f8      	str	r0, [r7, #44]	; 0x2c
	bootloader_state_functions[BL_STATE_IDLE] = idle_state_func;
 8003080:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <bootloader_main+0x6c>)
 8003082:	4a14      	ldr	r2, [pc, #80]	; (80030d4 <bootloader_main+0x70>)
 8003084:	601a      	str	r2, [r3, #0]
	bootloader_state_functions[BL_STATE_BOOTLOADER] = bl_mode_state_func;
 8003086:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <bootloader_main+0x6c>)
 8003088:	4a13      	ldr	r2, [pc, #76]	; (80030d8 <bootloader_main+0x74>)
 800308a:	605a      	str	r2, [r3, #4]
	bootloader_state_functions[BL_STATE_UPDATING] = updating_state_func;
 800308c:	4b10      	ldr	r3, [pc, #64]	; (80030d0 <bootloader_main+0x6c>)
 800308e:	4a13      	ldr	r2, [pc, #76]	; (80030dc <bootloader_main+0x78>)
 8003090:	60da      	str	r2, [r3, #12]

	while(1)
	{
		(*bootloader_state_functions[bootloader_current_state])();
 8003092:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <bootloader_main+0x7c>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	461a      	mov	r2, r3
 8003098:	4b0d      	ldr	r3, [pc, #52]	; (80030d0 <bootloader_main+0x6c>)
 800309a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800309e:	463a      	mov	r2, r7
 80030a0:	4610      	mov	r0, r2
 80030a2:	4798      	blx	r3
		//if we have not recevied a valid header in 15s (exagerated time to wait)
		//then jump to application
        if(((HAL_GetTick() - timeNow) > 15000) && (bootloader_current_state == BL_STATE_IDLE))
 80030a4:	f7fd fd76 	bl	8000b94 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	f643 2298 	movw	r2, #15000	; 0x3a98
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d9ed      	bls.n	8003092 <bootloader_main+0x2e>
 80030b6:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <bootloader_main+0x7c>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1e9      	bne.n	8003092 <bootloader_main+0x2e>
        {
        	//TODO : do not blindly jump to application, check if one exists. 
        	debug_print("No valid header received, jumping to user app.\r\n");
 80030be:	4809      	ldr	r0, [pc, #36]	; (80030e4 <bootloader_main+0x80>)
 80030c0:	f000 fa96 	bl	80035f0 <print>
        	jump_to_user_app();
 80030c4:	f000 fa86 	bl	80035d4 <jump_to_user_app>
		(*bootloader_state_functions[bootloader_current_state])();
 80030c8:	e7e3      	b.n	8003092 <bootloader_main+0x2e>
 80030ca:	bf00      	nop
 80030cc:	40004400 	.word	0x40004400
 80030d0:	200000ec 	.word	0x200000ec
 80030d4:	08003281 	.word	0x08003281
 80030d8:	08003321 	.word	0x08003321
 80030dc:	080033a1 	.word	0x080033a1
 80030e0:	200000e0 	.word	0x200000e0
 80030e4:	080041c4 	.word	0x080041c4

080030e8 <bootloaderInit>:

	}
}
//-------------------------------------------------------------------
void bootloaderInit(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
	debug_print("Initializing uCBootloader \r\n");
 80030ee:	4860      	ldr	r0, [pc, #384]	; (8003270 <bootloaderInit+0x188>)
 80030f0:	f000 fa7e 	bl	80035f0 <print>
	// create the ACK frame
	ackFrame.start_of_frame = BL_ELEMENT_START_OF_FRAME;
 80030f4:	4b5f      	ldr	r3, [pc, #380]	; (8003274 <bootloaderInit+0x18c>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	f042 0259 	orr.w	r2, r2, #89	; 0x59
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	2200      	movs	r2, #0
 8003100:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 8003104:	705a      	strb	r2, [r3, #1]
 8003106:	2200      	movs	r2, #0
 8003108:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 800310c:	709a      	strb	r2, [r3, #2]
 800310e:	2200      	movs	r2, #0
 8003110:	f042 0245 	orr.w	r2, r2, #69	; 0x45
 8003114:	70da      	strb	r2, [r3, #3]
	ackFrame.frame_id = BL_FRAME_ID_ACK_FRAME;
 8003116:	4b57      	ldr	r3, [pc, #348]	; (8003274 <bootloaderInit+0x18c>)
 8003118:	2200      	movs	r2, #0
 800311a:	f062 0212 	orn	r2, r2, #18
 800311e:	711a      	strb	r2, [r3, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f042 024a 	orr.w	r2, r2, #74	; 0x4a
 8003126:	715a      	strb	r2, [r3, #5]
 8003128:	2200      	movs	r2, #0
 800312a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800312e:	719a      	strb	r2, [r3, #6]
 8003130:	2200      	movs	r2, #0
 8003132:	f042 0245 	orr.w	r2, r2, #69	; 0x45
 8003136:	71da      	strb	r2, [r3, #7]
	ackFrame.payload_len = (uint16_t)65535;
 8003138:	4b4e      	ldr	r3, [pc, #312]	; (8003274 <bootloaderInit+0x18c>)
 800313a:	f04f 32ff 	mov.w	r2, #4294967295
 800313e:	721a      	strb	r2, [r3, #8]
 8003140:	f04f 32ff 	mov.w	r2, #4294967295
 8003144:	725a      	strb	r2, [r3, #9]
	ackFrame.crc32 = 0xffffffff; // TODO:
 8003146:	4b4b      	ldr	r3, [pc, #300]	; (8003274 <bootloaderInit+0x18c>)
 8003148:	f04f 32ff 	mov.w	r2, #4294967295
 800314c:	769a      	strb	r2, [r3, #26]
 800314e:	f04f 32ff 	mov.w	r2, #4294967295
 8003152:	76da      	strb	r2, [r3, #27]
 8003154:	f04f 32ff 	mov.w	r2, #4294967295
 8003158:	771a      	strb	r2, [r3, #28]
 800315a:	f04f 32ff 	mov.w	r2, #4294967295
 800315e:	775a      	strb	r2, [r3, #29]
	ackFrame.end_of_frame = BL_ELEMENT_END_OF_FRAME;
 8003160:	4b44      	ldr	r3, [pc, #272]	; (8003274 <bootloaderInit+0x18c>)
 8003162:	2200      	movs	r2, #0
 8003164:	f042 0252 	orr.w	r2, r2, #82	; 0x52
 8003168:	779a      	strb	r2, [r3, #30]
 800316a:	2200      	movs	r2, #0
 800316c:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 8003170:	77da      	strb	r2, [r3, #31]
 8003172:	2200      	movs	r2, #0
 8003174:	f042 0241 	orr.w	r2, r2, #65	; 0x41
 8003178:	f883 2020 	strb.w	r2, [r3, #32]
 800317c:	2200      	movs	r2, #0
 800317e:	f042 0246 	orr.w	r2, r2, #70	; 0x46
 8003182:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	for (int i = 0; i < BL_PAYLOAD_LEN; i++)
 8003186:	2300      	movs	r3, #0
 8003188:	607b      	str	r3, [r7, #4]
 800318a:	e00a      	b.n	80031a2 <bootloaderInit+0xba>
	{
		ackFrame.payload[i] = i;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	b2d9      	uxtb	r1, r3
 8003190:	4a38      	ldr	r2, [pc, #224]	; (8003274 <bootloaderInit+0x18c>)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4413      	add	r3, r2
 8003196:	330a      	adds	r3, #10
 8003198:	460a      	mov	r2, r1
 800319a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < BL_PAYLOAD_LEN; i++)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3301      	adds	r3, #1
 80031a0:	607b      	str	r3, [r7, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b0f      	cmp	r3, #15
 80031a6:	ddf1      	ble.n	800318c <bootloaderInit+0xa4>
	}

	// create the NACK frame
	nackFrame.start_of_frame = BL_ELEMENT_START_OF_FRAME;
 80031a8:	4b33      	ldr	r3, [pc, #204]	; (8003278 <bootloaderInit+0x190>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	f042 0259 	orr.w	r2, r2, #89	; 0x59
 80031b0:	701a      	strb	r2, [r3, #0]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 80031b8:	705a      	strb	r2, [r3, #1]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 80031c0:	709a      	strb	r2, [r3, #2]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f042 0245 	orr.w	r2, r2, #69	; 0x45
 80031c8:	70da      	strb	r2, [r3, #3]
	nackFrame.frame_id = BL_FRAME_ID_NACK_FRAME;
 80031ca:	4b2b      	ldr	r3, [pc, #172]	; (8003278 <bootloaderInit+0x190>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	f062 0215 	orn	r2, r2, #21
 80031d2:	711a      	strb	r2, [r3, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f042 026a 	orr.w	r2, r2, #106	; 0x6a
 80031da:	715a      	strb	r2, [r3, #5]
 80031dc:	2200      	movs	r2, #0
 80031de:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80031e2:	719a      	strb	r2, [r3, #6]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 80031ea:	71da      	strb	r2, [r3, #7]
	nackFrame.payload_len = (uint16_t)65535;
 80031ec:	4b22      	ldr	r3, [pc, #136]	; (8003278 <bootloaderInit+0x190>)
 80031ee:	f04f 32ff 	mov.w	r2, #4294967295
 80031f2:	721a      	strb	r2, [r3, #8]
 80031f4:	f04f 32ff 	mov.w	r2, #4294967295
 80031f8:	725a      	strb	r2, [r3, #9]
	nackFrame.crc32 = 0xffffffff; // TODO:
 80031fa:	4b1f      	ldr	r3, [pc, #124]	; (8003278 <bootloaderInit+0x190>)
 80031fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003200:	769a      	strb	r2, [r3, #26]
 8003202:	f04f 32ff 	mov.w	r2, #4294967295
 8003206:	76da      	strb	r2, [r3, #27]
 8003208:	f04f 32ff 	mov.w	r2, #4294967295
 800320c:	771a      	strb	r2, [r3, #28]
 800320e:	f04f 32ff 	mov.w	r2, #4294967295
 8003212:	775a      	strb	r2, [r3, #29]
	nackFrame.end_of_frame = BL_ELEMENT_END_OF_FRAME;
 8003214:	4b18      	ldr	r3, [pc, #96]	; (8003278 <bootloaderInit+0x190>)
 8003216:	2200      	movs	r2, #0
 8003218:	f042 0252 	orr.w	r2, r2, #82	; 0x52
 800321c:	779a      	strb	r2, [r3, #30]
 800321e:	2200      	movs	r2, #0
 8003220:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 8003224:	77da      	strb	r2, [r3, #31]
 8003226:	2200      	movs	r2, #0
 8003228:	f042 0241 	orr.w	r2, r2, #65	; 0x41
 800322c:	f883 2020 	strb.w	r2, [r3, #32]
 8003230:	2200      	movs	r2, #0
 8003232:	f042 0246 	orr.w	r2, r2, #70	; 0x46
 8003236:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	for (int i = 0; i < BL_PAYLOAD_LEN; i++)
 800323a:	2300      	movs	r3, #0
 800323c:	603b      	str	r3, [r7, #0]
 800323e:	e00a      	b.n	8003256 <bootloaderInit+0x16e>
	{
		nackFrame.payload[i] = i;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	b2d9      	uxtb	r1, r3
 8003244:	4a0c      	ldr	r2, [pc, #48]	; (8003278 <bootloaderInit+0x190>)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	4413      	add	r3, r2
 800324a:	330a      	adds	r3, #10
 800324c:	460a      	mov	r2, r1
 800324e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < BL_PAYLOAD_LEN; i++)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	3301      	adds	r3, #1
 8003254:	603b      	str	r3, [r7, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2b0f      	cmp	r3, #15
 800325a:	ddf1      	ble.n	8003240 <bootloaderInit+0x158>
	}

	reset_header_frame();
 800325c:	f000 f94c 	bl	80034f8 <reset_header_frame>

	debug_print("Ack / Nack frames created.\r\n");
 8003260:	4806      	ldr	r0, [pc, #24]	; (800327c <bootloaderInit+0x194>)
 8003262:	f000 f9c5 	bl	80035f0 <print>
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	080041f8 	.word	0x080041f8
 8003274:	20000210 	.word	0x20000210
 8003278:	200001a4 	.word	0x200001a4
 800327c:	08004218 	.word	0x08004218

08003280 <idle_state_func>:
//-------------------------------------------------------------------
frame_format_t idle_state_func(void)
{
 8003280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
	//idle state only listens for header frame
	if (parse_frame())
 8003288:	f000 faa6 	bl	80037d8 <parse_frame>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d01c      	beq.n	80032cc <idle_state_func+0x4c>
	{
		debug_print("Parse == true\r\n");
 8003292:	481d      	ldr	r0, [pc, #116]	; (8003308 <idle_state_func+0x88>)
 8003294:	f000 f9ac 	bl	80035f0 <print>
		switch (header_receivedFrame.frame_id)
 8003298:	4b1c      	ldr	r3, [pc, #112]	; (800330c <idle_state_func+0x8c>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	4a1c      	ldr	r2, [pc, #112]	; (8003310 <idle_state_func+0x90>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d10e      	bne.n	80032c0 <idle_state_func+0x40>
		{
			case BL_FRAME_ID_HEADER :
				//TODO validate header
				//validate_header();
				valid_header = true;
 80032a2:	4b1c      	ldr	r3, [pc, #112]	; (8003314 <idle_state_func+0x94>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	701a      	strb	r2, [r3, #0]
				debug_print("Switching to bootloader state\r\n");
 80032a8:	481b      	ldr	r0, [pc, #108]	; (8003318 <idle_state_func+0x98>)
 80032aa:	f000 f9a1 	bl	80035f0 <print>
				set_bl_state(BL_STATE_BOOTLOADER);
 80032ae:	2001      	movs	r0, #1
 80032b0:	f000 f980 	bl	80035b4 <set_bl_state>
				reset_header_frame();
 80032b4:	f000 f920 	bl	80034f8 <reset_header_frame>
				sendFrame(&ackFrame);
 80032b8:	4818      	ldr	r0, [pc, #96]	; (800331c <idle_state_func+0x9c>)
 80032ba:	f000 fa27 	bl	800370c <sendFrame>
			break;
 80032be:	e006      	b.n	80032ce <idle_state_func+0x4e>

			default:
				set_bl_state(BL_STATE_IDLE);
 80032c0:	2000      	movs	r0, #0
 80032c2:	f000 f977 	bl	80035b4 <set_bl_state>
				reset_recevied_frame();
 80032c6:	f000 f8d1 	bl	800346c <reset_recevied_frame>
			break;
 80032ca:	e000      	b.n	80032ce <idle_state_func+0x4e>
		}
	}
 80032cc:	bf00      	nop
	//return (frame_format_t)0;
	return ackFrame;
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4b12      	ldr	r3, [pc, #72]	; (800331c <idle_state_func+0x9c>)
 80032d2:	4610      	mov	r0, r2
 80032d4:	f103 0420 	add.w	r4, r3, #32
 80032d8:	4602      	mov	r2, r0
 80032da:	4619      	mov	r1, r3
 80032dc:	f8d1 c000 	ldr.w	ip, [r1]
 80032e0:	684e      	ldr	r6, [r1, #4]
 80032e2:	688d      	ldr	r5, [r1, #8]
 80032e4:	68c9      	ldr	r1, [r1, #12]
 80032e6:	f8c2 c000 	str.w	ip, [r2]
 80032ea:	6056      	str	r6, [r2, #4]
 80032ec:	6095      	str	r5, [r2, #8]
 80032ee:	60d1      	str	r1, [r2, #12]
 80032f0:	3310      	adds	r3, #16
 80032f2:	3010      	adds	r0, #16
 80032f4:	42a3      	cmp	r3, r4
 80032f6:	d1ef      	bne.n	80032d8 <idle_state_func+0x58>
 80032f8:	4602      	mov	r2, r0
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	8013      	strh	r3, [r2, #0]
}
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003306:	bf00      	nop
 8003308:	08004238 	.word	0x08004238
 800330c:	200001ec 	.word	0x200001ec
 8003310:	feededde 	.word	0xfeededde
 8003314:	20000094 	.word	0x20000094
 8003318:	08004248 	.word	0x08004248
 800331c:	20000210 	.word	0x20000210

08003320 <bl_mode_state_func>:
frame_format_t bl_mode_state_func(void)
{
 8003320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	if (parse_frame())
 8003328:	f000 fa56 	bl	80037d8 <parse_frame>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d013      	beq.n	800335a <bl_mode_state_func+0x3a>
	{

		switch (receivedFrame.frame_id)
 8003332:	4b18      	ldr	r3, [pc, #96]	; (8003394 <bl_mode_state_func+0x74>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4a18      	ldr	r2, [pc, #96]	; (8003398 <bl_mode_state_func+0x78>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d108      	bne.n	800334e <bl_mode_state_func+0x2e>
		{

			case BL_FRAME_ID_START_UPDATE:
				set_bl_state(BL_STATE_UPDATING);
 800333c:	2003      	movs	r0, #3
 800333e:	f000 f939 	bl	80035b4 <set_bl_state>
				reset_recevied_frame();
 8003342:	f000 f893 	bl	800346c <reset_recevied_frame>
				sendFrame(&ackFrame);
 8003346:	4815      	ldr	r0, [pc, #84]	; (800339c <bl_mode_state_func+0x7c>)
 8003348:	f000 f9e0 	bl	800370c <sendFrame>
				break;
 800334c:	e006      	b.n	800335c <bl_mode_state_func+0x3c>

		// only states above are valid to switch out of idle state
		default:
			set_bl_state(BL_STATE_IDLE);
 800334e:	2000      	movs	r0, #0
 8003350:	f000 f930 	bl	80035b4 <set_bl_state>
			reset_recevied_frame();
 8003354:	f000 f88a 	bl	800346c <reset_recevied_frame>
 8003358:	e000      	b.n	800335c <bl_mode_state_func+0x3c>
		}
	}
 800335a:	bf00      	nop
	//return (frame_format_t)0;
	return ackFrame;
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	4b0f      	ldr	r3, [pc, #60]	; (800339c <bl_mode_state_func+0x7c>)
 8003360:	4610      	mov	r0, r2
 8003362:	f103 0420 	add.w	r4, r3, #32
 8003366:	4602      	mov	r2, r0
 8003368:	4619      	mov	r1, r3
 800336a:	f8d1 c000 	ldr.w	ip, [r1]
 800336e:	684e      	ldr	r6, [r1, #4]
 8003370:	688d      	ldr	r5, [r1, #8]
 8003372:	68c9      	ldr	r1, [r1, #12]
 8003374:	f8c2 c000 	str.w	ip, [r2]
 8003378:	6056      	str	r6, [r2, #4]
 800337a:	6095      	str	r5, [r2, #8]
 800337c:	60d1      	str	r1, [r2, #12]
 800337e:	3310      	adds	r3, #16
 8003380:	3010      	adds	r0, #16
 8003382:	42a3      	cmp	r3, r4
 8003384:	d1ef      	bne.n	8003366 <bl_mode_state_func+0x46>
 8003386:	4602      	mov	r2, r0
 8003388:	881b      	ldrh	r3, [r3, #0]
 800338a:	8013      	strh	r3, [r2, #0]
}
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003394:	200001c8 	.word	0x200001c8
 8003398:	ba5eba11 	.word	0xba5eba11
 800339c:	20000210 	.word	0x20000210

080033a0 <updating_state_func>:
//-------------------------------------------------------------------
frame_format_t updating_state_func(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	// once we are updating for sure
	// we can go ahead and erase the required sectors only once
	static bool erased = false;
	if (parse_frame())
 80033a8:	f000 fa16 	bl	80037d8 <parse_frame>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d01d      	beq.n	80033ee <updating_state_func+0x4e>
	{
		if (receivedFrame.frame_id == BL_FRAME_ID_PAYLOAD)
 80033b2:	4b11      	ldr	r3, [pc, #68]	; (80033f8 <updating_state_func+0x58>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	4a11      	ldr	r2, [pc, #68]	; (80033fc <updating_state_func+0x5c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d111      	bne.n	80033e0 <updating_state_func+0x40>
		{
			if (!erased) // only do this once
 80033bc:	4b10      	ldr	r3, [pc, #64]	; (8003400 <updating_state_func+0x60>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	f083 0301 	eor.w	r3, r3, #1
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d004      	beq.n	80033d4 <updating_state_func+0x34>
			{
				erase_sector();
 80033ca:	f000 f955 	bl	8003678 <erase_sector>
				erased = true;
 80033ce:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <updating_state_func+0x60>)
 80033d0:	2201      	movs	r2, #1
 80033d2:	701a      	strb	r2, [r3, #0]
			}
			write_payload();
 80033d4:	f000 f81a 	bl	800340c <write_payload>
			// reset received frame
			//reset_recevied_frame();
			// send ack frame
			sendFrame(&ackFrame);
 80033d8:	480a      	ldr	r0, [pc, #40]	; (8003404 <updating_state_func+0x64>)
 80033da:	f000 f997 	bl	800370c <sendFrame>
 80033de:	e006      	b.n	80033ee <updating_state_func+0x4e>
		}
		else if (receivedFrame.frame_id == BL_FRAME_ID_UPDATE_DONE)
 80033e0:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <updating_state_func+0x58>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4a08      	ldr	r2, [pc, #32]	; (8003408 <updating_state_func+0x68>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d101      	bne.n	80033ee <updating_state_func+0x4e>
		{
			jump_to_user_app();
 80033ea:	f000 f8f3 	bl	80035d4 <jump_to_user_app>
		// TODO: hanlde any unexpected frame
		// erase sector again
	}

	//return ackFrame;
}
 80033ee:	bf00      	nop
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	200001c8 	.word	0x200001c8
 80033fc:	deadbeef 	.word	0xdeadbeef
 8003400:	200000e1 	.word	0x200000e1
 8003404:	20000210 	.word	0x20000210
 8003408:	deaddade 	.word	0xdeaddade

0800340c <write_payload>:
//-------------------------------------------------------------------
static void write_payload(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0

	HAL_FLASH_Unlock();
 8003412:	f7fd fdc3 	bl	8000f9c <HAL_FLASH_Unlock>
	// TODO: add this to a config.h file
	for (int i = 0; i < 16; i += 4)
 8003416:	2300      	movs	r3, #0
 8003418:	607b      	str	r3, [r7, #4]
 800341a:	e017      	b.n	800344c <write_payload+0x40>
	{
		uint32_t *val = (uint32_t *)&receivedFrame.payload[i];
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3308      	adds	r3, #8
 8003420:	4a10      	ldr	r2, [pc, #64]	; (8003464 <write_payload+0x58>)
 8003422:	4413      	add	r3, r2
 8003424:	3302      	adds	r3, #2
 8003426:	603b      	str	r3, [r7, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_address, *val);
 8003428:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <write_payload+0x5c>)
 800342a:	6819      	ldr	r1, [r3, #0]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	2002      	movs	r0, #2
 8003438:	f7fd fd5c 	bl	8000ef4 <HAL_FLASH_Program>
		start_address += 4;
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <write_payload+0x5c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3304      	adds	r3, #4
 8003442:	4a09      	ldr	r2, [pc, #36]	; (8003468 <write_payload+0x5c>)
 8003444:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 16; i += 4)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3304      	adds	r3, #4
 800344a:	607b      	str	r3, [r7, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b0f      	cmp	r3, #15
 8003450:	dde4      	ble.n	800341c <write_payload+0x10>
	}
	HAL_FLASH_Lock();
 8003452:	f7fd fdc5 	bl	8000fe0 <HAL_FLASH_Lock>
	// clear receivedFrame for next packet
	reset_recevied_frame();
 8003456:	f000 f809 	bl	800346c <reset_recevied_frame>
	// TODO: read back the data and check crc

}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	200001c8 	.word	0x200001c8
 8003468:	2000000c 	.word	0x2000000c

0800346c <reset_recevied_frame>:
//-------------------------------------------------------------------
static void reset_recevied_frame(void)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
	receivedFrame.start_of_frame = 0;
 8003472:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <reset_recevied_frame+0x88>)
 8003474:	2200      	movs	r2, #0
 8003476:	701a      	strb	r2, [r3, #0]
 8003478:	2200      	movs	r2, #0
 800347a:	705a      	strb	r2, [r3, #1]
 800347c:	2200      	movs	r2, #0
 800347e:	709a      	strb	r2, [r3, #2]
 8003480:	2200      	movs	r2, #0
 8003482:	70da      	strb	r2, [r3, #3]
	receivedFrame.frame_id = 0;
 8003484:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <reset_recevied_frame+0x88>)
 8003486:	2200      	movs	r2, #0
 8003488:	711a      	strb	r2, [r3, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	715a      	strb	r2, [r3, #5]
 800348e:	2200      	movs	r2, #0
 8003490:	719a      	strb	r2, [r3, #6]
 8003492:	2200      	movs	r2, #0
 8003494:	71da      	strb	r2, [r3, #7]
	receivedFrame.payload_len = 0;
 8003496:	4b17      	ldr	r3, [pc, #92]	; (80034f4 <reset_recevied_frame+0x88>)
 8003498:	2200      	movs	r2, #0
 800349a:	721a      	strb	r2, [r3, #8]
 800349c:	2200      	movs	r2, #0
 800349e:	725a      	strb	r2, [r3, #9]
	receivedFrame.crc32 = 0;
 80034a0:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <reset_recevied_frame+0x88>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	769a      	strb	r2, [r3, #26]
 80034a6:	2200      	movs	r2, #0
 80034a8:	76da      	strb	r2, [r3, #27]
 80034aa:	2200      	movs	r2, #0
 80034ac:	771a      	strb	r2, [r3, #28]
 80034ae:	2200      	movs	r2, #0
 80034b0:	775a      	strb	r2, [r3, #29]
	receivedFrame.end_of_frame = 0;
 80034b2:	4b10      	ldr	r3, [pc, #64]	; (80034f4 <reset_recevied_frame+0x88>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	779a      	strb	r2, [r3, #30]
 80034b8:	2200      	movs	r2, #0
 80034ba:	77da      	strb	r2, [r3, #31]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2020 	strb.w	r2, [r3, #32]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	for (int i = 0; i < 16; i++)
 80034c8:	2300      	movs	r3, #0
 80034ca:	607b      	str	r3, [r7, #4]
 80034cc:	e008      	b.n	80034e0 <reset_recevied_frame+0x74>
	{
		receivedFrame.payload[i] = 0;
 80034ce:	4a09      	ldr	r2, [pc, #36]	; (80034f4 <reset_recevied_frame+0x88>)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4413      	add	r3, r2
 80034d4:	330a      	adds	r3, #10
 80034d6:	2200      	movs	r2, #0
 80034d8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3301      	adds	r3, #1
 80034de:	607b      	str	r3, [r7, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b0f      	cmp	r3, #15
 80034e4:	ddf3      	ble.n	80034ce <reset_recevied_frame+0x62>
	}
}
 80034e6:	bf00      	nop
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	200001c8 	.word	0x200001c8

080034f8 <reset_header_frame>:
static void reset_header_frame(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
	//use something like memset here
	header_receivedFrame.start_of_frame = 0;
 80034fc:	4b2c      	ldr	r3, [pc, #176]	; (80035b0 <reset_header_frame+0xb8>)
 80034fe:	2200      	movs	r2, #0
 8003500:	701a      	strb	r2, [r3, #0]
 8003502:	2200      	movs	r2, #0
 8003504:	705a      	strb	r2, [r3, #1]
 8003506:	2200      	movs	r2, #0
 8003508:	709a      	strb	r2, [r3, #2]
 800350a:	2200      	movs	r2, #0
 800350c:	70da      	strb	r2, [r3, #3]
    header_receivedFrame.frame_id = 0;
 800350e:	4b28      	ldr	r3, [pc, #160]	; (80035b0 <reset_header_frame+0xb8>)
 8003510:	2200      	movs	r2, #0
 8003512:	711a      	strb	r2, [r3, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	715a      	strb	r2, [r3, #5]
 8003518:	2200      	movs	r2, #0
 800351a:	719a      	strb	r2, [r3, #6]
 800351c:	2200      	movs	r2, #0
 800351e:	71da      	strb	r2, [r3, #7]
    header_receivedFrame.magicNumber = 0;
 8003520:	4b23      	ldr	r3, [pc, #140]	; (80035b0 <reset_header_frame+0xb8>)
 8003522:	2200      	movs	r2, #0
 8003524:	721a      	strb	r2, [r3, #8]
 8003526:	2200      	movs	r2, #0
 8003528:	725a      	strb	r2, [r3, #9]
 800352a:	2200      	movs	r2, #0
 800352c:	729a      	strb	r2, [r3, #10]
 800352e:	2200      	movs	r2, #0
 8003530:	72da      	strb	r2, [r3, #11]
    header_receivedFrame.image_checksum = 0; 
 8003532:	4b1f      	ldr	r3, [pc, #124]	; (80035b0 <reset_header_frame+0xb8>)
 8003534:	2200      	movs	r2, #0
 8003536:	731a      	strb	r2, [r3, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	735a      	strb	r2, [r3, #13]
 800353c:	2200      	movs	r2, #0
 800353e:	739a      	strb	r2, [r3, #14]
 8003540:	2200      	movs	r2, #0
 8003542:	73da      	strb	r2, [r3, #15]
    header_receivedFrame.firmware_version = 0; 
 8003544:	4b1a      	ldr	r3, [pc, #104]	; (80035b0 <reset_header_frame+0xb8>)
 8003546:	2200      	movs	r2, #0
 8003548:	741a      	strb	r2, [r3, #16]
 800354a:	2200      	movs	r2, #0
 800354c:	745a      	strb	r2, [r3, #17]
 800354e:	2200      	movs	r2, #0
 8003550:	749a      	strb	r2, [r3, #18]
 8003552:	2200      	movs	r2, #0
 8003554:	74da      	strb	r2, [r3, #19]
    header_receivedFrame.imageSize = 0;
 8003556:	4b16      	ldr	r3, [pc, #88]	; (80035b0 <reset_header_frame+0xb8>)
 8003558:	2200      	movs	r2, #0
 800355a:	751a      	strb	r2, [r3, #20]
 800355c:	2200      	movs	r2, #0
 800355e:	755a      	strb	r2, [r3, #21]
 8003560:	2200      	movs	r2, #0
 8003562:	759a      	strb	r2, [r3, #22]
 8003564:	2200      	movs	r2, #0
 8003566:	75da      	strb	r2, [r3, #23]
    header_receivedFrame.jumpValue = 0;
 8003568:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <reset_header_frame+0xb8>)
 800356a:	2200      	movs	r2, #0
 800356c:	761a      	strb	r2, [r3, #24]
 800356e:	2200      	movs	r2, #0
 8003570:	765a      	strb	r2, [r3, #25]
 8003572:	2200      	movs	r2, #0
 8003574:	769a      	strb	r2, [r3, #26]
 8003576:	2200      	movs	r2, #0
 8003578:	76da      	strb	r2, [r3, #27]
    header_receivedFrame.crc32 = 0; 
 800357a:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <reset_header_frame+0xb8>)
 800357c:	2200      	movs	r2, #0
 800357e:	771a      	strb	r2, [r3, #28]
 8003580:	2200      	movs	r2, #0
 8003582:	775a      	strb	r2, [r3, #29]
 8003584:	2200      	movs	r2, #0
 8003586:	779a      	strb	r2, [r3, #30]
 8003588:	2200      	movs	r2, #0
 800358a:	77da      	strb	r2, [r3, #31]
    header_receivedFrame.end_of_frame = 0;
 800358c:	4b08      	ldr	r3, [pc, #32]	; (80035b0 <reset_header_frame+0xb8>)
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2020 	strb.w	r2, [r3, #32]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
}
 80035a6:	bf00      	nop
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	200001ec 	.word	0x200001ec

080035b4 <set_bl_state>:
//-------------------------------------------------------------------
static void set_bl_state(bootloader_state state)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	71fb      	strb	r3, [r7, #7]
	bootloader_current_state = state;
 80035be:	4a04      	ldr	r2, [pc, #16]	; (80035d0 <set_bl_state+0x1c>)
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	7013      	strb	r3, [r2, #0]
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	200000e0 	.word	0x200000e0

080035d4 <jump_to_user_app>:
//-------------------------------------------------------------------
static void jump_to_user_app(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
	void (*user_app_reset_handler)(void) = (void *)(*((uint32_t *)(USER_APP_LOCATION)));
 80035da:	4b04      	ldr	r3, [pc, #16]	; (80035ec <jump_to_user_app+0x18>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	607b      	str	r3, [r7, #4]
	user_app_reset_handler();
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4798      	blx	r3
}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	08020004 	.word	0x08020004

080035f0 <print>:
//-------------------------------------------------------------------
static void print(char *msg, ...)
{
 80035f0:	b40f      	push	{r0, r1, r2, r3}
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b0c2      	sub	sp, #264	; 0x108
 80035f6:	af00      	add	r7, sp, #0
	char buff[250];
	va_list args;
	va_start(args, msg);
 80035f8:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80035fc:	1d3b      	adds	r3, r7, #4
 80035fe:	601a      	str	r2, [r3, #0]
	vsprintf(buff, msg, args);
 8003600:	1d3b      	adds	r3, r7, #4
 8003602:	f107 0008 	add.w	r0, r7, #8
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800360c:	f000 f9b6 	bl	800397c <vsiprintf>

	for (int i = 0; i < strlen(buff); i++)
 8003610:	2300      	movs	r3, #0
 8003612:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003616:	e013      	b.n	8003640 <print+0x50>
	{
		USART3->DR = buff[i];
 8003618:	f107 0208 	add.w	r2, r7, #8
 800361c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003620:	4413      	add	r3, r2
 8003622:	781a      	ldrb	r2, [r3, #0]
 8003624:	4b13      	ldr	r3, [pc, #76]	; (8003674 <print+0x84>)
 8003626:	605a      	str	r2, [r3, #4]
		while (!(USART3->SR & USART_SR_TXE))
 8003628:	bf00      	nop
 800362a:	4b12      	ldr	r3, [pc, #72]	; (8003674 <print+0x84>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f9      	beq.n	800362a <print+0x3a>
	for (int i = 0; i < strlen(buff); i++)
 8003636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800363a:	3301      	adds	r3, #1
 800363c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003640:	f107 0308 	add.w	r3, r7, #8
 8003644:	4618      	mov	r0, r3
 8003646:	f7fc fde3 	bl	8000210 <strlen>
 800364a:	4602      	mov	r2, r0
 800364c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003650:	429a      	cmp	r2, r3
 8003652:	d8e1      	bhi.n	8003618 <print+0x28>
			;
	}

	while (!(USART3->SR & USART_SR_TC))
 8003654:	bf00      	nop
 8003656:	4b07      	ldr	r3, [pc, #28]	; (8003674 <print+0x84>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f9      	beq.n	8003656 <print+0x66>
		;
}
 8003662:	bf00      	nop
 8003664:	bf00      	nop
 8003666:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800366a:	46bd      	mov	sp, r7
 800366c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003670:	b004      	add	sp, #16
 8003672:	4770      	bx	lr
 8003674:	40004800 	.word	0x40004800

08003678 <erase_sector>:
//-------------------------------------------------------------------
// TODO:  abstract sector erasing based user app memory location and size
void erase_sector(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_SECTORS;
 800367e:	2300      	movs	r3, #0
 8003680:	607b      	str	r3, [r7, #4]
	erase.NbSectors = 1;
 8003682:	2301      	movs	r3, #1
 8003684:	613b      	str	r3, [r7, #16]
	erase.Sector = FLASH_SECTOR_5;
 8003686:	2305      	movs	r3, #5
 8003688:	60fb      	str	r3, [r7, #12]
	erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800368a:	2302      	movs	r3, #2
 800368c:	617b      	str	r3, [r7, #20]
	uint32_t err = 0;
 800368e:	2300      	movs	r3, #0
 8003690:	603b      	str	r3, [r7, #0]

	HAL_FLASH_Unlock();
 8003692:	f7fd fc83 	bl	8000f9c <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&erase, &err);
 8003696:	463a      	mov	r2, r7
 8003698:	1d3b      	adds	r3, r7, #4
 800369a:	4611      	mov	r1, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f7fd fdef 	bl	8001280 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 80036a2:	f7fd fc9d 	bl	8000fe0 <HAL_FLASH_Lock>
	// TODO: check return of FLASH ERASE and handle it.
}
 80036a6:	bf00      	nop
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <uart_send_data>:
//-------------------------------------------------------------------
static void uart_send_data(uint8_t *data, uint16_t len)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	460b      	mov	r3, r1
 80036ba:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < len; i++)
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	e00f      	b.n	80036e2 <uart_send_data+0x32>
	{
		USART2->DR = data[i];
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	4413      	add	r3, r2
 80036c8:	781a      	ldrb	r2, [r3, #0]
 80036ca:	4b0f      	ldr	r3, [pc, #60]	; (8003708 <uart_send_data+0x58>)
 80036cc:	605a      	str	r2, [r3, #4]
		while (!(USART2->SR & USART_SR_TXE))
 80036ce:	bf00      	nop
 80036d0:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <uart_send_data+0x58>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0f9      	beq.n	80036d0 <uart_send_data+0x20>
	for (int i = 0; i < len; i++)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	3301      	adds	r3, #1
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	887b      	ldrh	r3, [r7, #2]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	dbeb      	blt.n	80036c2 <uart_send_data+0x12>
			;
	}

	while (!(USART2->SR & USART_SR_TC))
 80036ea:	bf00      	nop
 80036ec:	4b06      	ldr	r3, [pc, #24]	; (8003708 <uart_send_data+0x58>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f9      	beq.n	80036ec <uart_send_data+0x3c>
		;
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40004400 	.word	0x40004400

0800370c <sendFrame>:
//-------------------------------------------------------------------
static void sendFrame(frame_format_t *frame)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
	uint8_t *temp = NULL;
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]
	temp = (uint8_t *)frame;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	60fb      	str	r3, [r7, #12]
	uart_send_data(temp, sizeof(frame_format_t));
 800371c:	2122      	movs	r1, #34	; 0x22
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f7ff ffc6 	bl	80036b0 <uart_send_data>
}
 8003724:	bf00      	nop
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <bootloader_USART2_callback>:
//-------------------------------------------------------------------
void bootloader_USART2_callback(uint8_t data)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	71fb      	strb	r3, [r7, #7]
	static uint8_t bytes_received_count = 0;
	
	//should first only listen for a header : header_frame_format_t
	if(valid_header == false)//listen for valid header
 8003736:	4b21      	ldr	r3, [pc, #132]	; (80037bc <bootloader_USART2_callback+0x90>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	f083 0301 	eor.w	r3, r3, #1
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d01b      	beq.n	800377c <bootloader_USART2_callback+0x50>
	{
		//TODO: this if and else code is redundant , fix later 
		// fill buffer until we have enough bytes to assemble a frame
		if (bytes_received_count <= sizeof(header_frame_format_t))
 8003744:	4b1e      	ldr	r3, [pc, #120]	; (80037c0 <bootloader_USART2_callback+0x94>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b24      	cmp	r3, #36	; 0x24
 800374a:	d832      	bhi.n	80037b2 <bootloader_USART2_callback+0x86>
		{

			header_bytes_buff[bytes_received_count++] = data;
 800374c:	4b1c      	ldr	r3, [pc, #112]	; (80037c0 <bootloader_USART2_callback+0x94>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	b2d1      	uxtb	r1, r2
 8003754:	4a1a      	ldr	r2, [pc, #104]	; (80037c0 <bootloader_USART2_callback+0x94>)
 8003756:	7011      	strb	r1, [r2, #0]
 8003758:	4619      	mov	r1, r3
 800375a:	4a1a      	ldr	r2, [pc, #104]	; (80037c4 <bootloader_USART2_callback+0x98>)
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	5453      	strb	r3, [r2, r1]
			if (bytes_received_count == sizeof(header_frame_format_t))
 8003760:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <bootloader_USART2_callback+0x94>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b24      	cmp	r3, #36	; 0x24
 8003766:	d124      	bne.n	80037b2 <bootloader_USART2_callback+0x86>
			{
				bytes_received_count = 0;
 8003768:	4b15      	ldr	r3, [pc, #84]	; (80037c0 <bootloader_USART2_callback+0x94>)
 800376a:	2200      	movs	r2, #0
 800376c:	701a      	strb	r2, [r3, #0]
				parse = true;
 800376e:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <bootloader_USART2_callback+0x9c>)
 8003770:	2201      	movs	r2, #1
 8003772:	701a      	strb	r2, [r3, #0]
				debug_print("Enough bytes for a header received\r\n");
 8003774:	4815      	ldr	r0, [pc, #84]	; (80037cc <bootloader_USART2_callback+0xa0>)
 8003776:	f7ff ff3b 	bl	80035f0 <print>
				bytes_received_count = 0;
				parse = true;
			}
		}		
	}
}
 800377a:	e01a      	b.n	80037b2 <bootloader_USART2_callback+0x86>
		if (bytes_received_count <= sizeof(frame_format_t))
 800377c:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <bootloader_USART2_callback+0x94>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b22      	cmp	r3, #34	; 0x22
 8003782:	d816      	bhi.n	80037b2 <bootloader_USART2_callback+0x86>
			bytes_buff[bytes_received_count++] = data;
 8003784:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <bootloader_USART2_callback+0x94>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	b2d1      	uxtb	r1, r2
 800378c:	4a0c      	ldr	r2, [pc, #48]	; (80037c0 <bootloader_USART2_callback+0x94>)
 800378e:	7011      	strb	r1, [r2, #0]
 8003790:	4619      	mov	r1, r3
 8003792:	4a0f      	ldr	r2, [pc, #60]	; (80037d0 <bootloader_USART2_callback+0xa4>)
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	5453      	strb	r3, [r2, r1]
			if (bytes_received_count == sizeof(frame_format_t))
 8003798:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <bootloader_USART2_callback+0x94>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b22      	cmp	r3, #34	; 0x22
 800379e:	d108      	bne.n	80037b2 <bootloader_USART2_callback+0x86>
				debug_print("got more\r\n");
 80037a0:	480c      	ldr	r0, [pc, #48]	; (80037d4 <bootloader_USART2_callback+0xa8>)
 80037a2:	f7ff ff25 	bl	80035f0 <print>
				bytes_received_count = 0;
 80037a6:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <bootloader_USART2_callback+0x94>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	701a      	strb	r2, [r3, #0]
				parse = true;
 80037ac:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <bootloader_USART2_callback+0x9c>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	701a      	strb	r2, [r3, #0]
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000094 	.word	0x20000094
 80037c0:	200000e2 	.word	0x200000e2
 80037c4:	200000bc 	.word	0x200000bc
 80037c8:	20000095 	.word	0x20000095
 80037cc:	08004268 	.word	0x08004268
 80037d0:	20000098 	.word	0x20000098
 80037d4:	08004290 	.word	0x08004290

080037d8 <parse_frame>:
//-------------------------------------------------------------------
static bool parse_frame(void)
{
 80037d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037da:	af00      	add	r7, sp, #0
	// 	//configure pointers to point to header objects
	// 	receviedFrame_PTR = &header_receivedFrame;
	// 	buff_PTR = header_bytes_buff;
	// 	len = sizeof(header_frame_format_t);
	// }
	if (parse)
 80037dc:	4b36      	ldr	r3, [pc, #216]	; (80038b8 <parse_frame+0xe0>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d066      	beq.n	80038b2 <parse_frame+0xda>
	{
		parse = false;
 80037e4:	4b34      	ldr	r3, [pc, #208]	; (80038b8 <parse_frame+0xe0>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	701a      	strb	r2, [r3, #0]
		//if we already have a valid header then we are parsing regualr frames
		if(valid_header)
 80037ea:	4b34      	ldr	r3, [pc, #208]	; (80038bc <parse_frame+0xe4>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d02f      	beq.n	8003852 <parse_frame+0x7a>
		{

			// assemble a frame from bytes_buff
			memcpy(&receivedFrame, bytes_buff, sizeof(frame_format_t));
 80037f2:	4b33      	ldr	r3, [pc, #204]	; (80038c0 <parse_frame+0xe8>)
 80037f4:	4a33      	ldr	r2, [pc, #204]	; (80038c4 <parse_frame+0xec>)
 80037f6:	4614      	mov	r4, r2
 80037f8:	469c      	mov	ip, r3
 80037fa:	f104 0e20 	add.w	lr, r4, #32
 80037fe:	4665      	mov	r5, ip
 8003800:	4626      	mov	r6, r4
 8003802:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003804:	6028      	str	r0, [r5, #0]
 8003806:	6069      	str	r1, [r5, #4]
 8003808:	60aa      	str	r2, [r5, #8]
 800380a:	60eb      	str	r3, [r5, #12]
 800380c:	3410      	adds	r4, #16
 800380e:	f10c 0c10 	add.w	ip, ip, #16
 8003812:	4574      	cmp	r4, lr
 8003814:	d1f3      	bne.n	80037fe <parse_frame+0x26>
 8003816:	4662      	mov	r2, ip
 8003818:	4623      	mov	r3, r4
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	8013      	strh	r3, [r2, #0]
			// clear bytes buffer
			memset(bytes_buff, 0, sizeof(frame_format_t));
 800381e:	2222      	movs	r2, #34	; 0x22
 8003820:	2100      	movs	r1, #0
 8003822:	4828      	ldr	r0, [pc, #160]	; (80038c4 <parse_frame+0xec>)
 8003824:	f000 f88c 	bl	8003940 <memset>
			// the type of frame we get will dictate what the next state should be
			if (receivedFrame.start_of_frame == BL_ELEMENT_START_OF_FRAME && receivedFrame.end_of_frame == BL_ELEMENT_END_OF_FRAME)
 8003828:	4b25      	ldr	r3, [pc, #148]	; (80038c0 <parse_frame+0xe8>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a26      	ldr	r2, [pc, #152]	; (80038c8 <parse_frame+0xf0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d10a      	bne.n	8003848 <parse_frame+0x70>
 8003832:	4b23      	ldr	r3, [pc, #140]	; (80038c0 <parse_frame+0xe8>)
 8003834:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8003838:	4a24      	ldr	r2, [pc, #144]	; (80038cc <parse_frame+0xf4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d104      	bne.n	8003848 <parse_frame+0x70>
			{
				debug_print("valid frame received\r\n");
 800383e:	4824      	ldr	r0, [pc, #144]	; (80038d0 <parse_frame+0xf8>)
 8003840:	f7ff fed6 	bl	80035f0 <print>
				// TODO: check CRC
				// if frame is valid
				return true;
 8003844:	2301      	movs	r3, #1
 8003846:	e035      	b.n	80038b4 <parse_frame+0xdc>
			}
			else
			{
				debug_print("Invalid frame %d\r\n", 42);
 8003848:	212a      	movs	r1, #42	; 0x2a
 800384a:	4822      	ldr	r0, [pc, #136]	; (80038d4 <parse_frame+0xfc>)
 800384c:	f7ff fed0 	bl	80035f0 <print>
 8003850:	e02f      	b.n	80038b2 <parse_frame+0xda>

		}
		//no valid header has been received so only try to parse frames as headers
		else
		{
			debug_print("parsing header\r\n");
 8003852:	4821      	ldr	r0, [pc, #132]	; (80038d8 <parse_frame+0x100>)
 8003854:	f7ff fecc 	bl	80035f0 <print>
			// assemble a frame from bytes_buff
			memcpy(&header_receivedFrame, header_bytes_buff, sizeof(header_frame_format_t));
 8003858:	4b20      	ldr	r3, [pc, #128]	; (80038dc <parse_frame+0x104>)
 800385a:	4a21      	ldr	r2, [pc, #132]	; (80038e0 <parse_frame+0x108>)
 800385c:	4614      	mov	r4, r2
 800385e:	469c      	mov	ip, r3
 8003860:	f104 0e20 	add.w	lr, r4, #32
 8003864:	4665      	mov	r5, ip
 8003866:	4626      	mov	r6, r4
 8003868:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800386a:	6028      	str	r0, [r5, #0]
 800386c:	6069      	str	r1, [r5, #4]
 800386e:	60aa      	str	r2, [r5, #8]
 8003870:	60eb      	str	r3, [r5, #12]
 8003872:	3410      	adds	r4, #16
 8003874:	f10c 0c10 	add.w	ip, ip, #16
 8003878:	4574      	cmp	r4, lr
 800387a:	d1f3      	bne.n	8003864 <parse_frame+0x8c>
 800387c:	4663      	mov	r3, ip
 800387e:	4622      	mov	r2, r4
 8003880:	6810      	ldr	r0, [r2, #0]
 8003882:	6018      	str	r0, [r3, #0]
			// clear bytes buffer
			memset(header_bytes_buff, 0, sizeof(header_frame_format_t));
 8003884:	2224      	movs	r2, #36	; 0x24
 8003886:	2100      	movs	r1, #0
 8003888:	4815      	ldr	r0, [pc, #84]	; (80038e0 <parse_frame+0x108>)
 800388a:	f000 f859 	bl	8003940 <memset>
			// the type of frame we get will dictate what the next state should be
			if (header_receivedFrame.start_of_frame == BL_ELEMENT_START_OF_FRAME && header_receivedFrame.end_of_frame == BL_ELEMENT_END_OF_FRAME)
 800388e:	4b13      	ldr	r3, [pc, #76]	; (80038dc <parse_frame+0x104>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a0d      	ldr	r2, [pc, #52]	; (80038c8 <parse_frame+0xf0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d109      	bne.n	80038ac <parse_frame+0xd4>
 8003898:	4b10      	ldr	r3, [pc, #64]	; (80038dc <parse_frame+0x104>)
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	4a0b      	ldr	r2, [pc, #44]	; (80038cc <parse_frame+0xf4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d104      	bne.n	80038ac <parse_frame+0xd4>
			{
				debug_print("valid header received\r\n");
 80038a2:	4810      	ldr	r0, [pc, #64]	; (80038e4 <parse_frame+0x10c>)
 80038a4:	f7ff fea4 	bl	80035f0 <print>
				// TODO: check CRC
				// if frame is valid
				return true;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e003      	b.n	80038b4 <parse_frame+0xdc>
			}
			else
			{
				debug_print("invalide header\r\n");
 80038ac:	480e      	ldr	r0, [pc, #56]	; (80038e8 <parse_frame+0x110>)
 80038ae:	f7ff fe9f 	bl	80035f0 <print>
			}

		}
	}

	return false;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038b8:	20000095 	.word	0x20000095
 80038bc:	20000094 	.word	0x20000094
 80038c0:	200001c8 	.word	0x200001c8
 80038c4:	20000098 	.word	0x20000098
 80038c8:	45444459 	.word	0x45444459
 80038cc:	46414952 	.word	0x46414952
 80038d0:	0800429c 	.word	0x0800429c
 80038d4:	080042b4 	.word	0x080042b4
 80038d8:	080042c8 	.word	0x080042c8
 80038dc:	200001ec 	.word	0x200001ec
 80038e0:	200000bc 	.word	0x200000bc
 80038e4:	080042dc 	.word	0x080042dc
 80038e8:	080042f4 	.word	0x080042f4

080038ec <__errno>:
 80038ec:	4b01      	ldr	r3, [pc, #4]	; (80038f4 <__errno+0x8>)
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20000010 	.word	0x20000010

080038f8 <__libc_init_array>:
 80038f8:	b570      	push	{r4, r5, r6, lr}
 80038fa:	4d0d      	ldr	r5, [pc, #52]	; (8003930 <__libc_init_array+0x38>)
 80038fc:	4c0d      	ldr	r4, [pc, #52]	; (8003934 <__libc_init_array+0x3c>)
 80038fe:	1b64      	subs	r4, r4, r5
 8003900:	10a4      	asrs	r4, r4, #2
 8003902:	2600      	movs	r6, #0
 8003904:	42a6      	cmp	r6, r4
 8003906:	d109      	bne.n	800391c <__libc_init_array+0x24>
 8003908:	4d0b      	ldr	r5, [pc, #44]	; (8003938 <__libc_init_array+0x40>)
 800390a:	4c0c      	ldr	r4, [pc, #48]	; (800393c <__libc_init_array+0x44>)
 800390c:	f000 fc4e 	bl	80041ac <_init>
 8003910:	1b64      	subs	r4, r4, r5
 8003912:	10a4      	asrs	r4, r4, #2
 8003914:	2600      	movs	r6, #0
 8003916:	42a6      	cmp	r6, r4
 8003918:	d105      	bne.n	8003926 <__libc_init_array+0x2e>
 800391a:	bd70      	pop	{r4, r5, r6, pc}
 800391c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003920:	4798      	blx	r3
 8003922:	3601      	adds	r6, #1
 8003924:	e7ee      	b.n	8003904 <__libc_init_array+0xc>
 8003926:	f855 3b04 	ldr.w	r3, [r5], #4
 800392a:	4798      	blx	r3
 800392c:	3601      	adds	r6, #1
 800392e:	e7f2      	b.n	8003916 <__libc_init_array+0x1e>
 8003930:	0800435c 	.word	0x0800435c
 8003934:	0800435c 	.word	0x0800435c
 8003938:	0800435c 	.word	0x0800435c
 800393c:	08004360 	.word	0x08004360

08003940 <memset>:
 8003940:	4402      	add	r2, r0
 8003942:	4603      	mov	r3, r0
 8003944:	4293      	cmp	r3, r2
 8003946:	d100      	bne.n	800394a <memset+0xa>
 8003948:	4770      	bx	lr
 800394a:	f803 1b01 	strb.w	r1, [r3], #1
 800394e:	e7f9      	b.n	8003944 <memset+0x4>

08003950 <_vsiprintf_r>:
 8003950:	b500      	push	{lr}
 8003952:	b09b      	sub	sp, #108	; 0x6c
 8003954:	9100      	str	r1, [sp, #0]
 8003956:	9104      	str	r1, [sp, #16]
 8003958:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800395c:	9105      	str	r1, [sp, #20]
 800395e:	9102      	str	r1, [sp, #8]
 8003960:	4905      	ldr	r1, [pc, #20]	; (8003978 <_vsiprintf_r+0x28>)
 8003962:	9103      	str	r1, [sp, #12]
 8003964:	4669      	mov	r1, sp
 8003966:	f000 f86f 	bl	8003a48 <_svfiprintf_r>
 800396a:	9b00      	ldr	r3, [sp, #0]
 800396c:	2200      	movs	r2, #0
 800396e:	701a      	strb	r2, [r3, #0]
 8003970:	b01b      	add	sp, #108	; 0x6c
 8003972:	f85d fb04 	ldr.w	pc, [sp], #4
 8003976:	bf00      	nop
 8003978:	ffff0208 	.word	0xffff0208

0800397c <vsiprintf>:
 800397c:	4613      	mov	r3, r2
 800397e:	460a      	mov	r2, r1
 8003980:	4601      	mov	r1, r0
 8003982:	4802      	ldr	r0, [pc, #8]	; (800398c <vsiprintf+0x10>)
 8003984:	6800      	ldr	r0, [r0, #0]
 8003986:	f7ff bfe3 	b.w	8003950 <_vsiprintf_r>
 800398a:	bf00      	nop
 800398c:	20000010 	.word	0x20000010

08003990 <__ssputs_r>:
 8003990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003994:	688e      	ldr	r6, [r1, #8]
 8003996:	429e      	cmp	r6, r3
 8003998:	4682      	mov	sl, r0
 800399a:	460c      	mov	r4, r1
 800399c:	4690      	mov	r8, r2
 800399e:	461f      	mov	r7, r3
 80039a0:	d838      	bhi.n	8003a14 <__ssputs_r+0x84>
 80039a2:	898a      	ldrh	r2, [r1, #12]
 80039a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80039a8:	d032      	beq.n	8003a10 <__ssputs_r+0x80>
 80039aa:	6825      	ldr	r5, [r4, #0]
 80039ac:	6909      	ldr	r1, [r1, #16]
 80039ae:	eba5 0901 	sub.w	r9, r5, r1
 80039b2:	6965      	ldr	r5, [r4, #20]
 80039b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80039b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80039bc:	3301      	adds	r3, #1
 80039be:	444b      	add	r3, r9
 80039c0:	106d      	asrs	r5, r5, #1
 80039c2:	429d      	cmp	r5, r3
 80039c4:	bf38      	it	cc
 80039c6:	461d      	movcc	r5, r3
 80039c8:	0553      	lsls	r3, r2, #21
 80039ca:	d531      	bpl.n	8003a30 <__ssputs_r+0xa0>
 80039cc:	4629      	mov	r1, r5
 80039ce:	f000 fb47 	bl	8004060 <_malloc_r>
 80039d2:	4606      	mov	r6, r0
 80039d4:	b950      	cbnz	r0, 80039ec <__ssputs_r+0x5c>
 80039d6:	230c      	movs	r3, #12
 80039d8:	f8ca 3000 	str.w	r3, [sl]
 80039dc:	89a3      	ldrh	r3, [r4, #12]
 80039de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039e2:	81a3      	strh	r3, [r4, #12]
 80039e4:	f04f 30ff 	mov.w	r0, #4294967295
 80039e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ec:	6921      	ldr	r1, [r4, #16]
 80039ee:	464a      	mov	r2, r9
 80039f0:	f000 fabe 	bl	8003f70 <memcpy>
 80039f4:	89a3      	ldrh	r3, [r4, #12]
 80039f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039fe:	81a3      	strh	r3, [r4, #12]
 8003a00:	6126      	str	r6, [r4, #16]
 8003a02:	6165      	str	r5, [r4, #20]
 8003a04:	444e      	add	r6, r9
 8003a06:	eba5 0509 	sub.w	r5, r5, r9
 8003a0a:	6026      	str	r6, [r4, #0]
 8003a0c:	60a5      	str	r5, [r4, #8]
 8003a0e:	463e      	mov	r6, r7
 8003a10:	42be      	cmp	r6, r7
 8003a12:	d900      	bls.n	8003a16 <__ssputs_r+0x86>
 8003a14:	463e      	mov	r6, r7
 8003a16:	4632      	mov	r2, r6
 8003a18:	6820      	ldr	r0, [r4, #0]
 8003a1a:	4641      	mov	r1, r8
 8003a1c:	f000 fab6 	bl	8003f8c <memmove>
 8003a20:	68a3      	ldr	r3, [r4, #8]
 8003a22:	6822      	ldr	r2, [r4, #0]
 8003a24:	1b9b      	subs	r3, r3, r6
 8003a26:	4432      	add	r2, r6
 8003a28:	60a3      	str	r3, [r4, #8]
 8003a2a:	6022      	str	r2, [r4, #0]
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	e7db      	b.n	80039e8 <__ssputs_r+0x58>
 8003a30:	462a      	mov	r2, r5
 8003a32:	f000 fb6f 	bl	8004114 <_realloc_r>
 8003a36:	4606      	mov	r6, r0
 8003a38:	2800      	cmp	r0, #0
 8003a3a:	d1e1      	bne.n	8003a00 <__ssputs_r+0x70>
 8003a3c:	6921      	ldr	r1, [r4, #16]
 8003a3e:	4650      	mov	r0, sl
 8003a40:	f000 fabe 	bl	8003fc0 <_free_r>
 8003a44:	e7c7      	b.n	80039d6 <__ssputs_r+0x46>
	...

08003a48 <_svfiprintf_r>:
 8003a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a4c:	4698      	mov	r8, r3
 8003a4e:	898b      	ldrh	r3, [r1, #12]
 8003a50:	061b      	lsls	r3, r3, #24
 8003a52:	b09d      	sub	sp, #116	; 0x74
 8003a54:	4607      	mov	r7, r0
 8003a56:	460d      	mov	r5, r1
 8003a58:	4614      	mov	r4, r2
 8003a5a:	d50e      	bpl.n	8003a7a <_svfiprintf_r+0x32>
 8003a5c:	690b      	ldr	r3, [r1, #16]
 8003a5e:	b963      	cbnz	r3, 8003a7a <_svfiprintf_r+0x32>
 8003a60:	2140      	movs	r1, #64	; 0x40
 8003a62:	f000 fafd 	bl	8004060 <_malloc_r>
 8003a66:	6028      	str	r0, [r5, #0]
 8003a68:	6128      	str	r0, [r5, #16]
 8003a6a:	b920      	cbnz	r0, 8003a76 <_svfiprintf_r+0x2e>
 8003a6c:	230c      	movs	r3, #12
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	f04f 30ff 	mov.w	r0, #4294967295
 8003a74:	e0d1      	b.n	8003c1a <_svfiprintf_r+0x1d2>
 8003a76:	2340      	movs	r3, #64	; 0x40
 8003a78:	616b      	str	r3, [r5, #20]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a7e:	2320      	movs	r3, #32
 8003a80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a84:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a88:	2330      	movs	r3, #48	; 0x30
 8003a8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003c34 <_svfiprintf_r+0x1ec>
 8003a8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a92:	f04f 0901 	mov.w	r9, #1
 8003a96:	4623      	mov	r3, r4
 8003a98:	469a      	mov	sl, r3
 8003a9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a9e:	b10a      	cbz	r2, 8003aa4 <_svfiprintf_r+0x5c>
 8003aa0:	2a25      	cmp	r2, #37	; 0x25
 8003aa2:	d1f9      	bne.n	8003a98 <_svfiprintf_r+0x50>
 8003aa4:	ebba 0b04 	subs.w	fp, sl, r4
 8003aa8:	d00b      	beq.n	8003ac2 <_svfiprintf_r+0x7a>
 8003aaa:	465b      	mov	r3, fp
 8003aac:	4622      	mov	r2, r4
 8003aae:	4629      	mov	r1, r5
 8003ab0:	4638      	mov	r0, r7
 8003ab2:	f7ff ff6d 	bl	8003990 <__ssputs_r>
 8003ab6:	3001      	adds	r0, #1
 8003ab8:	f000 80aa 	beq.w	8003c10 <_svfiprintf_r+0x1c8>
 8003abc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003abe:	445a      	add	r2, fp
 8003ac0:	9209      	str	r2, [sp, #36]	; 0x24
 8003ac2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 80a2 	beq.w	8003c10 <_svfiprintf_r+0x1c8>
 8003acc:	2300      	movs	r3, #0
 8003ace:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ad6:	f10a 0a01 	add.w	sl, sl, #1
 8003ada:	9304      	str	r3, [sp, #16]
 8003adc:	9307      	str	r3, [sp, #28]
 8003ade:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ae2:	931a      	str	r3, [sp, #104]	; 0x68
 8003ae4:	4654      	mov	r4, sl
 8003ae6:	2205      	movs	r2, #5
 8003ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aec:	4851      	ldr	r0, [pc, #324]	; (8003c34 <_svfiprintf_r+0x1ec>)
 8003aee:	f7fc fb97 	bl	8000220 <memchr>
 8003af2:	9a04      	ldr	r2, [sp, #16]
 8003af4:	b9d8      	cbnz	r0, 8003b2e <_svfiprintf_r+0xe6>
 8003af6:	06d0      	lsls	r0, r2, #27
 8003af8:	bf44      	itt	mi
 8003afa:	2320      	movmi	r3, #32
 8003afc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b00:	0711      	lsls	r1, r2, #28
 8003b02:	bf44      	itt	mi
 8003b04:	232b      	movmi	r3, #43	; 0x2b
 8003b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b0e:	2b2a      	cmp	r3, #42	; 0x2a
 8003b10:	d015      	beq.n	8003b3e <_svfiprintf_r+0xf6>
 8003b12:	9a07      	ldr	r2, [sp, #28]
 8003b14:	4654      	mov	r4, sl
 8003b16:	2000      	movs	r0, #0
 8003b18:	f04f 0c0a 	mov.w	ip, #10
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b22:	3b30      	subs	r3, #48	; 0x30
 8003b24:	2b09      	cmp	r3, #9
 8003b26:	d94e      	bls.n	8003bc6 <_svfiprintf_r+0x17e>
 8003b28:	b1b0      	cbz	r0, 8003b58 <_svfiprintf_r+0x110>
 8003b2a:	9207      	str	r2, [sp, #28]
 8003b2c:	e014      	b.n	8003b58 <_svfiprintf_r+0x110>
 8003b2e:	eba0 0308 	sub.w	r3, r0, r8
 8003b32:	fa09 f303 	lsl.w	r3, r9, r3
 8003b36:	4313      	orrs	r3, r2
 8003b38:	9304      	str	r3, [sp, #16]
 8003b3a:	46a2      	mov	sl, r4
 8003b3c:	e7d2      	b.n	8003ae4 <_svfiprintf_r+0x9c>
 8003b3e:	9b03      	ldr	r3, [sp, #12]
 8003b40:	1d19      	adds	r1, r3, #4
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	9103      	str	r1, [sp, #12]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	bfbb      	ittet	lt
 8003b4a:	425b      	neglt	r3, r3
 8003b4c:	f042 0202 	orrlt.w	r2, r2, #2
 8003b50:	9307      	strge	r3, [sp, #28]
 8003b52:	9307      	strlt	r3, [sp, #28]
 8003b54:	bfb8      	it	lt
 8003b56:	9204      	strlt	r2, [sp, #16]
 8003b58:	7823      	ldrb	r3, [r4, #0]
 8003b5a:	2b2e      	cmp	r3, #46	; 0x2e
 8003b5c:	d10c      	bne.n	8003b78 <_svfiprintf_r+0x130>
 8003b5e:	7863      	ldrb	r3, [r4, #1]
 8003b60:	2b2a      	cmp	r3, #42	; 0x2a
 8003b62:	d135      	bne.n	8003bd0 <_svfiprintf_r+0x188>
 8003b64:	9b03      	ldr	r3, [sp, #12]
 8003b66:	1d1a      	adds	r2, r3, #4
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	9203      	str	r2, [sp, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	bfb8      	it	lt
 8003b70:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b74:	3402      	adds	r4, #2
 8003b76:	9305      	str	r3, [sp, #20]
 8003b78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003c44 <_svfiprintf_r+0x1fc>
 8003b7c:	7821      	ldrb	r1, [r4, #0]
 8003b7e:	2203      	movs	r2, #3
 8003b80:	4650      	mov	r0, sl
 8003b82:	f7fc fb4d 	bl	8000220 <memchr>
 8003b86:	b140      	cbz	r0, 8003b9a <_svfiprintf_r+0x152>
 8003b88:	2340      	movs	r3, #64	; 0x40
 8003b8a:	eba0 000a 	sub.w	r0, r0, sl
 8003b8e:	fa03 f000 	lsl.w	r0, r3, r0
 8003b92:	9b04      	ldr	r3, [sp, #16]
 8003b94:	4303      	orrs	r3, r0
 8003b96:	3401      	adds	r4, #1
 8003b98:	9304      	str	r3, [sp, #16]
 8003b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b9e:	4826      	ldr	r0, [pc, #152]	; (8003c38 <_svfiprintf_r+0x1f0>)
 8003ba0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ba4:	2206      	movs	r2, #6
 8003ba6:	f7fc fb3b 	bl	8000220 <memchr>
 8003baa:	2800      	cmp	r0, #0
 8003bac:	d038      	beq.n	8003c20 <_svfiprintf_r+0x1d8>
 8003bae:	4b23      	ldr	r3, [pc, #140]	; (8003c3c <_svfiprintf_r+0x1f4>)
 8003bb0:	bb1b      	cbnz	r3, 8003bfa <_svfiprintf_r+0x1b2>
 8003bb2:	9b03      	ldr	r3, [sp, #12]
 8003bb4:	3307      	adds	r3, #7
 8003bb6:	f023 0307 	bic.w	r3, r3, #7
 8003bba:	3308      	adds	r3, #8
 8003bbc:	9303      	str	r3, [sp, #12]
 8003bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bc0:	4433      	add	r3, r6
 8003bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8003bc4:	e767      	b.n	8003a96 <_svfiprintf_r+0x4e>
 8003bc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bca:	460c      	mov	r4, r1
 8003bcc:	2001      	movs	r0, #1
 8003bce:	e7a5      	b.n	8003b1c <_svfiprintf_r+0xd4>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	3401      	adds	r4, #1
 8003bd4:	9305      	str	r3, [sp, #20]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	f04f 0c0a 	mov.w	ip, #10
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003be2:	3a30      	subs	r2, #48	; 0x30
 8003be4:	2a09      	cmp	r2, #9
 8003be6:	d903      	bls.n	8003bf0 <_svfiprintf_r+0x1a8>
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0c5      	beq.n	8003b78 <_svfiprintf_r+0x130>
 8003bec:	9105      	str	r1, [sp, #20]
 8003bee:	e7c3      	b.n	8003b78 <_svfiprintf_r+0x130>
 8003bf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bf4:	4604      	mov	r4, r0
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e7f0      	b.n	8003bdc <_svfiprintf_r+0x194>
 8003bfa:	ab03      	add	r3, sp, #12
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	462a      	mov	r2, r5
 8003c00:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <_svfiprintf_r+0x1f8>)
 8003c02:	a904      	add	r1, sp, #16
 8003c04:	4638      	mov	r0, r7
 8003c06:	f3af 8000 	nop.w
 8003c0a:	1c42      	adds	r2, r0, #1
 8003c0c:	4606      	mov	r6, r0
 8003c0e:	d1d6      	bne.n	8003bbe <_svfiprintf_r+0x176>
 8003c10:	89ab      	ldrh	r3, [r5, #12]
 8003c12:	065b      	lsls	r3, r3, #25
 8003c14:	f53f af2c 	bmi.w	8003a70 <_svfiprintf_r+0x28>
 8003c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c1a:	b01d      	add	sp, #116	; 0x74
 8003c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c20:	ab03      	add	r3, sp, #12
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	462a      	mov	r2, r5
 8003c26:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <_svfiprintf_r+0x1f8>)
 8003c28:	a904      	add	r1, sp, #16
 8003c2a:	4638      	mov	r0, r7
 8003c2c:	f000 f87a 	bl	8003d24 <_printf_i>
 8003c30:	e7eb      	b.n	8003c0a <_svfiprintf_r+0x1c2>
 8003c32:	bf00      	nop
 8003c34:	08004320 	.word	0x08004320
 8003c38:	0800432a 	.word	0x0800432a
 8003c3c:	00000000 	.word	0x00000000
 8003c40:	08003991 	.word	0x08003991
 8003c44:	08004326 	.word	0x08004326

08003c48 <_printf_common>:
 8003c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c4c:	4616      	mov	r6, r2
 8003c4e:	4699      	mov	r9, r3
 8003c50:	688a      	ldr	r2, [r1, #8]
 8003c52:	690b      	ldr	r3, [r1, #16]
 8003c54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	bfb8      	it	lt
 8003c5c:	4613      	movlt	r3, r2
 8003c5e:	6033      	str	r3, [r6, #0]
 8003c60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c64:	4607      	mov	r7, r0
 8003c66:	460c      	mov	r4, r1
 8003c68:	b10a      	cbz	r2, 8003c6e <_printf_common+0x26>
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	6033      	str	r3, [r6, #0]
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	0699      	lsls	r1, r3, #26
 8003c72:	bf42      	ittt	mi
 8003c74:	6833      	ldrmi	r3, [r6, #0]
 8003c76:	3302      	addmi	r3, #2
 8003c78:	6033      	strmi	r3, [r6, #0]
 8003c7a:	6825      	ldr	r5, [r4, #0]
 8003c7c:	f015 0506 	ands.w	r5, r5, #6
 8003c80:	d106      	bne.n	8003c90 <_printf_common+0x48>
 8003c82:	f104 0a19 	add.w	sl, r4, #25
 8003c86:	68e3      	ldr	r3, [r4, #12]
 8003c88:	6832      	ldr	r2, [r6, #0]
 8003c8a:	1a9b      	subs	r3, r3, r2
 8003c8c:	42ab      	cmp	r3, r5
 8003c8e:	dc26      	bgt.n	8003cde <_printf_common+0x96>
 8003c90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c94:	1e13      	subs	r3, r2, #0
 8003c96:	6822      	ldr	r2, [r4, #0]
 8003c98:	bf18      	it	ne
 8003c9a:	2301      	movne	r3, #1
 8003c9c:	0692      	lsls	r2, r2, #26
 8003c9e:	d42b      	bmi.n	8003cf8 <_printf_common+0xb0>
 8003ca0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ca4:	4649      	mov	r1, r9
 8003ca6:	4638      	mov	r0, r7
 8003ca8:	47c0      	blx	r8
 8003caa:	3001      	adds	r0, #1
 8003cac:	d01e      	beq.n	8003cec <_printf_common+0xa4>
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	68e5      	ldr	r5, [r4, #12]
 8003cb2:	6832      	ldr	r2, [r6, #0]
 8003cb4:	f003 0306 	and.w	r3, r3, #6
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	bf08      	it	eq
 8003cbc:	1aad      	subeq	r5, r5, r2
 8003cbe:	68a3      	ldr	r3, [r4, #8]
 8003cc0:	6922      	ldr	r2, [r4, #16]
 8003cc2:	bf0c      	ite	eq
 8003cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cc8:	2500      	movne	r5, #0
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	bfc4      	itt	gt
 8003cce:	1a9b      	subgt	r3, r3, r2
 8003cd0:	18ed      	addgt	r5, r5, r3
 8003cd2:	2600      	movs	r6, #0
 8003cd4:	341a      	adds	r4, #26
 8003cd6:	42b5      	cmp	r5, r6
 8003cd8:	d11a      	bne.n	8003d10 <_printf_common+0xc8>
 8003cda:	2000      	movs	r0, #0
 8003cdc:	e008      	b.n	8003cf0 <_printf_common+0xa8>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	4652      	mov	r2, sl
 8003ce2:	4649      	mov	r1, r9
 8003ce4:	4638      	mov	r0, r7
 8003ce6:	47c0      	blx	r8
 8003ce8:	3001      	adds	r0, #1
 8003cea:	d103      	bne.n	8003cf4 <_printf_common+0xac>
 8003cec:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf4:	3501      	adds	r5, #1
 8003cf6:	e7c6      	b.n	8003c86 <_printf_common+0x3e>
 8003cf8:	18e1      	adds	r1, r4, r3
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	2030      	movs	r0, #48	; 0x30
 8003cfe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d02:	4422      	add	r2, r4
 8003d04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d0c:	3302      	adds	r3, #2
 8003d0e:	e7c7      	b.n	8003ca0 <_printf_common+0x58>
 8003d10:	2301      	movs	r3, #1
 8003d12:	4622      	mov	r2, r4
 8003d14:	4649      	mov	r1, r9
 8003d16:	4638      	mov	r0, r7
 8003d18:	47c0      	blx	r8
 8003d1a:	3001      	adds	r0, #1
 8003d1c:	d0e6      	beq.n	8003cec <_printf_common+0xa4>
 8003d1e:	3601      	adds	r6, #1
 8003d20:	e7d9      	b.n	8003cd6 <_printf_common+0x8e>
	...

08003d24 <_printf_i>:
 8003d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d28:	460c      	mov	r4, r1
 8003d2a:	4691      	mov	r9, r2
 8003d2c:	7e27      	ldrb	r7, [r4, #24]
 8003d2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003d30:	2f78      	cmp	r7, #120	; 0x78
 8003d32:	4680      	mov	r8, r0
 8003d34:	469a      	mov	sl, r3
 8003d36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d3a:	d807      	bhi.n	8003d4c <_printf_i+0x28>
 8003d3c:	2f62      	cmp	r7, #98	; 0x62
 8003d3e:	d80a      	bhi.n	8003d56 <_printf_i+0x32>
 8003d40:	2f00      	cmp	r7, #0
 8003d42:	f000 80d8 	beq.w	8003ef6 <_printf_i+0x1d2>
 8003d46:	2f58      	cmp	r7, #88	; 0x58
 8003d48:	f000 80a3 	beq.w	8003e92 <_printf_i+0x16e>
 8003d4c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d54:	e03a      	b.n	8003dcc <_printf_i+0xa8>
 8003d56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d5a:	2b15      	cmp	r3, #21
 8003d5c:	d8f6      	bhi.n	8003d4c <_printf_i+0x28>
 8003d5e:	a001      	add	r0, pc, #4	; (adr r0, 8003d64 <_printf_i+0x40>)
 8003d60:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003d64:	08003dbd 	.word	0x08003dbd
 8003d68:	08003dd1 	.word	0x08003dd1
 8003d6c:	08003d4d 	.word	0x08003d4d
 8003d70:	08003d4d 	.word	0x08003d4d
 8003d74:	08003d4d 	.word	0x08003d4d
 8003d78:	08003d4d 	.word	0x08003d4d
 8003d7c:	08003dd1 	.word	0x08003dd1
 8003d80:	08003d4d 	.word	0x08003d4d
 8003d84:	08003d4d 	.word	0x08003d4d
 8003d88:	08003d4d 	.word	0x08003d4d
 8003d8c:	08003d4d 	.word	0x08003d4d
 8003d90:	08003edd 	.word	0x08003edd
 8003d94:	08003e01 	.word	0x08003e01
 8003d98:	08003ebf 	.word	0x08003ebf
 8003d9c:	08003d4d 	.word	0x08003d4d
 8003da0:	08003d4d 	.word	0x08003d4d
 8003da4:	08003eff 	.word	0x08003eff
 8003da8:	08003d4d 	.word	0x08003d4d
 8003dac:	08003e01 	.word	0x08003e01
 8003db0:	08003d4d 	.word	0x08003d4d
 8003db4:	08003d4d 	.word	0x08003d4d
 8003db8:	08003ec7 	.word	0x08003ec7
 8003dbc:	680b      	ldr	r3, [r1, #0]
 8003dbe:	1d1a      	adds	r2, r3, #4
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	600a      	str	r2, [r1, #0]
 8003dc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003dc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0a3      	b.n	8003f18 <_printf_i+0x1f4>
 8003dd0:	6825      	ldr	r5, [r4, #0]
 8003dd2:	6808      	ldr	r0, [r1, #0]
 8003dd4:	062e      	lsls	r6, r5, #24
 8003dd6:	f100 0304 	add.w	r3, r0, #4
 8003dda:	d50a      	bpl.n	8003df2 <_printf_i+0xce>
 8003ddc:	6805      	ldr	r5, [r0, #0]
 8003dde:	600b      	str	r3, [r1, #0]
 8003de0:	2d00      	cmp	r5, #0
 8003de2:	da03      	bge.n	8003dec <_printf_i+0xc8>
 8003de4:	232d      	movs	r3, #45	; 0x2d
 8003de6:	426d      	negs	r5, r5
 8003de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dec:	485e      	ldr	r0, [pc, #376]	; (8003f68 <_printf_i+0x244>)
 8003dee:	230a      	movs	r3, #10
 8003df0:	e019      	b.n	8003e26 <_printf_i+0x102>
 8003df2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003df6:	6805      	ldr	r5, [r0, #0]
 8003df8:	600b      	str	r3, [r1, #0]
 8003dfa:	bf18      	it	ne
 8003dfc:	b22d      	sxthne	r5, r5
 8003dfe:	e7ef      	b.n	8003de0 <_printf_i+0xbc>
 8003e00:	680b      	ldr	r3, [r1, #0]
 8003e02:	6825      	ldr	r5, [r4, #0]
 8003e04:	1d18      	adds	r0, r3, #4
 8003e06:	6008      	str	r0, [r1, #0]
 8003e08:	0628      	lsls	r0, r5, #24
 8003e0a:	d501      	bpl.n	8003e10 <_printf_i+0xec>
 8003e0c:	681d      	ldr	r5, [r3, #0]
 8003e0e:	e002      	b.n	8003e16 <_printf_i+0xf2>
 8003e10:	0669      	lsls	r1, r5, #25
 8003e12:	d5fb      	bpl.n	8003e0c <_printf_i+0xe8>
 8003e14:	881d      	ldrh	r5, [r3, #0]
 8003e16:	4854      	ldr	r0, [pc, #336]	; (8003f68 <_printf_i+0x244>)
 8003e18:	2f6f      	cmp	r7, #111	; 0x6f
 8003e1a:	bf0c      	ite	eq
 8003e1c:	2308      	moveq	r3, #8
 8003e1e:	230a      	movne	r3, #10
 8003e20:	2100      	movs	r1, #0
 8003e22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e26:	6866      	ldr	r6, [r4, #4]
 8003e28:	60a6      	str	r6, [r4, #8]
 8003e2a:	2e00      	cmp	r6, #0
 8003e2c:	bfa2      	ittt	ge
 8003e2e:	6821      	ldrge	r1, [r4, #0]
 8003e30:	f021 0104 	bicge.w	r1, r1, #4
 8003e34:	6021      	strge	r1, [r4, #0]
 8003e36:	b90d      	cbnz	r5, 8003e3c <_printf_i+0x118>
 8003e38:	2e00      	cmp	r6, #0
 8003e3a:	d04d      	beq.n	8003ed8 <_printf_i+0x1b4>
 8003e3c:	4616      	mov	r6, r2
 8003e3e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e42:	fb03 5711 	mls	r7, r3, r1, r5
 8003e46:	5dc7      	ldrb	r7, [r0, r7]
 8003e48:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e4c:	462f      	mov	r7, r5
 8003e4e:	42bb      	cmp	r3, r7
 8003e50:	460d      	mov	r5, r1
 8003e52:	d9f4      	bls.n	8003e3e <_printf_i+0x11a>
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d10b      	bne.n	8003e70 <_printf_i+0x14c>
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	07df      	lsls	r7, r3, #31
 8003e5c:	d508      	bpl.n	8003e70 <_printf_i+0x14c>
 8003e5e:	6923      	ldr	r3, [r4, #16]
 8003e60:	6861      	ldr	r1, [r4, #4]
 8003e62:	4299      	cmp	r1, r3
 8003e64:	bfde      	ittt	le
 8003e66:	2330      	movle	r3, #48	; 0x30
 8003e68:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e6c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e70:	1b92      	subs	r2, r2, r6
 8003e72:	6122      	str	r2, [r4, #16]
 8003e74:	f8cd a000 	str.w	sl, [sp]
 8003e78:	464b      	mov	r3, r9
 8003e7a:	aa03      	add	r2, sp, #12
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	4640      	mov	r0, r8
 8003e80:	f7ff fee2 	bl	8003c48 <_printf_common>
 8003e84:	3001      	adds	r0, #1
 8003e86:	d14c      	bne.n	8003f22 <_printf_i+0x1fe>
 8003e88:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8c:	b004      	add	sp, #16
 8003e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e92:	4835      	ldr	r0, [pc, #212]	; (8003f68 <_printf_i+0x244>)
 8003e94:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	680e      	ldr	r6, [r1, #0]
 8003e9c:	061f      	lsls	r7, r3, #24
 8003e9e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003ea2:	600e      	str	r6, [r1, #0]
 8003ea4:	d514      	bpl.n	8003ed0 <_printf_i+0x1ac>
 8003ea6:	07d9      	lsls	r1, r3, #31
 8003ea8:	bf44      	itt	mi
 8003eaa:	f043 0320 	orrmi.w	r3, r3, #32
 8003eae:	6023      	strmi	r3, [r4, #0]
 8003eb0:	b91d      	cbnz	r5, 8003eba <_printf_i+0x196>
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	f023 0320 	bic.w	r3, r3, #32
 8003eb8:	6023      	str	r3, [r4, #0]
 8003eba:	2310      	movs	r3, #16
 8003ebc:	e7b0      	b.n	8003e20 <_printf_i+0xfc>
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	f043 0320 	orr.w	r3, r3, #32
 8003ec4:	6023      	str	r3, [r4, #0]
 8003ec6:	2378      	movs	r3, #120	; 0x78
 8003ec8:	4828      	ldr	r0, [pc, #160]	; (8003f6c <_printf_i+0x248>)
 8003eca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ece:	e7e3      	b.n	8003e98 <_printf_i+0x174>
 8003ed0:	065e      	lsls	r6, r3, #25
 8003ed2:	bf48      	it	mi
 8003ed4:	b2ad      	uxthmi	r5, r5
 8003ed6:	e7e6      	b.n	8003ea6 <_printf_i+0x182>
 8003ed8:	4616      	mov	r6, r2
 8003eda:	e7bb      	b.n	8003e54 <_printf_i+0x130>
 8003edc:	680b      	ldr	r3, [r1, #0]
 8003ede:	6826      	ldr	r6, [r4, #0]
 8003ee0:	6960      	ldr	r0, [r4, #20]
 8003ee2:	1d1d      	adds	r5, r3, #4
 8003ee4:	600d      	str	r5, [r1, #0]
 8003ee6:	0635      	lsls	r5, r6, #24
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	d501      	bpl.n	8003ef0 <_printf_i+0x1cc>
 8003eec:	6018      	str	r0, [r3, #0]
 8003eee:	e002      	b.n	8003ef6 <_printf_i+0x1d2>
 8003ef0:	0671      	lsls	r1, r6, #25
 8003ef2:	d5fb      	bpl.n	8003eec <_printf_i+0x1c8>
 8003ef4:	8018      	strh	r0, [r3, #0]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	6123      	str	r3, [r4, #16]
 8003efa:	4616      	mov	r6, r2
 8003efc:	e7ba      	b.n	8003e74 <_printf_i+0x150>
 8003efe:	680b      	ldr	r3, [r1, #0]
 8003f00:	1d1a      	adds	r2, r3, #4
 8003f02:	600a      	str	r2, [r1, #0]
 8003f04:	681e      	ldr	r6, [r3, #0]
 8003f06:	6862      	ldr	r2, [r4, #4]
 8003f08:	2100      	movs	r1, #0
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	f7fc f988 	bl	8000220 <memchr>
 8003f10:	b108      	cbz	r0, 8003f16 <_printf_i+0x1f2>
 8003f12:	1b80      	subs	r0, r0, r6
 8003f14:	6060      	str	r0, [r4, #4]
 8003f16:	6863      	ldr	r3, [r4, #4]
 8003f18:	6123      	str	r3, [r4, #16]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f20:	e7a8      	b.n	8003e74 <_printf_i+0x150>
 8003f22:	6923      	ldr	r3, [r4, #16]
 8003f24:	4632      	mov	r2, r6
 8003f26:	4649      	mov	r1, r9
 8003f28:	4640      	mov	r0, r8
 8003f2a:	47d0      	blx	sl
 8003f2c:	3001      	adds	r0, #1
 8003f2e:	d0ab      	beq.n	8003e88 <_printf_i+0x164>
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	079b      	lsls	r3, r3, #30
 8003f34:	d413      	bmi.n	8003f5e <_printf_i+0x23a>
 8003f36:	68e0      	ldr	r0, [r4, #12]
 8003f38:	9b03      	ldr	r3, [sp, #12]
 8003f3a:	4298      	cmp	r0, r3
 8003f3c:	bfb8      	it	lt
 8003f3e:	4618      	movlt	r0, r3
 8003f40:	e7a4      	b.n	8003e8c <_printf_i+0x168>
 8003f42:	2301      	movs	r3, #1
 8003f44:	4632      	mov	r2, r6
 8003f46:	4649      	mov	r1, r9
 8003f48:	4640      	mov	r0, r8
 8003f4a:	47d0      	blx	sl
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	d09b      	beq.n	8003e88 <_printf_i+0x164>
 8003f50:	3501      	adds	r5, #1
 8003f52:	68e3      	ldr	r3, [r4, #12]
 8003f54:	9903      	ldr	r1, [sp, #12]
 8003f56:	1a5b      	subs	r3, r3, r1
 8003f58:	42ab      	cmp	r3, r5
 8003f5a:	dcf2      	bgt.n	8003f42 <_printf_i+0x21e>
 8003f5c:	e7eb      	b.n	8003f36 <_printf_i+0x212>
 8003f5e:	2500      	movs	r5, #0
 8003f60:	f104 0619 	add.w	r6, r4, #25
 8003f64:	e7f5      	b.n	8003f52 <_printf_i+0x22e>
 8003f66:	bf00      	nop
 8003f68:	08004331 	.word	0x08004331
 8003f6c:	08004342 	.word	0x08004342

08003f70 <memcpy>:
 8003f70:	440a      	add	r2, r1
 8003f72:	4291      	cmp	r1, r2
 8003f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f78:	d100      	bne.n	8003f7c <memcpy+0xc>
 8003f7a:	4770      	bx	lr
 8003f7c:	b510      	push	{r4, lr}
 8003f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f86:	4291      	cmp	r1, r2
 8003f88:	d1f9      	bne.n	8003f7e <memcpy+0xe>
 8003f8a:	bd10      	pop	{r4, pc}

08003f8c <memmove>:
 8003f8c:	4288      	cmp	r0, r1
 8003f8e:	b510      	push	{r4, lr}
 8003f90:	eb01 0402 	add.w	r4, r1, r2
 8003f94:	d902      	bls.n	8003f9c <memmove+0x10>
 8003f96:	4284      	cmp	r4, r0
 8003f98:	4623      	mov	r3, r4
 8003f9a:	d807      	bhi.n	8003fac <memmove+0x20>
 8003f9c:	1e43      	subs	r3, r0, #1
 8003f9e:	42a1      	cmp	r1, r4
 8003fa0:	d008      	beq.n	8003fb4 <memmove+0x28>
 8003fa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003faa:	e7f8      	b.n	8003f9e <memmove+0x12>
 8003fac:	4402      	add	r2, r0
 8003fae:	4601      	mov	r1, r0
 8003fb0:	428a      	cmp	r2, r1
 8003fb2:	d100      	bne.n	8003fb6 <memmove+0x2a>
 8003fb4:	bd10      	pop	{r4, pc}
 8003fb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fbe:	e7f7      	b.n	8003fb0 <memmove+0x24>

08003fc0 <_free_r>:
 8003fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003fc2:	2900      	cmp	r1, #0
 8003fc4:	d048      	beq.n	8004058 <_free_r+0x98>
 8003fc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fca:	9001      	str	r0, [sp, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f1a1 0404 	sub.w	r4, r1, #4
 8003fd2:	bfb8      	it	lt
 8003fd4:	18e4      	addlt	r4, r4, r3
 8003fd6:	f000 f8d3 	bl	8004180 <__malloc_lock>
 8003fda:	4a20      	ldr	r2, [pc, #128]	; (800405c <_free_r+0x9c>)
 8003fdc:	9801      	ldr	r0, [sp, #4]
 8003fde:	6813      	ldr	r3, [r2, #0]
 8003fe0:	4615      	mov	r5, r2
 8003fe2:	b933      	cbnz	r3, 8003ff2 <_free_r+0x32>
 8003fe4:	6063      	str	r3, [r4, #4]
 8003fe6:	6014      	str	r4, [r2, #0]
 8003fe8:	b003      	add	sp, #12
 8003fea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003fee:	f000 b8cd 	b.w	800418c <__malloc_unlock>
 8003ff2:	42a3      	cmp	r3, r4
 8003ff4:	d90b      	bls.n	800400e <_free_r+0x4e>
 8003ff6:	6821      	ldr	r1, [r4, #0]
 8003ff8:	1862      	adds	r2, r4, r1
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	bf04      	itt	eq
 8003ffe:	681a      	ldreq	r2, [r3, #0]
 8004000:	685b      	ldreq	r3, [r3, #4]
 8004002:	6063      	str	r3, [r4, #4]
 8004004:	bf04      	itt	eq
 8004006:	1852      	addeq	r2, r2, r1
 8004008:	6022      	streq	r2, [r4, #0]
 800400a:	602c      	str	r4, [r5, #0]
 800400c:	e7ec      	b.n	8003fe8 <_free_r+0x28>
 800400e:	461a      	mov	r2, r3
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	b10b      	cbz	r3, 8004018 <_free_r+0x58>
 8004014:	42a3      	cmp	r3, r4
 8004016:	d9fa      	bls.n	800400e <_free_r+0x4e>
 8004018:	6811      	ldr	r1, [r2, #0]
 800401a:	1855      	adds	r5, r2, r1
 800401c:	42a5      	cmp	r5, r4
 800401e:	d10b      	bne.n	8004038 <_free_r+0x78>
 8004020:	6824      	ldr	r4, [r4, #0]
 8004022:	4421      	add	r1, r4
 8004024:	1854      	adds	r4, r2, r1
 8004026:	42a3      	cmp	r3, r4
 8004028:	6011      	str	r1, [r2, #0]
 800402a:	d1dd      	bne.n	8003fe8 <_free_r+0x28>
 800402c:	681c      	ldr	r4, [r3, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	6053      	str	r3, [r2, #4]
 8004032:	4421      	add	r1, r4
 8004034:	6011      	str	r1, [r2, #0]
 8004036:	e7d7      	b.n	8003fe8 <_free_r+0x28>
 8004038:	d902      	bls.n	8004040 <_free_r+0x80>
 800403a:	230c      	movs	r3, #12
 800403c:	6003      	str	r3, [r0, #0]
 800403e:	e7d3      	b.n	8003fe8 <_free_r+0x28>
 8004040:	6825      	ldr	r5, [r4, #0]
 8004042:	1961      	adds	r1, r4, r5
 8004044:	428b      	cmp	r3, r1
 8004046:	bf04      	itt	eq
 8004048:	6819      	ldreq	r1, [r3, #0]
 800404a:	685b      	ldreq	r3, [r3, #4]
 800404c:	6063      	str	r3, [r4, #4]
 800404e:	bf04      	itt	eq
 8004050:	1949      	addeq	r1, r1, r5
 8004052:	6021      	streq	r1, [r4, #0]
 8004054:	6054      	str	r4, [r2, #4]
 8004056:	e7c7      	b.n	8003fe8 <_free_r+0x28>
 8004058:	b003      	add	sp, #12
 800405a:	bd30      	pop	{r4, r5, pc}
 800405c:	200000e4 	.word	0x200000e4

08004060 <_malloc_r>:
 8004060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004062:	1ccd      	adds	r5, r1, #3
 8004064:	f025 0503 	bic.w	r5, r5, #3
 8004068:	3508      	adds	r5, #8
 800406a:	2d0c      	cmp	r5, #12
 800406c:	bf38      	it	cc
 800406e:	250c      	movcc	r5, #12
 8004070:	2d00      	cmp	r5, #0
 8004072:	4606      	mov	r6, r0
 8004074:	db01      	blt.n	800407a <_malloc_r+0x1a>
 8004076:	42a9      	cmp	r1, r5
 8004078:	d903      	bls.n	8004082 <_malloc_r+0x22>
 800407a:	230c      	movs	r3, #12
 800407c:	6033      	str	r3, [r6, #0]
 800407e:	2000      	movs	r0, #0
 8004080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004082:	f000 f87d 	bl	8004180 <__malloc_lock>
 8004086:	4921      	ldr	r1, [pc, #132]	; (800410c <_malloc_r+0xac>)
 8004088:	680a      	ldr	r2, [r1, #0]
 800408a:	4614      	mov	r4, r2
 800408c:	b99c      	cbnz	r4, 80040b6 <_malloc_r+0x56>
 800408e:	4f20      	ldr	r7, [pc, #128]	; (8004110 <_malloc_r+0xb0>)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	b923      	cbnz	r3, 800409e <_malloc_r+0x3e>
 8004094:	4621      	mov	r1, r4
 8004096:	4630      	mov	r0, r6
 8004098:	f000 f862 	bl	8004160 <_sbrk_r>
 800409c:	6038      	str	r0, [r7, #0]
 800409e:	4629      	mov	r1, r5
 80040a0:	4630      	mov	r0, r6
 80040a2:	f000 f85d 	bl	8004160 <_sbrk_r>
 80040a6:	1c43      	adds	r3, r0, #1
 80040a8:	d123      	bne.n	80040f2 <_malloc_r+0x92>
 80040aa:	230c      	movs	r3, #12
 80040ac:	6033      	str	r3, [r6, #0]
 80040ae:	4630      	mov	r0, r6
 80040b0:	f000 f86c 	bl	800418c <__malloc_unlock>
 80040b4:	e7e3      	b.n	800407e <_malloc_r+0x1e>
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	1b5b      	subs	r3, r3, r5
 80040ba:	d417      	bmi.n	80040ec <_malloc_r+0x8c>
 80040bc:	2b0b      	cmp	r3, #11
 80040be:	d903      	bls.n	80040c8 <_malloc_r+0x68>
 80040c0:	6023      	str	r3, [r4, #0]
 80040c2:	441c      	add	r4, r3
 80040c4:	6025      	str	r5, [r4, #0]
 80040c6:	e004      	b.n	80040d2 <_malloc_r+0x72>
 80040c8:	6863      	ldr	r3, [r4, #4]
 80040ca:	42a2      	cmp	r2, r4
 80040cc:	bf0c      	ite	eq
 80040ce:	600b      	streq	r3, [r1, #0]
 80040d0:	6053      	strne	r3, [r2, #4]
 80040d2:	4630      	mov	r0, r6
 80040d4:	f000 f85a 	bl	800418c <__malloc_unlock>
 80040d8:	f104 000b 	add.w	r0, r4, #11
 80040dc:	1d23      	adds	r3, r4, #4
 80040de:	f020 0007 	bic.w	r0, r0, #7
 80040e2:	1ac2      	subs	r2, r0, r3
 80040e4:	d0cc      	beq.n	8004080 <_malloc_r+0x20>
 80040e6:	1a1b      	subs	r3, r3, r0
 80040e8:	50a3      	str	r3, [r4, r2]
 80040ea:	e7c9      	b.n	8004080 <_malloc_r+0x20>
 80040ec:	4622      	mov	r2, r4
 80040ee:	6864      	ldr	r4, [r4, #4]
 80040f0:	e7cc      	b.n	800408c <_malloc_r+0x2c>
 80040f2:	1cc4      	adds	r4, r0, #3
 80040f4:	f024 0403 	bic.w	r4, r4, #3
 80040f8:	42a0      	cmp	r0, r4
 80040fa:	d0e3      	beq.n	80040c4 <_malloc_r+0x64>
 80040fc:	1a21      	subs	r1, r4, r0
 80040fe:	4630      	mov	r0, r6
 8004100:	f000 f82e 	bl	8004160 <_sbrk_r>
 8004104:	3001      	adds	r0, #1
 8004106:	d1dd      	bne.n	80040c4 <_malloc_r+0x64>
 8004108:	e7cf      	b.n	80040aa <_malloc_r+0x4a>
 800410a:	bf00      	nop
 800410c:	200000e4 	.word	0x200000e4
 8004110:	200000e8 	.word	0x200000e8

08004114 <_realloc_r>:
 8004114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004116:	4607      	mov	r7, r0
 8004118:	4614      	mov	r4, r2
 800411a:	460e      	mov	r6, r1
 800411c:	b921      	cbnz	r1, 8004128 <_realloc_r+0x14>
 800411e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004122:	4611      	mov	r1, r2
 8004124:	f7ff bf9c 	b.w	8004060 <_malloc_r>
 8004128:	b922      	cbnz	r2, 8004134 <_realloc_r+0x20>
 800412a:	f7ff ff49 	bl	8003fc0 <_free_r>
 800412e:	4625      	mov	r5, r4
 8004130:	4628      	mov	r0, r5
 8004132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004134:	f000 f830 	bl	8004198 <_malloc_usable_size_r>
 8004138:	42a0      	cmp	r0, r4
 800413a:	d20f      	bcs.n	800415c <_realloc_r+0x48>
 800413c:	4621      	mov	r1, r4
 800413e:	4638      	mov	r0, r7
 8004140:	f7ff ff8e 	bl	8004060 <_malloc_r>
 8004144:	4605      	mov	r5, r0
 8004146:	2800      	cmp	r0, #0
 8004148:	d0f2      	beq.n	8004130 <_realloc_r+0x1c>
 800414a:	4631      	mov	r1, r6
 800414c:	4622      	mov	r2, r4
 800414e:	f7ff ff0f 	bl	8003f70 <memcpy>
 8004152:	4631      	mov	r1, r6
 8004154:	4638      	mov	r0, r7
 8004156:	f7ff ff33 	bl	8003fc0 <_free_r>
 800415a:	e7e9      	b.n	8004130 <_realloc_r+0x1c>
 800415c:	4635      	mov	r5, r6
 800415e:	e7e7      	b.n	8004130 <_realloc_r+0x1c>

08004160 <_sbrk_r>:
 8004160:	b538      	push	{r3, r4, r5, lr}
 8004162:	4d06      	ldr	r5, [pc, #24]	; (800417c <_sbrk_r+0x1c>)
 8004164:	2300      	movs	r3, #0
 8004166:	4604      	mov	r4, r0
 8004168:	4608      	mov	r0, r1
 800416a:	602b      	str	r3, [r5, #0]
 800416c:	f7fc fb60 	bl	8000830 <_sbrk>
 8004170:	1c43      	adds	r3, r0, #1
 8004172:	d102      	bne.n	800417a <_sbrk_r+0x1a>
 8004174:	682b      	ldr	r3, [r5, #0]
 8004176:	b103      	cbz	r3, 800417a <_sbrk_r+0x1a>
 8004178:	6023      	str	r3, [r4, #0]
 800417a:	bd38      	pop	{r3, r4, r5, pc}
 800417c:	20000234 	.word	0x20000234

08004180 <__malloc_lock>:
 8004180:	4801      	ldr	r0, [pc, #4]	; (8004188 <__malloc_lock+0x8>)
 8004182:	f000 b811 	b.w	80041a8 <__retarget_lock_acquire_recursive>
 8004186:	bf00      	nop
 8004188:	2000023c 	.word	0x2000023c

0800418c <__malloc_unlock>:
 800418c:	4801      	ldr	r0, [pc, #4]	; (8004194 <__malloc_unlock+0x8>)
 800418e:	f000 b80c 	b.w	80041aa <__retarget_lock_release_recursive>
 8004192:	bf00      	nop
 8004194:	2000023c 	.word	0x2000023c

08004198 <_malloc_usable_size_r>:
 8004198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800419c:	1f18      	subs	r0, r3, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bfbc      	itt	lt
 80041a2:	580b      	ldrlt	r3, [r1, r0]
 80041a4:	18c0      	addlt	r0, r0, r3
 80041a6:	4770      	bx	lr

080041a8 <__retarget_lock_acquire_recursive>:
 80041a8:	4770      	bx	lr

080041aa <__retarget_lock_release_recursive>:
 80041aa:	4770      	bx	lr

080041ac <_init>:
 80041ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ae:	bf00      	nop
 80041b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041b2:	bc08      	pop	{r3}
 80041b4:	469e      	mov	lr, r3
 80041b6:	4770      	bx	lr

080041b8 <_fini>:
 80041b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ba:	bf00      	nop
 80041bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041be:	bc08      	pop	{r3}
 80041c0:	469e      	mov	lr, r3
 80041c2:	4770      	bx	lr
