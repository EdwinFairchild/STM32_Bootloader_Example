
STM32_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003388  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800354c  0800354c  0001354c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003564  08003564  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003564  08003564  00013564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800356c  0800356c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800356c  0800356c  0001356c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003570  08003570  00013570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000010  08003584  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000180  08003584  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd29  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ce  00000000  00000000  0002dd69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  00030238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  00030be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e5e  00000000  00000000  000314a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d44e  00000000  00000000  000532fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c913b  00000000  00000000  0006074c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00129887  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002584  00000000  00000000  001298dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003534 	.word	0x08003534

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08003534 	.word	0x08003534

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 030c 	add.w	r3, r7, #12
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	60bb      	str	r3, [r7, #8]
 8000516:	4b1f      	ldr	r3, [pc, #124]	; (8000594 <MX_GPIO_Init+0x98>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a1e      	ldr	r2, [pc, #120]	; (8000594 <MX_GPIO_Init+0x98>)
 800051c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
 8000522:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <MX_GPIO_Init+0x98>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	4b18      	ldr	r3, [pc, #96]	; (8000594 <MX_GPIO_Init+0x98>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a17      	ldr	r2, [pc, #92]	; (8000594 <MX_GPIO_Init+0x98>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <MX_GPIO_Init+0x98>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	4b11      	ldr	r3, [pc, #68]	; (8000594 <MX_GPIO_Init+0x98>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a10      	ldr	r2, [pc, #64]	; (8000594 <MX_GPIO_Init+0x98>)
 8000554:	f043 0304 	orr.w	r3, r3, #4
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <MX_GPIO_Init+0x98>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0304 	and.w	r3, r3, #4
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(user_led_GPIO_Port, user_led_Pin, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2120      	movs	r1, #32
 800056a:	480b      	ldr	r0, [pc, #44]	; (8000598 <MX_GPIO_Init+0x9c>)
 800056c:	f001 f8aa 	bl	80016c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = user_led_Pin;
 8000570:	2320      	movs	r3, #32
 8000572:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000574:	2301      	movs	r3, #1
 8000576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(user_led_GPIO_Port, &GPIO_InitStruct);
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4619      	mov	r1, r3
 8000586:	4804      	ldr	r0, [pc, #16]	; (8000598 <MX_GPIO_Init+0x9c>)
 8000588:	f000 ff08 	bl	800139c <HAL_GPIO_Init>

}
 800058c:	bf00      	nop
 800058e:	3720      	adds	r7, #32
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40023800 	.word	0x40023800
 8000598:	40020000 	.word	0x40020000

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 f9fe 	bl	80009a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f80a 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f7ff ffa8 	bl	80004fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ac:	f000 f8f4 	bl	8000798 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005b0:	f000 f91c 	bl	80007ec <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //should not return from here
  bootloader_main();
 80005b4:	f002 fcc2 	bl	8002f3c <bootloader_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <main+0x1c>
	...

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	2234      	movs	r2, #52	; 0x34
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 ffaa 	bl	8003524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <SystemClock_Config+0xdc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a2b      	ldr	r2, [pc, #172]	; (8000698 <SystemClock_Config+0xdc>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b29      	ldr	r3, [pc, #164]	; (8000698 <SystemClock_Config+0xdc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	4b26      	ldr	r3, [pc, #152]	; (800069c <SystemClock_Config+0xe0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a25      	ldr	r2, [pc, #148]	; (800069c <SystemClock_Config+0xe0>)
 8000606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b23      	ldr	r3, [pc, #140]	; (800069c <SystemClock_Config+0xe0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000620:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000630:	23b4      	movs	r3, #180	; 0xb4
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000638:	2302      	movs	r3, #2
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800063c:	2302      	movs	r3, #2
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 031c 	add.w	r3, r7, #28
 8000644:	4618      	mov	r0, r3
 8000646:	f001 fb73 	bl	8001d30 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000650:	f000 f826 	bl	80006a0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000654:	f001 f850 	bl	80016f8 <HAL_PWREx_EnableOverDrive>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800065e:	f000 f81f 	bl	80006a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2302      	movs	r3, #2
 8000668:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000678:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	2105      	movs	r1, #5
 8000680:	4618      	mov	r0, r3
 8000682:	f001 f889 	bl	8001798 <HAL_RCC_ClockConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800068c:	f000 f808 	bl	80006a0 <Error_Handler>
  }
}
 8000690:	bf00      	nop
 8000692:	3750      	adds	r7, #80	; 0x50
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40023800 	.word	0x40023800
 800069c:	40007000 	.word	0x40007000

080006a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a4:	b672      	cpsid	i
}
 80006a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <Error_Handler+0x8>
	...

080006ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <HAL_MspInit+0x4c>)
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	4a0f      	ldr	r2, [pc, #60]	; (80006f8 <HAL_MspInit+0x4c>)
 80006bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c0:	6453      	str	r3, [r2, #68]	; 0x44
 80006c2:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <HAL_MspInit+0x4c>)
 80006c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <HAL_MspInit+0x4c>)
 80006d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d6:	4a08      	ldr	r2, [pc, #32]	; (80006f8 <HAL_MspInit+0x4c>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006dc:	6413      	str	r3, [r2, #64]	; 0x40
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <HAL_MspInit+0x4c>)
 80006e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800

080006fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <NMI_Handler+0x4>

08000702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <HardFault_Handler+0x4>

08000708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070c:	e7fe      	b.n	800070c <MemManage_Handler+0x4>

0800070e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <BusFault_Handler+0x4>

08000714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <UsageFault_Handler+0x4>

0800071a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000748:	f000 f97c 	bl	8000a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000754:	4805      	ldr	r0, [pc, #20]	; (800076c <USART2_IRQHandler+0x1c>)
 8000756:	f001 fdd7 	bl	8002308 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  bootloader_USART2_callback(USART2->DR);
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <USART2_IRQHandler+0x20>)
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fe49 	bl	80033f8 <bootloader_USART2_callback>
  /* USER CODE END USART2_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	200000ac 	.word	0x200000ac
 8000770:	40004400 	.word	0x40004400

08000774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <SystemInit+0x20>)
 800077a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800077e:	4a05      	ldr	r2, [pc, #20]	; (8000794 <SystemInit+0x20>)
 8000780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 800079e:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <MX_USART2_UART_Init+0x50>)
 80007a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_USART2_UART_Init+0x4c>)
 80007d0:	f001 fd4c 	bl	800226c <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007da:	f7ff ff61 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	200000ac 	.word	0x200000ac
 80007e8:	40004400 	.word	0x40004400

080007ec <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007f0:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_USART3_UART_Init+0x4c>)
 80007f2:	4a12      	ldr	r2, [pc, #72]	; (800083c <MX_USART3_UART_Init+0x50>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_USART3_UART_Init+0x4c>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_USART3_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_USART3_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_USART3_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_USART3_UART_Init+0x4c>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_USART3_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_USART3_UART_Init+0x4c>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_USART3_UART_Init+0x4c>)
 8000824:	f001 fd22 	bl	800226c <HAL_UART_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800082e:	f7ff ff37 	bl	80006a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000068 	.word	0x20000068
 800083c:	40004800 	.word	0x40004800

08000840 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08c      	sub	sp, #48	; 0x30
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 031c 	add.w	r3, r7, #28
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a36      	ldr	r2, [pc, #216]	; (8000938 <HAL_UART_MspInit+0xf8>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d134      	bne.n	80008cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
 8000866:	4b35      	ldr	r3, [pc, #212]	; (800093c <HAL_UART_MspInit+0xfc>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	4a34      	ldr	r2, [pc, #208]	; (800093c <HAL_UART_MspInit+0xfc>)
 800086c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000870:	6413      	str	r3, [r2, #64]	; 0x40
 8000872:	4b32      	ldr	r3, [pc, #200]	; (800093c <HAL_UART_MspInit+0xfc>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800087a:	61bb      	str	r3, [r7, #24]
 800087c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
 8000882:	4b2e      	ldr	r3, [pc, #184]	; (800093c <HAL_UART_MspInit+0xfc>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a2d      	ldr	r2, [pc, #180]	; (800093c <HAL_UART_MspInit+0xfc>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b2b      	ldr	r3, [pc, #172]	; (800093c <HAL_UART_MspInit+0xfc>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800089a:	230c      	movs	r3, #12
 800089c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008aa:	2307      	movs	r3, #7
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4822      	ldr	r0, [pc, #136]	; (8000940 <HAL_UART_MspInit+0x100>)
 80008b6:	f000 fd71 	bl	800139c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2100      	movs	r1, #0
 80008be:	2026      	movs	r0, #38	; 0x26
 80008c0:	f000 f9bb 	bl	8000c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008c4:	2026      	movs	r0, #38	; 0x26
 80008c6:	f000 f9d4 	bl	8000c72 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80008ca:	e031      	b.n	8000930 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <HAL_UART_MspInit+0x104>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d12c      	bne.n	8000930 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <HAL_UART_MspInit+0xfc>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	4a17      	ldr	r2, [pc, #92]	; (800093c <HAL_UART_MspInit+0xfc>)
 80008e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008e4:	6413      	str	r3, [r2, #64]	; 0x40
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <HAL_UART_MspInit+0xfc>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_UART_MspInit+0xfc>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a10      	ldr	r2, [pc, #64]	; (800093c <HAL_UART_MspInit+0xfc>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_UART_MspInit+0xfc>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800090e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000920:	2307      	movs	r3, #7
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4807      	ldr	r0, [pc, #28]	; (8000948 <HAL_UART_MspInit+0x108>)
 800092c:	f000 fd36 	bl	800139c <HAL_GPIO_Init>
}
 8000930:	bf00      	nop
 8000932:	3730      	adds	r7, #48	; 0x30
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40004400 	.word	0x40004400
 800093c:	40023800 	.word	0x40023800
 8000940:	40020000 	.word	0x40020000
 8000944:	40004800 	.word	0x40004800
 8000948:	40020800 	.word	0x40020800

0800094c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800094c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000984 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000952:	490e      	ldr	r1, [pc, #56]	; (800098c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000954:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000958:	e002      	b.n	8000960 <LoopCopyDataInit>

0800095a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800095c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095e:	3304      	adds	r3, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000964:	d3f9      	bcc.n	800095a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000966:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000968:	4c0b      	ldr	r4, [pc, #44]	; (8000998 <LoopFillZerobss+0x26>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800096c:	e001      	b.n	8000972 <LoopFillZerobss>

0800096e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000970:	3204      	adds	r2, #4

08000972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000974:	d3fb      	bcc.n	800096e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000976:	f7ff fefd 	bl	8000774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800097a:	f002 fdaf 	bl	80034dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097e:	f7ff fe0d 	bl	800059c <main>
  bx  lr    
 8000982:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000984:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000990:	08003574 	.word	0x08003574
  ldr r2, =_sbss
 8000994:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000998:	20000180 	.word	0x20000180

0800099c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC_IRQHandler>
	...

080009a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <HAL_Init+0x40>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a0d      	ldr	r2, [pc, #52]	; (80009e0 <HAL_Init+0x40>)
 80009aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <HAL_Init+0x40>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <HAL_Init+0x40>)
 80009b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <HAL_Init+0x40>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <HAL_Init+0x40>)
 80009c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c8:	2003      	movs	r0, #3
 80009ca:	f000 f92b 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ce:	200f      	movs	r0, #15
 80009d0:	f000 f808 	bl	80009e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d4:	f7ff fe6a 	bl	80006ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023c00 	.word	0x40023c00

080009e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_InitTick+0x54>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <HAL_InitTick+0x58>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4619      	mov	r1, r3
 80009f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 f943 	bl	8000c8e <HAL_SYSTICK_Config>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e00e      	b.n	8000a30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b0f      	cmp	r3, #15
 8000a16:	d80a      	bhi.n	8000a2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	f000 f90b 	bl	8000c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a24:	4a06      	ldr	r2, [pc, #24]	; (8000a40 <HAL_InitTick+0x5c>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e000      	b.n	8000a30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	20000004 	.word	0x20000004

08000a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_IncTick+0x20>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_IncTick+0x24>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <HAL_IncTick+0x24>)
 8000a56:	6013      	str	r3, [r2, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000008 	.word	0x20000008
 8000a68:	200000f0 	.word	0x200000f0

08000a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <HAL_GetTick+0x14>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	200000f0 	.word	0x200000f0

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	db0b      	blt.n	8000b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 021f 	and.w	r2, r3, #31
 8000b00:	4907      	ldr	r1, [pc, #28]	; (8000b20 <__NVIC_EnableIRQ+0x38>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	095b      	lsrs	r3, r3, #5
 8000b08:	2001      	movs	r0, #1
 8000b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000e100 	.word	0xe000e100

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	; (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	; (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	; 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf0:	d301      	bcc.n	8000bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00f      	b.n	8000c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <SysTick_Config+0x40>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfe:	210f      	movs	r1, #15
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f7ff ff8e 	bl	8000b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <SysTick_Config+0x40>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <SysTick_Config+0x40>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ff29 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
 8000c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c4c:	f7ff ff3e 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	68b9      	ldr	r1, [r7, #8]
 8000c56:	6978      	ldr	r0, [r7, #20]
 8000c58:	f7ff ff8e 	bl	8000b78 <NVIC_EncodePriority>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff5d 	bl	8000b24 <__NVIC_SetPriority>
}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff31 	bl	8000ae8 <__NVIC_EnableIRQ>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff ffa2 	bl	8000be0 <SysTick_Config>
 8000c9c:	4603      	mov	r3, r0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b084      	sub	sp, #16
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000cb4:	f7ff feda 	bl	8000a6c <HAL_GetTick>
 8000cb8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d008      	beq.n	8000cd8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2280      	movs	r2, #128	; 0x80
 8000cca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e052      	b.n	8000d7e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f022 0216 	bic.w	r2, r2, #22
 8000ce6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	695a      	ldr	r2, [r3, #20]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cf6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d103      	bne.n	8000d08 <HAL_DMA_Abort+0x62>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d007      	beq.n	8000d18 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f022 0208 	bic.w	r2, r2, #8
 8000d16:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f022 0201 	bic.w	r2, r2, #1
 8000d26:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d28:	e013      	b.n	8000d52 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d2a:	f7ff fe9f 	bl	8000a6c <HAL_GetTick>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	2b05      	cmp	r3, #5
 8000d36:	d90c      	bls.n	8000d52 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2220      	movs	r2, #32
 8000d3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2203      	movs	r2, #3
 8000d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e015      	b.n	8000d7e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1e4      	bne.n	8000d2a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d64:	223f      	movs	r2, #63	; 0x3f
 8000d66:	409a      	lsls	r2, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d004      	beq.n	8000da4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e00c      	b.n	8000dbe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2205      	movs	r2, #5
 8000da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f022 0201 	bic.w	r2, r2, #1
 8000dba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000dde:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <HAL_FLASH_Program+0xa0>)
 8000de0:	7e1b      	ldrb	r3, [r3, #24]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d101      	bne.n	8000dea <HAL_FLASH_Program+0x1e>
 8000de6:	2302      	movs	r3, #2
 8000de8:	e03b      	b.n	8000e62 <HAL_FLASH_Program+0x96>
 8000dea:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <HAL_FLASH_Program+0xa0>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000df0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000df4:	f000 f870 	bl	8000ed8 <FLASH_WaitForLastOperation>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8000dfc:	7dfb      	ldrb	r3, [r7, #23]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d12b      	bne.n	8000e5a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d105      	bne.n	8000e14 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000e08:	783b      	ldrb	r3, [r7, #0]
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	68b8      	ldr	r0, [r7, #8]
 8000e0e:	f000 f91b 	bl	8001048 <FLASH_Program_Byte>
 8000e12:	e016      	b.n	8000e42 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d105      	bne.n	8000e26 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000e1a:	883b      	ldrh	r3, [r7, #0]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	68b8      	ldr	r0, [r7, #8]
 8000e20:	f000 f8ee 	bl	8001000 <FLASH_Program_HalfWord>
 8000e24:	e00d      	b.n	8000e42 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d105      	bne.n	8000e38 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	4619      	mov	r1, r3
 8000e30:	68b8      	ldr	r0, [r7, #8]
 8000e32:	f000 f8c3 	bl	8000fbc <FLASH_Program_Word>
 8000e36:	e004      	b.n	8000e42 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8000e38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000e3c:	68b8      	ldr	r0, [r7, #8]
 8000e3e:	f000 f88b 	bl	8000f58 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e42:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e46:	f000 f847 	bl	8000ed8 <FLASH_WaitForLastOperation>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_FLASH_Program+0xa4>)
 8000e50:	691b      	ldr	r3, [r3, #16]
 8000e52:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <HAL_FLASH_Program+0xa4>)
 8000e54:	f023 0301 	bic.w	r3, r3, #1
 8000e58:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000e5a:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <HAL_FLASH_Program+0xa0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8000e60:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3718      	adds	r7, #24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200000f4 	.word	0x200000f4
 8000e70:	40023c00 	.word	0x40023c00

08000e74 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_FLASH_Unlock+0x38>)
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	da0b      	bge.n	8000e9e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_FLASH_Unlock+0x38>)
 8000e88:	4a09      	ldr	r2, [pc, #36]	; (8000eb0 <HAL_FLASH_Unlock+0x3c>)
 8000e8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <HAL_FLASH_Unlock+0x38>)
 8000e8e:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <HAL_FLASH_Unlock+0x40>)
 8000e90:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_FLASH_Unlock+0x38>)
 8000e94:	691b      	ldr	r3, [r3, #16]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	da01      	bge.n	8000e9e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	40023c00 	.word	0x40023c00
 8000eb0:	45670123 	.word	0x45670123
 8000eb4:	cdef89ab 	.word	0xcdef89ab

08000eb8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <HAL_FLASH_Lock+0x1c>)
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_FLASH_Lock+0x1c>)
 8000ec2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ec6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	40023c00 	.word	0x40023c00

08000ed8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <FLASH_WaitForLastOperation+0x78>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8000eea:	f7ff fdbf 	bl	8000a6c <HAL_GetTick>
 8000eee:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000ef0:	e010      	b.n	8000f14 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef8:	d00c      	beq.n	8000f14 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d007      	beq.n	8000f10 <FLASH_WaitForLastOperation+0x38>
 8000f00:	f7ff fdb4 	bl	8000a6c <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d201      	bcs.n	8000f14 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e019      	b.n	8000f48 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <FLASH_WaitForLastOperation+0x7c>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1e8      	bne.n	8000ef2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <FLASH_WaitForLastOperation+0x7c>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d002      	beq.n	8000f32 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <FLASH_WaitForLastOperation+0x7c>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <FLASH_WaitForLastOperation+0x7c>)
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000f3e:	f000 f8a5 	bl	800108c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
  
}  
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	200000f4 	.word	0x200000f4
 8000f54:	40023c00 	.word	0x40023c00

08000f58 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <FLASH_Program_DoubleWord+0x60>)
 8000f66:	691b      	ldr	r3, [r3, #16]
 8000f68:	4a13      	ldr	r2, [pc, #76]	; (8000fb8 <FLASH_Program_DoubleWord+0x60>)
 8000f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000f6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <FLASH_Program_DoubleWord+0x60>)
 8000f72:	691b      	ldr	r3, [r3, #16]
 8000f74:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <FLASH_Program_DoubleWord+0x60>)
 8000f76:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000f7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <FLASH_Program_DoubleWord+0x60>)
 8000f7e:	691b      	ldr	r3, [r3, #16]
 8000f80:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <FLASH_Program_DoubleWord+0x60>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8000f8e:	f3bf 8f6f 	isb	sy
}
 8000f92:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8000f94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	000a      	movs	r2, r1
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	68f9      	ldr	r1, [r7, #12]
 8000fa6:	3104      	adds	r1, #4
 8000fa8:	4613      	mov	r3, r2
 8000faa:	600b      	str	r3, [r1, #0]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	40023c00 	.word	0x40023c00

08000fbc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <FLASH_Program_Word+0x40>)
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <FLASH_Program_Word+0x40>)
 8000fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fd0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8000fd2:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <FLASH_Program_Word+0x40>)
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	4a09      	ldr	r2, [pc, #36]	; (8000ffc <FLASH_Program_Word+0x40>)
 8000fd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fdc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <FLASH_Program_Word+0x40>)
 8000fe0:	691b      	ldr	r3, [r3, #16]
 8000fe2:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <FLASH_Program_Word+0x40>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	683a      	ldr	r2, [r7, #0]
 8000fee:	601a      	str	r2, [r3, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	40023c00 	.word	0x40023c00

08001000 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800100c:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <FLASH_Program_HalfWord+0x44>)
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	4a0c      	ldr	r2, [pc, #48]	; (8001044 <FLASH_Program_HalfWord+0x44>)
 8001012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001016:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <FLASH_Program_HalfWord+0x44>)
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	4a09      	ldr	r2, [pc, #36]	; (8001044 <FLASH_Program_HalfWord+0x44>)
 800101e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001022:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001024:	4b07      	ldr	r3, [pc, #28]	; (8001044 <FLASH_Program_HalfWord+0x44>)
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <FLASH_Program_HalfWord+0x44>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	887a      	ldrh	r2, [r7, #2]
 8001034:	801a      	strh	r2, [r3, #0]
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40023c00 	.word	0x40023c00

08001048 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <FLASH_Program_Byte+0x40>)
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <FLASH_Program_Byte+0x40>)
 800105a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800105e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <FLASH_Program_Byte+0x40>)
 8001062:	4a09      	ldr	r2, [pc, #36]	; (8001088 <FLASH_Program_Byte+0x40>)
 8001064:	691b      	ldr	r3, [r3, #16]
 8001066:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <FLASH_Program_Byte+0x40>)
 800106a:	691b      	ldr	r3, [r3, #16]
 800106c:	4a06      	ldr	r2, [pc, #24]	; (8001088 <FLASH_Program_Byte+0x40>)
 800106e:	f043 0301 	orr.w	r3, r3, #1
 8001072:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	78fa      	ldrb	r2, [r7, #3]
 8001078:	701a      	strb	r2, [r3, #0]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40023c00 	.word	0x40023c00

0800108c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001090:	4b2f      	ldr	r3, [pc, #188]	; (8001150 <FLASH_SetErrorCode+0xc4>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	f003 0310 	and.w	r3, r3, #16
 8001098:	2b00      	cmp	r3, #0
 800109a:	d008      	beq.n	80010ae <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800109c:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <FLASH_SetErrorCode+0xc8>)
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	f043 0310 	orr.w	r3, r3, #16
 80010a4:	4a2b      	ldr	r2, [pc, #172]	; (8001154 <FLASH_SetErrorCode+0xc8>)
 80010a6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80010a8:	4b29      	ldr	r3, [pc, #164]	; (8001150 <FLASH_SetErrorCode+0xc4>)
 80010aa:	2210      	movs	r2, #16
 80010ac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80010ae:	4b28      	ldr	r3, [pc, #160]	; (8001150 <FLASH_SetErrorCode+0xc4>)
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	f003 0320 	and.w	r3, r3, #32
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d008      	beq.n	80010cc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <FLASH_SetErrorCode+0xc8>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f043 0308 	orr.w	r3, r3, #8
 80010c2:	4a24      	ldr	r2, [pc, #144]	; (8001154 <FLASH_SetErrorCode+0xc8>)
 80010c4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80010c6:	4b22      	ldr	r3, [pc, #136]	; (8001150 <FLASH_SetErrorCode+0xc4>)
 80010c8:	2220      	movs	r2, #32
 80010ca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80010cc:	4b20      	ldr	r3, [pc, #128]	; (8001150 <FLASH_SetErrorCode+0xc4>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d008      	beq.n	80010ea <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <FLASH_SetErrorCode+0xc8>)
 80010da:	69db      	ldr	r3, [r3, #28]
 80010dc:	f043 0304 	orr.w	r3, r3, #4
 80010e0:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <FLASH_SetErrorCode+0xc8>)
 80010e2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <FLASH_SetErrorCode+0xc4>)
 80010e6:	2240      	movs	r2, #64	; 0x40
 80010e8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <FLASH_SetErrorCode+0xc4>)
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d008      	beq.n	8001108 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <FLASH_SetErrorCode+0xc8>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	f043 0302 	orr.w	r3, r3, #2
 80010fe:	4a15      	ldr	r2, [pc, #84]	; (8001154 <FLASH_SetErrorCode+0xc8>)
 8001100:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <FLASH_SetErrorCode+0xc4>)
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <FLASH_SetErrorCode+0xc4>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001110:	2b00      	cmp	r3, #0
 8001112:	d009      	beq.n	8001128 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <FLASH_SetErrorCode+0xc8>)
 8001116:	69db      	ldr	r3, [r3, #28]
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <FLASH_SetErrorCode+0xc8>)
 800111e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <FLASH_SetErrorCode+0xc4>)
 8001122:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001126:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <FLASH_SetErrorCode+0xc4>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d008      	beq.n	8001146 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <FLASH_SetErrorCode+0xc8>)
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	f043 0320 	orr.w	r3, r3, #32
 800113c:	4a05      	ldr	r2, [pc, #20]	; (8001154 <FLASH_SetErrorCode+0xc8>)
 800113e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <FLASH_SetErrorCode+0xc4>)
 8001142:	2202      	movs	r2, #2
 8001144:	60da      	str	r2, [r3, #12]
  }
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	40023c00 	.word	0x40023c00
 8001154:	200000f4 	.word	0x200000f4

08001158 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800116a:	4b31      	ldr	r3, [pc, #196]	; (8001230 <HAL_FLASHEx_Erase+0xd8>)
 800116c:	7e1b      	ldrb	r3, [r3, #24]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d101      	bne.n	8001176 <HAL_FLASHEx_Erase+0x1e>
 8001172:	2302      	movs	r3, #2
 8001174:	e058      	b.n	8001228 <HAL_FLASHEx_Erase+0xd0>
 8001176:	4b2e      	ldr	r3, [pc, #184]	; (8001230 <HAL_FLASHEx_Erase+0xd8>)
 8001178:	2201      	movs	r2, #1
 800117a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800117c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001180:	f7ff feaa 	bl	8000ed8 <FLASH_WaitForLastOperation>
 8001184:	4603      	mov	r3, r0
 8001186:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d148      	bne.n	8001220 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d115      	bne.n	80011ca <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4619      	mov	r1, r3
 80011aa:	4610      	mov	r0, r2
 80011ac:	f000 f844 	bl	8001238 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011b4:	f7ff fe90 	bl	8000ed8 <FLASH_WaitForLastOperation>
 80011b8:	4603      	mov	r3, r0
 80011ba:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <HAL_FLASHEx_Erase+0xdc>)
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <HAL_FLASHEx_Erase+0xdc>)
 80011c2:	f023 0304 	bic.w	r3, r3, #4
 80011c6:	6113      	str	r3, [r2, #16]
 80011c8:	e028      	b.n	800121c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	e01c      	b.n	800120c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	4619      	mov	r1, r3
 80011da:	68b8      	ldr	r0, [r7, #8]
 80011dc:	f000 f850 	bl	8001280 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011e4:	f7ff fe78 	bl	8000ed8 <FLASH_WaitForLastOperation>
 80011e8:	4603      	mov	r3, r0
 80011ea:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_FLASHEx_Erase+0xdc>)
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	4a10      	ldr	r2, [pc, #64]	; (8001234 <HAL_FLASHEx_Erase+0xdc>)
 80011f2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80011f6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	68ba      	ldr	r2, [r7, #8]
 8001202:	601a      	str	r2, [r3, #0]
          break;
 8001204:	e00a      	b.n	800121c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	3301      	adds	r3, #1
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68da      	ldr	r2, [r3, #12]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	4413      	add	r3, r2
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	429a      	cmp	r2, r3
 800121a:	d3da      	bcc.n	80011d2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800121c:	f000 f878 	bl	8001310 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <HAL_FLASHEx_Erase+0xd8>)
 8001222:	2200      	movs	r2, #0
 8001224:	761a      	strb	r2, [r3, #24]

  return status;
 8001226:	7bfb      	ldrb	r3, [r7, #15]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200000f4 	.word	0x200000f4
 8001234:	40023c00 	.word	0x40023c00

08001238 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001244:	4b0d      	ldr	r3, [pc, #52]	; (800127c <FLASH_MassErase+0x44>)
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	4a0c      	ldr	r2, [pc, #48]	; (800127c <FLASH_MassErase+0x44>)
 800124a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800124e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <FLASH_MassErase+0x44>)
 8001252:	691b      	ldr	r3, [r3, #16]
 8001254:	4a09      	ldr	r2, [pc, #36]	; (800127c <FLASH_MassErase+0x44>)
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <FLASH_MassErase+0x44>)
 800125e:	691a      	ldr	r2, [r3, #16]
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	4313      	orrs	r3, r2
 8001266:	4a05      	ldr	r2, [pc, #20]	; (800127c <FLASH_MassErase+0x44>)
 8001268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126c:	6113      	str	r3, [r2, #16]
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40023c00 	.word	0x40023c00

08001280 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d102      	bne.n	800129c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	e010      	b.n	80012be <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800129c:	78fb      	ldrb	r3, [r7, #3]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d103      	bne.n	80012aa <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80012a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	e009      	b.n	80012be <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80012aa:	78fb      	ldrb	r3, [r7, #3]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d103      	bne.n	80012b8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80012b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	e002      	b.n	80012be <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80012b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012bc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80012be:	4b13      	ldr	r3, [pc, #76]	; (800130c <FLASH_Erase_Sector+0x8c>)
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <FLASH_Erase_Sector+0x8c>)
 80012c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <FLASH_Erase_Sector+0x8c>)
 80012cc:	691a      	ldr	r2, [r3, #16]
 80012ce:	490f      	ldr	r1, [pc, #60]	; (800130c <FLASH_Erase_Sector+0x8c>)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80012d6:	4b0d      	ldr	r3, [pc, #52]	; (800130c <FLASH_Erase_Sector+0x8c>)
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	4a0c      	ldr	r2, [pc, #48]	; (800130c <FLASH_Erase_Sector+0x8c>)
 80012dc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80012e2:	4b0a      	ldr	r3, [pc, #40]	; (800130c <FLASH_Erase_Sector+0x8c>)
 80012e4:	691a      	ldr	r2, [r3, #16]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	4313      	orrs	r3, r2
 80012ec:	4a07      	ldr	r2, [pc, #28]	; (800130c <FLASH_Erase_Sector+0x8c>)
 80012ee:	f043 0302 	orr.w	r3, r3, #2
 80012f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <FLASH_Erase_Sector+0x8c>)
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	4a04      	ldr	r2, [pc, #16]	; (800130c <FLASH_Erase_Sector+0x8c>)
 80012fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012fe:	6113      	str	r3, [r2, #16]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	40023c00 	.word	0x40023c00

08001310 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001314:	4b20      	ldr	r3, [pc, #128]	; (8001398 <FLASH_FlushCaches+0x88>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800131c:	2b00      	cmp	r3, #0
 800131e:	d017      	beq.n	8001350 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <FLASH_FlushCaches+0x88>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <FLASH_FlushCaches+0x88>)
 8001326:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800132a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <FLASH_FlushCaches+0x88>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a19      	ldr	r2, [pc, #100]	; (8001398 <FLASH_FlushCaches+0x88>)
 8001332:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	4b17      	ldr	r3, [pc, #92]	; (8001398 <FLASH_FlushCaches+0x88>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a16      	ldr	r2, [pc, #88]	; (8001398 <FLASH_FlushCaches+0x88>)
 800133e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001342:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <FLASH_FlushCaches+0x88>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a13      	ldr	r2, [pc, #76]	; (8001398 <FLASH_FlushCaches+0x88>)
 800134a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800134e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <FLASH_FlushCaches+0x88>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001358:	2b00      	cmp	r3, #0
 800135a:	d017      	beq.n	800138c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800135c:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <FLASH_FlushCaches+0x88>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0d      	ldr	r2, [pc, #52]	; (8001398 <FLASH_FlushCaches+0x88>)
 8001362:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001366:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <FLASH_FlushCaches+0x88>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <FLASH_FlushCaches+0x88>)
 800136e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <FLASH_FlushCaches+0x88>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a07      	ldr	r2, [pc, #28]	; (8001398 <FLASH_FlushCaches+0x88>)
 800137a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800137e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <FLASH_FlushCaches+0x88>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <FLASH_FlushCaches+0x88>)
 8001386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800138a:	6013      	str	r3, [r2, #0]
  }
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023c00 	.word	0x40023c00

0800139c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800139c:	b480      	push	{r7}
 800139e:	b089      	sub	sp, #36	; 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
 80013b6:	e165      	b.n	8001684 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b8:	2201      	movs	r2, #1
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	f040 8154 	bne.w	800167e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0303 	and.w	r3, r3, #3
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d005      	beq.n	80013ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d130      	bne.n	8001450 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	2203      	movs	r2, #3
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43db      	mvns	r3, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4013      	ands	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	68da      	ldr	r2, [r3, #12]
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001424:	2201      	movs	r2, #1
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4013      	ands	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	091b      	lsrs	r3, r3, #4
 800143a:	f003 0201 	and.w	r2, r3, #1
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	2b03      	cmp	r3, #3
 800145a:	d017      	beq.n	800148c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	2203      	movs	r2, #3
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d123      	bne.n	80014e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	08da      	lsrs	r2, r3, #3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3208      	adds	r2, #8
 80014a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	220f      	movs	r2, #15
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	691a      	ldr	r2, [r3, #16]
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	08da      	lsrs	r2, r3, #3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	3208      	adds	r2, #8
 80014da:	69b9      	ldr	r1, [r7, #24]
 80014dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	2203      	movs	r2, #3
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 0203 	and.w	r2, r3, #3
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 80ae 	beq.w	800167e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b5d      	ldr	r3, [pc, #372]	; (800169c <HAL_GPIO_Init+0x300>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	4a5c      	ldr	r2, [pc, #368]	; (800169c <HAL_GPIO_Init+0x300>)
 800152c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001530:	6453      	str	r3, [r2, #68]	; 0x44
 8001532:	4b5a      	ldr	r3, [pc, #360]	; (800169c <HAL_GPIO_Init+0x300>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800153e:	4a58      	ldr	r2, [pc, #352]	; (80016a0 <HAL_GPIO_Init+0x304>)
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	089b      	lsrs	r3, r3, #2
 8001544:	3302      	adds	r3, #2
 8001546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	220f      	movs	r2, #15
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4f      	ldr	r2, [pc, #316]	; (80016a4 <HAL_GPIO_Init+0x308>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d025      	beq.n	80015b6 <HAL_GPIO_Init+0x21a>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4e      	ldr	r2, [pc, #312]	; (80016a8 <HAL_GPIO_Init+0x30c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d01f      	beq.n	80015b2 <HAL_GPIO_Init+0x216>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4d      	ldr	r2, [pc, #308]	; (80016ac <HAL_GPIO_Init+0x310>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d019      	beq.n	80015ae <HAL_GPIO_Init+0x212>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4c      	ldr	r2, [pc, #304]	; (80016b0 <HAL_GPIO_Init+0x314>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d013      	beq.n	80015aa <HAL_GPIO_Init+0x20e>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4b      	ldr	r2, [pc, #300]	; (80016b4 <HAL_GPIO_Init+0x318>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d00d      	beq.n	80015a6 <HAL_GPIO_Init+0x20a>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4a      	ldr	r2, [pc, #296]	; (80016b8 <HAL_GPIO_Init+0x31c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d007      	beq.n	80015a2 <HAL_GPIO_Init+0x206>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a49      	ldr	r2, [pc, #292]	; (80016bc <HAL_GPIO_Init+0x320>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d101      	bne.n	800159e <HAL_GPIO_Init+0x202>
 800159a:	2306      	movs	r3, #6
 800159c:	e00c      	b.n	80015b8 <HAL_GPIO_Init+0x21c>
 800159e:	2307      	movs	r3, #7
 80015a0:	e00a      	b.n	80015b8 <HAL_GPIO_Init+0x21c>
 80015a2:	2305      	movs	r3, #5
 80015a4:	e008      	b.n	80015b8 <HAL_GPIO_Init+0x21c>
 80015a6:	2304      	movs	r3, #4
 80015a8:	e006      	b.n	80015b8 <HAL_GPIO_Init+0x21c>
 80015aa:	2303      	movs	r3, #3
 80015ac:	e004      	b.n	80015b8 <HAL_GPIO_Init+0x21c>
 80015ae:	2302      	movs	r3, #2
 80015b0:	e002      	b.n	80015b8 <HAL_GPIO_Init+0x21c>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <HAL_GPIO_Init+0x21c>
 80015b6:	2300      	movs	r3, #0
 80015b8:	69fa      	ldr	r2, [r7, #28]
 80015ba:	f002 0203 	and.w	r2, r2, #3
 80015be:	0092      	lsls	r2, r2, #2
 80015c0:	4093      	lsls	r3, r2
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015c8:	4935      	ldr	r1, [pc, #212]	; (80016a0 <HAL_GPIO_Init+0x304>)
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	089b      	lsrs	r3, r3, #2
 80015ce:	3302      	adds	r3, #2
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015d6:	4b3a      	ldr	r3, [pc, #232]	; (80016c0 <HAL_GPIO_Init+0x324>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015fa:	4a31      	ldr	r2, [pc, #196]	; (80016c0 <HAL_GPIO_Init+0x324>)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001600:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <HAL_GPIO_Init+0x324>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001624:	4a26      	ldr	r2, [pc, #152]	; (80016c0 <HAL_GPIO_Init+0x324>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800162a:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <HAL_GPIO_Init+0x324>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800164e:	4a1c      	ldr	r2, [pc, #112]	; (80016c0 <HAL_GPIO_Init+0x324>)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001654:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <HAL_GPIO_Init+0x324>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001678:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <HAL_GPIO_Init+0x324>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3301      	adds	r3, #1
 8001682:	61fb      	str	r3, [r7, #28]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	2b0f      	cmp	r3, #15
 8001688:	f67f ae96 	bls.w	80013b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3724      	adds	r7, #36	; 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800
 80016a0:	40013800 	.word	0x40013800
 80016a4:	40020000 	.word	0x40020000
 80016a8:	40020400 	.word	0x40020400
 80016ac:	40020800 	.word	0x40020800
 80016b0:	40020c00 	.word	0x40020c00
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40021400 	.word	0x40021400
 80016bc:	40021800 	.word	0x40021800
 80016c0:	40013c00 	.word	0x40013c00

080016c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	807b      	strh	r3, [r7, #2]
 80016d0:	4613      	mov	r3, r2
 80016d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d4:	787b      	ldrb	r3, [r7, #1]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016da:	887a      	ldrh	r2, [r7, #2]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016e0:	e003      	b.n	80016ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016e2:	887b      	ldrh	r3, [r7, #2]
 80016e4:	041a      	lsls	r2, r3, #16
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	619a      	str	r2, [r3, #24]
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	4b20      	ldr	r3, [pc, #128]	; (8001788 <HAL_PWREx_EnableOverDrive+0x90>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a1f      	ldr	r2, [pc, #124]	; (8001788 <HAL_PWREx_EnableOverDrive+0x90>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <HAL_PWREx_EnableOverDrive+0x90>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800171e:	4b1b      	ldr	r3, [pc, #108]	; (800178c <HAL_PWREx_EnableOverDrive+0x94>)
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001724:	f7ff f9a2 	bl	8000a6c <HAL_GetTick>
 8001728:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800172a:	e009      	b.n	8001740 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800172c:	f7ff f99e 	bl	8000a6c <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800173a:	d901      	bls.n	8001740 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e01f      	b.n	8001780 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001740:	4b13      	ldr	r3, [pc, #76]	; (8001790 <HAL_PWREx_EnableOverDrive+0x98>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800174c:	d1ee      	bne.n	800172c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001750:	2201      	movs	r2, #1
 8001752:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001754:	f7ff f98a 	bl	8000a6c <HAL_GetTick>
 8001758:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800175a:	e009      	b.n	8001770 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800175c:	f7ff f986 	bl	8000a6c <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800176a:	d901      	bls.n	8001770 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e007      	b.n	8001780 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001770:	4b07      	ldr	r3, [pc, #28]	; (8001790 <HAL_PWREx_EnableOverDrive+0x98>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001778:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800177c:	d1ee      	bne.n	800175c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40023800 	.word	0x40023800
 800178c:	420e0040 	.word	0x420e0040
 8001790:	40007000 	.word	0x40007000
 8001794:	420e0044 	.word	0x420e0044

08001798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0cc      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017ac:	4b68      	ldr	r3, [pc, #416]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 030f 	and.w	r3, r3, #15
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d90c      	bls.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ba:	4b65      	ldr	r3, [pc, #404]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c2:	4b63      	ldr	r3, [pc, #396]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d001      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0b8      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d020      	beq.n	8001822 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ec:	4b59      	ldr	r3, [pc, #356]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4a58      	ldr	r2, [pc, #352]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001804:	4b53      	ldr	r3, [pc, #332]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	4a52      	ldr	r2, [pc, #328]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800180e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001810:	4b50      	ldr	r3, [pc, #320]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	494d      	ldr	r1, [pc, #308]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d044      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001836:	4b47      	ldr	r3, [pc, #284]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d119      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e07f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d003      	beq.n	8001856 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001852:	2b03      	cmp	r3, #3
 8001854:	d107      	bne.n	8001866 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001856:	4b3f      	ldr	r3, [pc, #252]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e06f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001866:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e067      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001876:	4b37      	ldr	r3, [pc, #220]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f023 0203 	bic.w	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4934      	ldr	r1, [pc, #208]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	4313      	orrs	r3, r2
 8001886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001888:	f7ff f8f0 	bl	8000a6c <HAL_GetTick>
 800188c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001890:	f7ff f8ec 	bl	8000a6c <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f241 3288 	movw	r2, #5000	; 0x1388
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e04f      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a6:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 020c 	and.w	r2, r3, #12
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d1eb      	bne.n	8001890 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018b8:	4b25      	ldr	r3, [pc, #148]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 030f 	and.w	r3, r3, #15
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d20c      	bcs.n	80018e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b22      	ldr	r3, [pc, #136]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b20      	ldr	r3, [pc, #128]	; (8001950 <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e032      	b.n	8001946 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0304 	and.w	r3, r3, #4
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d008      	beq.n	80018fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ec:	4b19      	ldr	r3, [pc, #100]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	4916      	ldr	r1, [pc, #88]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	490e      	ldr	r1, [pc, #56]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	4313      	orrs	r3, r2
 800191c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800191e:	f000 f855 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 8001922:	4602      	mov	r2, r0
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	490a      	ldr	r1, [pc, #40]	; (8001958 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	5ccb      	ldrb	r3, [r1, r3]
 8001932:	fa22 f303 	lsr.w	r3, r2, r3
 8001936:	4a09      	ldr	r2, [pc, #36]	; (800195c <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_RCC_ClockConfig+0x1c8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f850 	bl	80009e4 <HAL_InitTick>

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023c00 	.word	0x40023c00
 8001954:	40023800 	.word	0x40023800
 8001958:	0800354c 	.word	0x0800354c
 800195c:	20000000 	.word	0x20000000
 8001960:	20000004 	.word	0x20000004

08001964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <HAL_RCC_GetHCLKFreq+0x14>)
 800196a:	681b      	ldr	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000000 	.word	0x20000000

0800197c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001980:	f7ff fff0 	bl	8001964 <HAL_RCC_GetHCLKFreq>
 8001984:	4602      	mov	r2, r0
 8001986:	4b05      	ldr	r3, [pc, #20]	; (800199c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	0a9b      	lsrs	r3, r3, #10
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	4903      	ldr	r1, [pc, #12]	; (80019a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001992:	5ccb      	ldrb	r3, [r1, r3]
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001998:	4618      	mov	r0, r3
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40023800 	.word	0x40023800
 80019a0:	0800355c 	.word	0x0800355c

080019a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80019a8:	f7ff ffdc 	bl	8001964 <HAL_RCC_GetHCLKFreq>
 80019ac:	4602      	mov	r2, r0
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	0b5b      	lsrs	r3, r3, #13
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	4903      	ldr	r1, [pc, #12]	; (80019c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ba:	5ccb      	ldrb	r3, [r1, r3]
 80019bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40023800 	.word	0x40023800
 80019c8:	0800355c 	.word	0x0800355c

080019cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019d0:	b088      	sub	sp, #32
 80019d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019e8:	4bce      	ldr	r3, [pc, #824]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x358>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b0c      	cmp	r3, #12
 80019f2:	f200 818d 	bhi.w	8001d10 <HAL_RCC_GetSysClockFreq+0x344>
 80019f6:	a201      	add	r2, pc, #4	; (adr r2, 80019fc <HAL_RCC_GetSysClockFreq+0x30>)
 80019f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fc:	08001a31 	.word	0x08001a31
 8001a00:	08001d11 	.word	0x08001d11
 8001a04:	08001d11 	.word	0x08001d11
 8001a08:	08001d11 	.word	0x08001d11
 8001a0c:	08001a37 	.word	0x08001a37
 8001a10:	08001d11 	.word	0x08001d11
 8001a14:	08001d11 	.word	0x08001d11
 8001a18:	08001d11 	.word	0x08001d11
 8001a1c:	08001a3d 	.word	0x08001a3d
 8001a20:	08001d11 	.word	0x08001d11
 8001a24:	08001d11 	.word	0x08001d11
 8001a28:	08001d11 	.word	0x08001d11
 8001a2c:	08001bb1 	.word	0x08001bb1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a30:	4bbd      	ldr	r3, [pc, #756]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001a32:	61bb      	str	r3, [r7, #24]
       break;
 8001a34:	e16f      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a36:	4bbd      	ldr	r3, [pc, #756]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x360>)
 8001a38:	61bb      	str	r3, [r7, #24]
      break;
 8001a3a:	e16c      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a3c:	4bb9      	ldr	r3, [pc, #740]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a44:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a46:	4bb7      	ldr	r3, [pc, #732]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d053      	beq.n	8001afa <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a52:	4bb4      	ldr	r3, [pc, #720]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	099b      	lsrs	r3, r3, #6
 8001a58:	461a      	mov	r2, r3
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a62:	f04f 0100 	mov.w	r1, #0
 8001a66:	ea02 0400 	and.w	r4, r2, r0
 8001a6a:	603c      	str	r4, [r7, #0]
 8001a6c:	400b      	ands	r3, r1
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a74:	4620      	mov	r0, r4
 8001a76:	4629      	mov	r1, r5
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	014b      	lsls	r3, r1, #5
 8001a82:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a86:	0142      	lsls	r2, r0, #5
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4623      	mov	r3, r4
 8001a8e:	1ac0      	subs	r0, r0, r3
 8001a90:	462b      	mov	r3, r5
 8001a92:	eb61 0103 	sbc.w	r1, r1, r3
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	018b      	lsls	r3, r1, #6
 8001aa0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001aa4:	0182      	lsls	r2, r0, #6
 8001aa6:	1a12      	subs	r2, r2, r0
 8001aa8:	eb63 0301 	sbc.w	r3, r3, r1
 8001aac:	f04f 0000 	mov.w	r0, #0
 8001ab0:	f04f 0100 	mov.w	r1, #0
 8001ab4:	00d9      	lsls	r1, r3, #3
 8001ab6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001aba:	00d0      	lsls	r0, r2, #3
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4621      	mov	r1, r4
 8001ac2:	1852      	adds	r2, r2, r1
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	eb43 0101 	adc.w	r1, r3, r1
 8001aca:	460b      	mov	r3, r1
 8001acc:	f04f 0000 	mov.w	r0, #0
 8001ad0:	f04f 0100 	mov.w	r1, #0
 8001ad4:	0259      	lsls	r1, r3, #9
 8001ad6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ada:	0250      	lsls	r0, r2, #9
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	f7fe fb8a 	bl	8000204 <__aeabi_uldivmod>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4613      	mov	r3, r2
 8001af6:	61fb      	str	r3, [r7, #28]
 8001af8:	e04c      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001afa:	4b8a      	ldr	r3, [pc, #552]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x358>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	099b      	lsrs	r3, r3, #6
 8001b00:	461a      	mov	r2, r3
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b0a:	f04f 0100 	mov.w	r1, #0
 8001b0e:	ea02 0a00 	and.w	sl, r2, r0
 8001b12:	ea03 0b01 	and.w	fp, r3, r1
 8001b16:	4650      	mov	r0, sl
 8001b18:	4659      	mov	r1, fp
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	014b      	lsls	r3, r1, #5
 8001b24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b28:	0142      	lsls	r2, r0, #5
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	ebb0 000a 	subs.w	r0, r0, sl
 8001b32:	eb61 010b 	sbc.w	r1, r1, fp
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	f04f 0300 	mov.w	r3, #0
 8001b3e:	018b      	lsls	r3, r1, #6
 8001b40:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b44:	0182      	lsls	r2, r0, #6
 8001b46:	1a12      	subs	r2, r2, r0
 8001b48:	eb63 0301 	sbc.w	r3, r3, r1
 8001b4c:	f04f 0000 	mov.w	r0, #0
 8001b50:	f04f 0100 	mov.w	r1, #0
 8001b54:	00d9      	lsls	r1, r3, #3
 8001b56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b5a:	00d0      	lsls	r0, r2, #3
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	eb12 020a 	adds.w	r2, r2, sl
 8001b64:	eb43 030b 	adc.w	r3, r3, fp
 8001b68:	f04f 0000 	mov.w	r0, #0
 8001b6c:	f04f 0100 	mov.w	r1, #0
 8001b70:	0299      	lsls	r1, r3, #10
 8001b72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b76:	0290      	lsls	r0, r2, #10
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	461a      	mov	r2, r3
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	f7fe fb3c 	bl	8000204 <__aeabi_uldivmod>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4613      	mov	r3, r2
 8001b92:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b94:	4b63      	ldr	r3, [pc, #396]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x358>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	0c1b      	lsrs	r3, r3, #16
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001ba4:	69fa      	ldr	r2, [r7, #28]
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bac:	61bb      	str	r3, [r7, #24]
      break;
 8001bae:	e0b2      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bb0:	4b5c      	ldr	r3, [pc, #368]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x358>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bba:	4b5a      	ldr	r3, [pc, #360]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x358>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d04d      	beq.n	8001c62 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc6:	4b57      	ldr	r3, [pc, #348]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x358>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	099b      	lsrs	r3, r3, #6
 8001bcc:	461a      	mov	r2, r3
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001bd6:	f04f 0100 	mov.w	r1, #0
 8001bda:	ea02 0800 	and.w	r8, r2, r0
 8001bde:	ea03 0901 	and.w	r9, r3, r1
 8001be2:	4640      	mov	r0, r8
 8001be4:	4649      	mov	r1, r9
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	014b      	lsls	r3, r1, #5
 8001bf0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001bf4:	0142      	lsls	r2, r0, #5
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	ebb0 0008 	subs.w	r0, r0, r8
 8001bfe:	eb61 0109 	sbc.w	r1, r1, r9
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	f04f 0300 	mov.w	r3, #0
 8001c0a:	018b      	lsls	r3, r1, #6
 8001c0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c10:	0182      	lsls	r2, r0, #6
 8001c12:	1a12      	subs	r2, r2, r0
 8001c14:	eb63 0301 	sbc.w	r3, r3, r1
 8001c18:	f04f 0000 	mov.w	r0, #0
 8001c1c:	f04f 0100 	mov.w	r1, #0
 8001c20:	00d9      	lsls	r1, r3, #3
 8001c22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c26:	00d0      	lsls	r0, r2, #3
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	eb12 0208 	adds.w	r2, r2, r8
 8001c30:	eb43 0309 	adc.w	r3, r3, r9
 8001c34:	f04f 0000 	mov.w	r0, #0
 8001c38:	f04f 0100 	mov.w	r1, #0
 8001c3c:	0259      	lsls	r1, r3, #9
 8001c3e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001c42:	0250      	lsls	r0, r2, #9
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	f7fe fad6 	bl	8000204 <__aeabi_uldivmod>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	61fb      	str	r3, [r7, #28]
 8001c60:	e04a      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c62:	4b30      	ldr	r3, [pc, #192]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x358>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	099b      	lsrs	r3, r3, #6
 8001c68:	461a      	mov	r2, r3
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c72:	f04f 0100 	mov.w	r1, #0
 8001c76:	ea02 0400 	and.w	r4, r2, r0
 8001c7a:	ea03 0501 	and.w	r5, r3, r1
 8001c7e:	4620      	mov	r0, r4
 8001c80:	4629      	mov	r1, r5
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	014b      	lsls	r3, r1, #5
 8001c8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c90:	0142      	lsls	r2, r0, #5
 8001c92:	4610      	mov	r0, r2
 8001c94:	4619      	mov	r1, r3
 8001c96:	1b00      	subs	r0, r0, r4
 8001c98:	eb61 0105 	sbc.w	r1, r1, r5
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	018b      	lsls	r3, r1, #6
 8001ca6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001caa:	0182      	lsls	r2, r0, #6
 8001cac:	1a12      	subs	r2, r2, r0
 8001cae:	eb63 0301 	sbc.w	r3, r3, r1
 8001cb2:	f04f 0000 	mov.w	r0, #0
 8001cb6:	f04f 0100 	mov.w	r1, #0
 8001cba:	00d9      	lsls	r1, r3, #3
 8001cbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001cc0:	00d0      	lsls	r0, r2, #3
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	1912      	adds	r2, r2, r4
 8001cc8:	eb45 0303 	adc.w	r3, r5, r3
 8001ccc:	f04f 0000 	mov.w	r0, #0
 8001cd0:	f04f 0100 	mov.w	r1, #0
 8001cd4:	0299      	lsls	r1, r3, #10
 8001cd6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001cda:	0290      	lsls	r0, r2, #10
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	f7fe fa8a 	bl	8000204 <__aeabi_uldivmod>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x358>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	0f1b      	lsrs	r3, r3, #28
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d0c:	61bb      	str	r3, [r7, #24]
      break;
 8001d0e:	e002      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d12:	61bb      	str	r3, [r7, #24]
      break;
 8001d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d16:	69bb      	ldr	r3, [r7, #24]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3720      	adds	r7, #32
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800
 8001d28:	00f42400 	.word	0x00f42400
 8001d2c:	007a1200 	.word	0x007a1200

08001d30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e28d      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 8083 	beq.w	8001e56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d50:	4b94      	ldr	r3, [pc, #592]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 030c 	and.w	r3, r3, #12
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d019      	beq.n	8001d90 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d5c:	4b91      	ldr	r3, [pc, #580]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d68:	4b8e      	ldr	r3, [pc, #568]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d74:	d00c      	beq.n	8001d90 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d76:	4b8b      	ldr	r3, [pc, #556]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d7e:	2b0c      	cmp	r3, #12
 8001d80:	d112      	bne.n	8001da8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d82:	4b88      	ldr	r3, [pc, #544]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d8e:	d10b      	bne.n	8001da8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d90:	4b84      	ldr	r3, [pc, #528]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d05b      	beq.n	8001e54 <HAL_RCC_OscConfig+0x124>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d157      	bne.n	8001e54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e25a      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db0:	d106      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x90>
 8001db2:	4b7c      	ldr	r3, [pc, #496]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a7b      	ldr	r2, [pc, #492]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e01d      	b.n	8001dfc <HAL_RCC_OscConfig+0xcc>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0xb4>
 8001dca:	4b76      	ldr	r3, [pc, #472]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a75      	ldr	r2, [pc, #468]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	4b73      	ldr	r3, [pc, #460]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a72      	ldr	r2, [pc, #456]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e00b      	b.n	8001dfc <HAL_RCC_OscConfig+0xcc>
 8001de4:	4b6f      	ldr	r3, [pc, #444]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a6e      	ldr	r2, [pc, #440]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b6c      	ldr	r3, [pc, #432]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a6b      	ldr	r2, [pc, #428]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d013      	beq.n	8001e2c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7fe fe32 	bl	8000a6c <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7fe fe2e 	bl	8000a6c <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	; 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e21f      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1e:	4b61      	ldr	r3, [pc, #388]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0xdc>
 8001e2a:	e014      	b.n	8001e56 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7fe fe1e 	bl	8000a6c <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e34:	f7fe fe1a 	bl	8000a6c <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	; 0x64
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e20b      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e46:	4b57      	ldr	r3, [pc, #348]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x104>
 8001e52:	e000      	b.n	8001e56 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d06f      	beq.n	8001f42 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e62:	4b50      	ldr	r3, [pc, #320]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d017      	beq.n	8001e9e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e6e:	4b4d      	ldr	r3, [pc, #308]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d105      	bne.n	8001e86 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e7a:	4b4a      	ldr	r3, [pc, #296]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00b      	beq.n	8001e9e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e86:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e8e:	2b0c      	cmp	r3, #12
 8001e90:	d11c      	bne.n	8001ecc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e92:	4b44      	ldr	r3, [pc, #272]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d116      	bne.n	8001ecc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9e:	4b41      	ldr	r3, [pc, #260]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d005      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x186>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d001      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e1d3      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb6:	4b3b      	ldr	r3, [pc, #236]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4937      	ldr	r1, [pc, #220]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eca:	e03a      	b.n	8001f42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d020      	beq.n	8001f16 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed4:	4b34      	ldr	r3, [pc, #208]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eda:	f7fe fdc7 	bl	8000a6c <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee2:	f7fe fdc3 	bl	8000a6c <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e1b4      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef4:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f00:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4925      	ldr	r1, [pc, #148]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	600b      	str	r3, [r1, #0]
 8001f14:	e015      	b.n	8001f42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f16:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <HAL_RCC_OscConfig+0x278>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1c:	f7fe fda6 	bl	8000a6c <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f24:	f7fe fda2 	bl	8000a6c <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e193      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f36:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d036      	beq.n	8001fbc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d016      	beq.n	8001f84 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f56:	4b15      	ldr	r3, [pc, #84]	; (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001f58:	2201      	movs	r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5c:	f7fe fd86 	bl	8000a6c <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f64:	f7fe fd82 	bl	8000a6c <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e173      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f76:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x234>
 8001f82:	e01b      	b.n	8001fbc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_RCC_OscConfig+0x27c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8a:	f7fe fd6f 	bl	8000a6c <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f90:	e00e      	b.n	8001fb0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f92:	f7fe fd6b 	bl	8000a6c <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d907      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e15c      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	42470000 	.word	0x42470000
 8001fac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb0:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8001fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1ea      	bne.n	8001f92 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 8097 	beq.w	80020f8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fce:	4b83      	ldr	r3, [pc, #524]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10f      	bne.n	8001ffa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	4b7f      	ldr	r3, [pc, #508]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	4a7e      	ldr	r2, [pc, #504]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8001fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fea:	4b7c      	ldr	r3, [pc, #496]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffa:	4b79      	ldr	r3, [pc, #484]	; (80021e0 <HAL_RCC_OscConfig+0x4b0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d118      	bne.n	8002038 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002006:	4b76      	ldr	r3, [pc, #472]	; (80021e0 <HAL_RCC_OscConfig+0x4b0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a75      	ldr	r2, [pc, #468]	; (80021e0 <HAL_RCC_OscConfig+0x4b0>)
 800200c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002012:	f7fe fd2b 	bl	8000a6c <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201a:	f7fe fd27 	bl	8000a6c <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e118      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202c:	4b6c      	ldr	r3, [pc, #432]	; (80021e0 <HAL_RCC_OscConfig+0x4b0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d106      	bne.n	800204e <HAL_RCC_OscConfig+0x31e>
 8002040:	4b66      	ldr	r3, [pc, #408]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002044:	4a65      	ldr	r2, [pc, #404]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	6713      	str	r3, [r2, #112]	; 0x70
 800204c:	e01c      	b.n	8002088 <HAL_RCC_OscConfig+0x358>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b05      	cmp	r3, #5
 8002054:	d10c      	bne.n	8002070 <HAL_RCC_OscConfig+0x340>
 8002056:	4b61      	ldr	r3, [pc, #388]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205a:	4a60      	ldr	r2, [pc, #384]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 800205c:	f043 0304 	orr.w	r3, r3, #4
 8002060:	6713      	str	r3, [r2, #112]	; 0x70
 8002062:	4b5e      	ldr	r3, [pc, #376]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002066:	4a5d      	ldr	r2, [pc, #372]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6713      	str	r3, [r2, #112]	; 0x70
 800206e:	e00b      	b.n	8002088 <HAL_RCC_OscConfig+0x358>
 8002070:	4b5a      	ldr	r3, [pc, #360]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	4a59      	ldr	r2, [pc, #356]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	6713      	str	r3, [r2, #112]	; 0x70
 800207c:	4b57      	ldr	r3, [pc, #348]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 800207e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002080:	4a56      	ldr	r2, [pc, #344]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002082:	f023 0304 	bic.w	r3, r3, #4
 8002086:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d015      	beq.n	80020bc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002090:	f7fe fcec 	bl	8000a6c <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002096:	e00a      	b.n	80020ae <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002098:	f7fe fce8 	bl	8000a6c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e0d7      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ae:	4b4b      	ldr	r3, [pc, #300]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 80020b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0ee      	beq.n	8002098 <HAL_RCC_OscConfig+0x368>
 80020ba:	e014      	b.n	80020e6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020bc:	f7fe fcd6 	bl	8000a6c <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c2:	e00a      	b.n	80020da <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c4:	f7fe fcd2 	bl	8000a6c <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e0c1      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020da:	4b40      	ldr	r3, [pc, #256]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 80020dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1ee      	bne.n	80020c4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ec:	4b3b      	ldr	r3, [pc, #236]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	4a3a      	ldr	r2, [pc, #232]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 80020f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 80ad 	beq.w	800225c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002102:	4b36      	ldr	r3, [pc, #216]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b08      	cmp	r3, #8
 800210c:	d060      	beq.n	80021d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d145      	bne.n	80021a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002116:	4b33      	ldr	r3, [pc, #204]	; (80021e4 <HAL_RCC_OscConfig+0x4b4>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7fe fca6 	bl	8000a6c <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002124:	f7fe fca2 	bl	8000a6c <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e093      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002136:	4b29      	ldr	r3, [pc, #164]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69da      	ldr	r2, [r3, #28]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	019b      	lsls	r3, r3, #6
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	085b      	lsrs	r3, r3, #1
 800215a:	3b01      	subs	r3, #1
 800215c:	041b      	lsls	r3, r3, #16
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	061b      	lsls	r3, r3, #24
 8002166:	431a      	orrs	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	071b      	lsls	r3, r3, #28
 800216e:	491b      	ldr	r1, [pc, #108]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_RCC_OscConfig+0x4b4>)
 8002176:	2201      	movs	r2, #1
 8002178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217a:	f7fe fc77 	bl	8000a6c <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002182:	f7fe fc73 	bl	8000a6c <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e064      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x452>
 80021a0:	e05c      	b.n	800225c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a2:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <HAL_RCC_OscConfig+0x4b4>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7fe fc60 	bl	8000a6c <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b0:	f7fe fc5c 	bl	8000a6c <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e04d      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c2:	4b06      	ldr	r3, [pc, #24]	; (80021dc <HAL_RCC_OscConfig+0x4ac>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x480>
 80021ce:	e045      	b.n	800225c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d107      	bne.n	80021e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e040      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40007000 	.word	0x40007000
 80021e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021e8:	4b1f      	ldr	r3, [pc, #124]	; (8002268 <HAL_RCC_OscConfig+0x538>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d030      	beq.n	8002258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002200:	429a      	cmp	r2, r3
 8002202:	d129      	bne.n	8002258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d122      	bne.n	8002258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002218:	4013      	ands	r3, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800221e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002220:	4293      	cmp	r3, r2
 8002222:	d119      	bne.n	8002258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222e:	085b      	lsrs	r3, r3, #1
 8002230:	3b01      	subs	r3, #1
 8002232:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002234:	429a      	cmp	r2, r3
 8002236:	d10f      	bne.n	8002258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002244:	429a      	cmp	r2, r3
 8002246:	d107      	bne.n	8002258 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40023800 	.word	0x40023800

0800226c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e03f      	b.n	80022fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d106      	bne.n	8002298 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7fe fad4 	bl	8000840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2224      	movs	r2, #36	; 0x24
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 fc7b 	bl	8002bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	695a      	ldr	r2, [r3, #20]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2220      	movs	r2, #32
 80022f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b0ba      	sub	sp, #232	; 0xe8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800232e:	2300      	movs	r3, #0
 8002330:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002334:	2300      	movs	r3, #0
 8002336:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800233a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002346:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10f      	bne.n	800236e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800234e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	2b00      	cmp	r3, #0
 8002358:	d009      	beq.n	800236e <HAL_UART_IRQHandler+0x66>
 800235a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800235e:	f003 0320 	and.w	r3, r3, #32
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 fb65 	bl	8002a36 <UART_Receive_IT>
      return;
 800236c:	e256      	b.n	800281c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800236e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 80de 	beq.w	8002534 <HAL_UART_IRQHandler+0x22c>
 8002378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	d106      	bne.n	8002392 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002388:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 80d1 	beq.w	8002534 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00b      	beq.n	80023b6 <HAL_UART_IRQHandler+0xae>
 800239e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f043 0201 	orr.w	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00b      	beq.n	80023da <HAL_UART_IRQHandler+0xd2>
 80023c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d005      	beq.n	80023da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f043 0202 	orr.w	r2, r3, #2
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <HAL_UART_IRQHandler+0xf6>
 80023e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f043 0204 	orr.w	r2, r3, #4
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80023fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	d011      	beq.n	800242e <HAL_UART_IRQHandler+0x126>
 800240a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800240e:	f003 0320 	and.w	r3, r3, #32
 8002412:	2b00      	cmp	r3, #0
 8002414:	d105      	bne.n	8002422 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d005      	beq.n	800242e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f043 0208 	orr.w	r2, r3, #8
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 81ed 	beq.w	8002812 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800243c:	f003 0320 	and.w	r3, r3, #32
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_UART_IRQHandler+0x14e>
 8002444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002448:	f003 0320 	and.w	r3, r3, #32
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 faf0 	bl	8002a36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002460:	2b40      	cmp	r3, #64	; 0x40
 8002462:	bf0c      	ite	eq
 8002464:	2301      	moveq	r3, #1
 8002466:	2300      	movne	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d103      	bne.n	8002482 <HAL_UART_IRQHandler+0x17a>
 800247a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800247e:	2b00      	cmp	r3, #0
 8002480:	d04f      	beq.n	8002522 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f9f8 	bl	8002878 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002492:	2b40      	cmp	r3, #64	; 0x40
 8002494:	d141      	bne.n	800251a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3314      	adds	r3, #20
 800249c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80024a4:	e853 3f00 	ldrex	r3, [r3]
 80024a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80024ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3314      	adds	r3, #20
 80024be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80024c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80024c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80024ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80024d2:	e841 2300 	strex	r3, r2, [r1]
 80024d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80024da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1d9      	bne.n	8002496 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d013      	beq.n	8002512 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ee:	4a7d      	ldr	r2, [pc, #500]	; (80026e4 <HAL_UART_IRQHandler+0x3dc>)
 80024f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe fc45 	bl	8000d86 <HAL_DMA_Abort_IT>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d016      	beq.n	8002530 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800250c:	4610      	mov	r0, r2
 800250e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002510:	e00e      	b.n	8002530 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f99a 	bl	800284c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002518:	e00a      	b.n	8002530 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f996 	bl	800284c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002520:	e006      	b.n	8002530 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f992 	bl	800284c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800252e:	e170      	b.n	8002812 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002530:	bf00      	nop
    return;
 8002532:	e16e      	b.n	8002812 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002538:	2b01      	cmp	r3, #1
 800253a:	f040 814a 	bne.w	80027d2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800253e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 8143 	beq.w	80027d2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800254c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 813c 	beq.w	80027d2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257a:	2b40      	cmp	r3, #64	; 0x40
 800257c:	f040 80b4 	bne.w	80026e8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800258c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 8140 	beq.w	8002816 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800259a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800259e:	429a      	cmp	r2, r3
 80025a0:	f080 8139 	bcs.w	8002816 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80025aa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025b6:	f000 8088 	beq.w	80026ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	330c      	adds	r3, #12
 80025c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025c8:	e853 3f00 	ldrex	r3, [r3]
 80025cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80025d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	330c      	adds	r3, #12
 80025e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80025e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80025ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80025f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025f6:	e841 2300 	strex	r3, r2, [r1]
 80025fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80025fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1d9      	bne.n	80025ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	3314      	adds	r3, #20
 800260c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002610:	e853 3f00 	ldrex	r3, [r3]
 8002614:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002616:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002618:	f023 0301 	bic.w	r3, r3, #1
 800261c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3314      	adds	r3, #20
 8002626:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800262a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800262e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002630:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002632:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002636:	e841 2300 	strex	r3, r2, [r1]
 800263a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800263c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1e1      	bne.n	8002606 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	3314      	adds	r3, #20
 8002648:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800264a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800264c:	e853 3f00 	ldrex	r3, [r3]
 8002650:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002654:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002658:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	3314      	adds	r3, #20
 8002662:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002666:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002668:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800266a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800266c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800266e:	e841 2300 	strex	r3, r2, [r1]
 8002672:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1e3      	bne.n	8002642 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2220      	movs	r2, #32
 800267e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	330c      	adds	r3, #12
 800268e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002692:	e853 3f00 	ldrex	r3, [r3]
 8002696:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002698:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800269a:	f023 0310 	bic.w	r3, r3, #16
 800269e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	330c      	adds	r3, #12
 80026a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80026ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80026ae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026b4:	e841 2300 	strex	r3, r2, [r1]
 80026b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80026ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1e3      	bne.n	8002688 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fe faee 	bl	8000ca6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	4619      	mov	r1, r3
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f8c0 	bl	8002860 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026e0:	e099      	b.n	8002816 <HAL_UART_IRQHandler+0x50e>
 80026e2:	bf00      	nop
 80026e4:	0800293f 	.word	0x0800293f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 808b 	beq.w	800281a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002704:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 8086 	beq.w	800281a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	330c      	adds	r3, #12
 8002714:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002718:	e853 3f00 	ldrex	r3, [r3]
 800271c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800271e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002720:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002724:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	330c      	adds	r3, #12
 800272e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002732:	647a      	str	r2, [r7, #68]	; 0x44
 8002734:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002736:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002738:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800273a:	e841 2300 	strex	r3, r2, [r1]
 800273e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1e3      	bne.n	800270e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	3314      	adds	r3, #20
 800274c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800274e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002750:	e853 3f00 	ldrex	r3, [r3]
 8002754:	623b      	str	r3, [r7, #32]
   return(result);
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	f023 0301 	bic.w	r3, r3, #1
 800275c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3314      	adds	r3, #20
 8002766:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800276a:	633a      	str	r2, [r7, #48]	; 0x30
 800276c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800276e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002772:	e841 2300 	strex	r3, r2, [r1]
 8002776:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1e3      	bne.n	8002746 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2220      	movs	r2, #32
 8002782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	330c      	adds	r3, #12
 8002792:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	e853 3f00 	ldrex	r3, [r3]
 800279a:	60fb      	str	r3, [r7, #12]
   return(result);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f023 0310 	bic.w	r3, r3, #16
 80027a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	330c      	adds	r3, #12
 80027ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80027b0:	61fa      	str	r2, [r7, #28]
 80027b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b4:	69b9      	ldr	r1, [r7, #24]
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	e841 2300 	strex	r3, r2, [r1]
 80027bc:	617b      	str	r3, [r7, #20]
   return(result);
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1e3      	bne.n	800278c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80027c8:	4619      	mov	r1, r3
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f848 	bl	8002860 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80027d0:	e023      	b.n	800281a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <HAL_UART_IRQHandler+0x4ea>
 80027de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f8bb 	bl	8002966 <UART_Transmit_IT>
    return;
 80027f0:	e014      	b.n	800281c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00e      	beq.n	800281c <HAL_UART_IRQHandler+0x514>
 80027fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002806:	2b00      	cmp	r3, #0
 8002808:	d008      	beq.n	800281c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f8fb 	bl	8002a06 <UART_EndTransmit_IT>
    return;
 8002810:	e004      	b.n	800281c <HAL_UART_IRQHandler+0x514>
    return;
 8002812:	bf00      	nop
 8002814:	e002      	b.n	800281c <HAL_UART_IRQHandler+0x514>
      return;
 8002816:	bf00      	nop
 8002818:	e000      	b.n	800281c <HAL_UART_IRQHandler+0x514>
      return;
 800281a:	bf00      	nop
  }
}
 800281c:	37e8      	adds	r7, #232	; 0xe8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop

08002824 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002878:	b480      	push	{r7}
 800287a:	b095      	sub	sp, #84	; 0x54
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	330c      	adds	r3, #12
 8002886:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800288a:	e853 3f00 	ldrex	r3, [r3]
 800288e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002892:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	330c      	adds	r3, #12
 800289e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028a0:	643a      	str	r2, [r7, #64]	; 0x40
 80028a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80028a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80028a8:	e841 2300 	strex	r3, r2, [r1]
 80028ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80028ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1e5      	bne.n	8002880 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	3314      	adds	r3, #20
 80028ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	e853 3f00 	ldrex	r3, [r3]
 80028c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f023 0301 	bic.w	r3, r3, #1
 80028ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	3314      	adds	r3, #20
 80028d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028dc:	e841 2300 	strex	r3, r2, [r1]
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1e5      	bne.n	80028b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d119      	bne.n	8002924 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	330c      	adds	r3, #12
 80028f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	e853 3f00 	ldrex	r3, [r3]
 80028fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f023 0310 	bic.w	r3, r3, #16
 8002906:	647b      	str	r3, [r7, #68]	; 0x44
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	330c      	adds	r3, #12
 800290e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002910:	61ba      	str	r2, [r7, #24]
 8002912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002914:	6979      	ldr	r1, [r7, #20]
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	e841 2300 	strex	r3, r2, [r1]
 800291c:	613b      	str	r3, [r7, #16]
   return(result);
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1e5      	bne.n	80028f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002932:	bf00      	nop
 8002934:	3754      	adds	r7, #84	; 0x54
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b084      	sub	sp, #16
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f7ff ff77 	bl	800284c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800295e:	bf00      	nop
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002966:	b480      	push	{r7}
 8002968:	b085      	sub	sp, #20
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b21      	cmp	r3, #33	; 0x21
 8002978:	d13e      	bne.n	80029f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002982:	d114      	bne.n	80029ae <UART_Transmit_IT+0x48>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d110      	bne.n	80029ae <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	1c9a      	adds	r2, r3, #2
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	621a      	str	r2, [r3, #32]
 80029ac:	e008      	b.n	80029c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	1c59      	adds	r1, r3, #1
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6211      	str	r1, [r2, #32]
 80029b8:	781a      	ldrb	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	4619      	mov	r1, r3
 80029ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10f      	bne.n	80029f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	e000      	b.n	80029fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80029f8:	2302      	movs	r3, #2
  }
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b082      	sub	sp, #8
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff fefc 	bl	8002824 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b08c      	sub	sp, #48	; 0x30
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b22      	cmp	r3, #34	; 0x22
 8002a48:	f040 80ab 	bne.w	8002ba2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a54:	d117      	bne.n	8002a86 <UART_Receive_IT+0x50>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d113      	bne.n	8002a86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7e:	1c9a      	adds	r2, r3, #2
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28
 8002a84:	e026      	b.n	8002ad4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a98:	d007      	beq.n	8002aaa <UART_Receive_IT+0x74>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10a      	bne.n	8002ab8 <UART_Receive_IT+0x82>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d106      	bne.n	8002ab8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab4:	701a      	strb	r2, [r3, #0]
 8002ab6:	e008      	b.n	8002aca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d15a      	bne.n	8002b9e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0220 	bic.w	r2, r2, #32
 8002af6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0201 	bic.w	r2, r2, #1
 8002b16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d135      	bne.n	8002b94 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	330c      	adds	r3, #12
 8002b34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	e853 3f00 	ldrex	r3, [r3]
 8002b3c:	613b      	str	r3, [r7, #16]
   return(result);
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	f023 0310 	bic.w	r3, r3, #16
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	330c      	adds	r3, #12
 8002b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b4e:	623a      	str	r2, [r7, #32]
 8002b50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b52:	69f9      	ldr	r1, [r7, #28]
 8002b54:	6a3a      	ldr	r2, [r7, #32]
 8002b56:	e841 2300 	strex	r3, r2, [r1]
 8002b5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1e5      	bne.n	8002b2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	2b10      	cmp	r3, #16
 8002b6e:	d10a      	bne.n	8002b86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff fe67 	bl	8002860 <HAL_UARTEx_RxEventCallback>
 8002b92:	e002      	b.n	8002b9a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff fe4f 	bl	8002838 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e002      	b.n	8002ba4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e000      	b.n	8002ba4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002ba2:	2302      	movs	r3, #2
  }
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3730      	adds	r7, #48	; 0x30
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bb0:	b09f      	sub	sp, #124	; 0x7c
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc2:	68d9      	ldr	r1, [r3, #12]
 8002bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	ea40 0301 	orr.w	r3, r0, r1
 8002bcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002bf0:	f021 010c 	bic.w	r1, r1, #12
 8002bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bfa:	430b      	orrs	r3, r1
 8002bfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c0a:	6999      	ldr	r1, [r3, #24]
 8002c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	ea40 0301 	orr.w	r3, r0, r1
 8002c14:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4bc5      	ldr	r3, [pc, #788]	; (8002f30 <UART_SetConfig+0x384>)
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d004      	beq.n	8002c2a <UART_SetConfig+0x7e>
 8002c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4bc3      	ldr	r3, [pc, #780]	; (8002f34 <UART_SetConfig+0x388>)
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d103      	bne.n	8002c32 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c2a:	f7fe febb 	bl	80019a4 <HAL_RCC_GetPCLK2Freq>
 8002c2e:	6778      	str	r0, [r7, #116]	; 0x74
 8002c30:	e002      	b.n	8002c38 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c32:	f7fe fea3 	bl	800197c <HAL_RCC_GetPCLK1Freq>
 8002c36:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3a:	69db      	ldr	r3, [r3, #28]
 8002c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c40:	f040 80b6 	bne.w	8002db0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c46:	461c      	mov	r4, r3
 8002c48:	f04f 0500 	mov.w	r5, #0
 8002c4c:	4622      	mov	r2, r4
 8002c4e:	462b      	mov	r3, r5
 8002c50:	1891      	adds	r1, r2, r2
 8002c52:	6439      	str	r1, [r7, #64]	; 0x40
 8002c54:	415b      	adcs	r3, r3
 8002c56:	647b      	str	r3, [r7, #68]	; 0x44
 8002c58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c5c:	1912      	adds	r2, r2, r4
 8002c5e:	eb45 0303 	adc.w	r3, r5, r3
 8002c62:	f04f 0000 	mov.w	r0, #0
 8002c66:	f04f 0100 	mov.w	r1, #0
 8002c6a:	00d9      	lsls	r1, r3, #3
 8002c6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c70:	00d0      	lsls	r0, r2, #3
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	1911      	adds	r1, r2, r4
 8002c78:	6639      	str	r1, [r7, #96]	; 0x60
 8002c7a:	416b      	adcs	r3, r5
 8002c7c:	667b      	str	r3, [r7, #100]	; 0x64
 8002c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	461a      	mov	r2, r3
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	1891      	adds	r1, r2, r2
 8002c8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c8c:	415b      	adcs	r3, r3
 8002c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c94:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002c98:	f7fd fab4 	bl	8000204 <__aeabi_uldivmod>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4ba5      	ldr	r3, [pc, #660]	; (8002f38 <UART_SetConfig+0x38c>)
 8002ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8002ca6:	095b      	lsrs	r3, r3, #5
 8002ca8:	011e      	lsls	r6, r3, #4
 8002caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cac:	461c      	mov	r4, r3
 8002cae:	f04f 0500 	mov.w	r5, #0
 8002cb2:	4622      	mov	r2, r4
 8002cb4:	462b      	mov	r3, r5
 8002cb6:	1891      	adds	r1, r2, r2
 8002cb8:	6339      	str	r1, [r7, #48]	; 0x30
 8002cba:	415b      	adcs	r3, r3
 8002cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8002cbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002cc2:	1912      	adds	r2, r2, r4
 8002cc4:	eb45 0303 	adc.w	r3, r5, r3
 8002cc8:	f04f 0000 	mov.w	r0, #0
 8002ccc:	f04f 0100 	mov.w	r1, #0
 8002cd0:	00d9      	lsls	r1, r3, #3
 8002cd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cd6:	00d0      	lsls	r0, r2, #3
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	1911      	adds	r1, r2, r4
 8002cde:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ce0:	416b      	adcs	r3, r5
 8002ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	1891      	adds	r1, r2, r2
 8002cf0:	62b9      	str	r1, [r7, #40]	; 0x28
 8002cf2:	415b      	adcs	r3, r3
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cfa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002cfe:	f7fd fa81 	bl	8000204 <__aeabi_uldivmod>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4b8c      	ldr	r3, [pc, #560]	; (8002f38 <UART_SetConfig+0x38c>)
 8002d08:	fba3 1302 	umull	r1, r3, r3, r2
 8002d0c:	095b      	lsrs	r3, r3, #5
 8002d0e:	2164      	movs	r1, #100	; 0x64
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	3332      	adds	r3, #50	; 0x32
 8002d1a:	4a87      	ldr	r2, [pc, #540]	; (8002f38 <UART_SetConfig+0x38c>)
 8002d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d28:	441e      	add	r6, r3
 8002d2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f04f 0100 	mov.w	r1, #0
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	1894      	adds	r4, r2, r2
 8002d38:	623c      	str	r4, [r7, #32]
 8002d3a:	415b      	adcs	r3, r3
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d42:	1812      	adds	r2, r2, r0
 8002d44:	eb41 0303 	adc.w	r3, r1, r3
 8002d48:	f04f 0400 	mov.w	r4, #0
 8002d4c:	f04f 0500 	mov.w	r5, #0
 8002d50:	00dd      	lsls	r5, r3, #3
 8002d52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d56:	00d4      	lsls	r4, r2, #3
 8002d58:	4622      	mov	r2, r4
 8002d5a:	462b      	mov	r3, r5
 8002d5c:	1814      	adds	r4, r2, r0
 8002d5e:	653c      	str	r4, [r7, #80]	; 0x50
 8002d60:	414b      	adcs	r3, r1
 8002d62:	657b      	str	r3, [r7, #84]	; 0x54
 8002d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	1891      	adds	r1, r2, r2
 8002d70:	61b9      	str	r1, [r7, #24]
 8002d72:	415b      	adcs	r3, r3
 8002d74:	61fb      	str	r3, [r7, #28]
 8002d76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d7a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002d7e:	f7fd fa41 	bl	8000204 <__aeabi_uldivmod>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4b6c      	ldr	r3, [pc, #432]	; (8002f38 <UART_SetConfig+0x38c>)
 8002d88:	fba3 1302 	umull	r1, r3, r3, r2
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	2164      	movs	r1, #100	; 0x64
 8002d90:	fb01 f303 	mul.w	r3, r1, r3
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	3332      	adds	r3, #50	; 0x32
 8002d9a:	4a67      	ldr	r2, [pc, #412]	; (8002f38 <UART_SetConfig+0x38c>)
 8002d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002da0:	095b      	lsrs	r3, r3, #5
 8002da2:	f003 0207 	and.w	r2, r3, #7
 8002da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4432      	add	r2, r6
 8002dac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002dae:	e0b9      	b.n	8002f24 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002db0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db2:	461c      	mov	r4, r3
 8002db4:	f04f 0500 	mov.w	r5, #0
 8002db8:	4622      	mov	r2, r4
 8002dba:	462b      	mov	r3, r5
 8002dbc:	1891      	adds	r1, r2, r2
 8002dbe:	6139      	str	r1, [r7, #16]
 8002dc0:	415b      	adcs	r3, r3
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002dc8:	1912      	adds	r2, r2, r4
 8002dca:	eb45 0303 	adc.w	r3, r5, r3
 8002dce:	f04f 0000 	mov.w	r0, #0
 8002dd2:	f04f 0100 	mov.w	r1, #0
 8002dd6:	00d9      	lsls	r1, r3, #3
 8002dd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ddc:	00d0      	lsls	r0, r2, #3
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	eb12 0804 	adds.w	r8, r2, r4
 8002de6:	eb43 0905 	adc.w	r9, r3, r5
 8002dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f04f 0100 	mov.w	r1, #0
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	008b      	lsls	r3, r1, #2
 8002dfe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e02:	0082      	lsls	r2, r0, #2
 8002e04:	4640      	mov	r0, r8
 8002e06:	4649      	mov	r1, r9
 8002e08:	f7fd f9fc 	bl	8000204 <__aeabi_uldivmod>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4b49      	ldr	r3, [pc, #292]	; (8002f38 <UART_SetConfig+0x38c>)
 8002e12:	fba3 2302 	umull	r2, r3, r3, r2
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	011e      	lsls	r6, r3, #4
 8002e1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f04f 0100 	mov.w	r1, #0
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	1894      	adds	r4, r2, r2
 8002e28:	60bc      	str	r4, [r7, #8]
 8002e2a:	415b      	adcs	r3, r3
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e32:	1812      	adds	r2, r2, r0
 8002e34:	eb41 0303 	adc.w	r3, r1, r3
 8002e38:	f04f 0400 	mov.w	r4, #0
 8002e3c:	f04f 0500 	mov.w	r5, #0
 8002e40:	00dd      	lsls	r5, r3, #3
 8002e42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002e46:	00d4      	lsls	r4, r2, #3
 8002e48:	4622      	mov	r2, r4
 8002e4a:	462b      	mov	r3, r5
 8002e4c:	1814      	adds	r4, r2, r0
 8002e4e:	64bc      	str	r4, [r7, #72]	; 0x48
 8002e50:	414b      	adcs	r3, r1
 8002e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f04f 0100 	mov.w	r1, #0
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	008b      	lsls	r3, r1, #2
 8002e68:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e6c:	0082      	lsls	r2, r0, #2
 8002e6e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002e72:	f7fd f9c7 	bl	8000204 <__aeabi_uldivmod>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4b2f      	ldr	r3, [pc, #188]	; (8002f38 <UART_SetConfig+0x38c>)
 8002e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	2164      	movs	r1, #100	; 0x64
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	3332      	adds	r3, #50	; 0x32
 8002e8e:	4a2a      	ldr	r2, [pc, #168]	; (8002f38 <UART_SetConfig+0x38c>)
 8002e90:	fba2 2303 	umull	r2, r3, r2, r3
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e9a:	441e      	add	r6, r3
 8002e9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f04f 0100 	mov.w	r1, #0
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	1894      	adds	r4, r2, r2
 8002eaa:	603c      	str	r4, [r7, #0]
 8002eac:	415b      	adcs	r3, r3
 8002eae:	607b      	str	r3, [r7, #4]
 8002eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eb4:	1812      	adds	r2, r2, r0
 8002eb6:	eb41 0303 	adc.w	r3, r1, r3
 8002eba:	f04f 0400 	mov.w	r4, #0
 8002ebe:	f04f 0500 	mov.w	r5, #0
 8002ec2:	00dd      	lsls	r5, r3, #3
 8002ec4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002ec8:	00d4      	lsls	r4, r2, #3
 8002eca:	4622      	mov	r2, r4
 8002ecc:	462b      	mov	r3, r5
 8002ece:	eb12 0a00 	adds.w	sl, r2, r0
 8002ed2:	eb43 0b01 	adc.w	fp, r3, r1
 8002ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f04f 0100 	mov.w	r1, #0
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	008b      	lsls	r3, r1, #2
 8002eea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002eee:	0082      	lsls	r2, r0, #2
 8002ef0:	4650      	mov	r0, sl
 8002ef2:	4659      	mov	r1, fp
 8002ef4:	f7fd f986 	bl	8000204 <__aeabi_uldivmod>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <UART_SetConfig+0x38c>)
 8002efe:	fba3 1302 	umull	r1, r3, r3, r2
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	2164      	movs	r1, #100	; 0x64
 8002f06:	fb01 f303 	mul.w	r3, r1, r3
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	3332      	adds	r3, #50	; 0x32
 8002f10:	4a09      	ldr	r2, [pc, #36]	; (8002f38 <UART_SetConfig+0x38c>)
 8002f12:	fba2 2303 	umull	r2, r3, r2, r3
 8002f16:	095b      	lsrs	r3, r3, #5
 8002f18:	f003 020f 	and.w	r2, r3, #15
 8002f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4432      	add	r2, r6
 8002f22:	609a      	str	r2, [r3, #8]
}
 8002f24:	bf00      	nop
 8002f26:	377c      	adds	r7, #124	; 0x7c
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f2e:	bf00      	nop
 8002f30:	40011000 	.word	0x40011000
 8002f34:	40011400 	.word	0x40011400
 8002f38:	51eb851f 	.word	0x51eb851f

08002f3c <bootloader_main>:
// state function protoypes
frame_format_t updating_state_func(void);
frame_format_t idle_state_func(void);
frame_format_t start_update_state_func(void);
void bootloader_main(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08a      	sub	sp, #40	; 0x28
 8002f40:	af00      	add	r7, sp, #0
	bootloaderInit();
 8002f42:	f000 f829 	bl	8002f98 <bootloaderInit>

	// TODO: fix :enable RX interrupt
	USART2->CR1 |= USART_CR1_RXNEIE;
 8002f46:	4b0e      	ldr	r3, [pc, #56]	; (8002f80 <bootloader_main+0x44>)
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	4a0d      	ldr	r2, [pc, #52]	; (8002f80 <bootloader_main+0x44>)
 8002f4c:	f043 0320 	orr.w	r3, r3, #32
 8002f50:	60d3      	str	r3, [r2, #12]
	// erase_sector();
	//  initialize state functions
	bootloader_state_functions[STATE_IDLE] = idle_state_func;
 8002f52:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <bootloader_main+0x48>)
 8002f54:	4a0c      	ldr	r2, [pc, #48]	; (8002f88 <bootloader_main+0x4c>)
 8002f56:	601a      	str	r2, [r3, #0]
	bootloader_state_functions[STATE_START_UPDATE] = start_update_state_func;
 8002f58:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <bootloader_main+0x48>)
 8002f5a:	4a0c      	ldr	r2, [pc, #48]	; (8002f8c <bootloader_main+0x50>)
 8002f5c:	605a      	str	r2, [r3, #4]
	bootloader_state_functions[STATE_UPDATING] = updating_state_func;
 8002f5e:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <bootloader_main+0x48>)
 8002f60:	4a0b      	ldr	r2, [pc, #44]	; (8002f90 <bootloader_main+0x54>)
 8002f62:	609a      	str	r2, [r3, #8]

	// initialize state again.... just to be sure
	bootlaoder_current_state = STATE_IDLE;
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <bootloader_main+0x58>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]

	while (1)
	{
		(*bootloader_state_functions[bootlaoder_current_state])();
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <bootloader_main+0x58>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <bootloader_main+0x48>)
 8002f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f76:	463a      	mov	r2, r7
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4798      	blx	r3
 8002f7c:	e7f5      	b.n	8002f6a <bootloader_main+0x2e>
 8002f7e:	bf00      	nop
 8002f80:	40004400 	.word	0x40004400
 8002f84:	2000005c 	.word	0x2000005c
 8002f88:	08003201 	.word	0x08003201
 8002f8c:	08003145 	.word	0x08003145
 8002f90:	08003195 	.word	0x08003195
 8002f94:	2000004f 	.word	0x2000004f

08002f98 <bootloaderInit>:

		// HAL_GPIO_TogglePin(GPIOA, user_led_Pin);
	}
}
void bootloaderInit(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
	// create the ACK frame
	ackFrame.start_of_frame = 0x45444459;
 8002f9e:	4b5d      	ldr	r3, [pc, #372]	; (8003114 <bootloaderInit+0x17c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f042 0259 	orr.w	r2, r2, #89	; 0x59
 8002fa6:	701a      	strb	r2, [r3, #0]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 8002fae:	705a      	strb	r2, [r3, #1]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 8002fb6:	709a      	strb	r2, [r3, #2]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f042 0245 	orr.w	r2, r2, #69	; 0x45
 8002fbe:	70da      	strb	r2, [r3, #3]
	ackFrame.frame_id = 0x45634AED;
 8002fc0:	4b54      	ldr	r3, [pc, #336]	; (8003114 <bootloaderInit+0x17c>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f062 0212 	orn	r2, r2, #18
 8002fc8:	711a      	strb	r2, [r3, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f042 024a 	orr.w	r2, r2, #74	; 0x4a
 8002fd0:	715a      	strb	r2, [r3, #5]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8002fd8:	719a      	strb	r2, [r3, #6]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f042 0245 	orr.w	r2, r2, #69	; 0x45
 8002fe0:	71da      	strb	r2, [r3, #7]
	ackFrame.payload_len = (uint16_t)65535;
 8002fe2:	4b4c      	ldr	r3, [pc, #304]	; (8003114 <bootloaderInit+0x17c>)
 8002fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe8:	721a      	strb	r2, [r3, #8]
 8002fea:	f04f 32ff 	mov.w	r2, #4294967295
 8002fee:	725a      	strb	r2, [r3, #9]
	ackFrame.crc32 = 0xffffffff; // TODO:
 8002ff0:	4b48      	ldr	r3, [pc, #288]	; (8003114 <bootloaderInit+0x17c>)
 8002ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff6:	769a      	strb	r2, [r3, #26]
 8002ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ffc:	76da      	strb	r2, [r3, #27]
 8002ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8003002:	771a      	strb	r2, [r3, #28]
 8003004:	f04f 32ff 	mov.w	r2, #4294967295
 8003008:	775a      	strb	r2, [r3, #29]
	ackFrame.end_of_frame = 0x46414952;
 800300a:	4b42      	ldr	r3, [pc, #264]	; (8003114 <bootloaderInit+0x17c>)
 800300c:	2200      	movs	r2, #0
 800300e:	f042 0252 	orr.w	r2, r2, #82	; 0x52
 8003012:	779a      	strb	r2, [r3, #30]
 8003014:	2200      	movs	r2, #0
 8003016:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 800301a:	77da      	strb	r2, [r3, #31]
 800301c:	2200      	movs	r2, #0
 800301e:	f042 0241 	orr.w	r2, r2, #65	; 0x41
 8003022:	f883 2020 	strb.w	r2, [r3, #32]
 8003026:	2200      	movs	r2, #0
 8003028:	f042 0246 	orr.w	r2, r2, #70	; 0x46
 800302c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	for (int i = 0; i < PAYLOAD_LEN; i++)
 8003030:	2300      	movs	r3, #0
 8003032:	607b      	str	r3, [r7, #4]
 8003034:	e00a      	b.n	800304c <bootloaderInit+0xb4>
	{
		ackFrame.payload[i] = i;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	b2d9      	uxtb	r1, r3
 800303a:	4a36      	ldr	r2, [pc, #216]	; (8003114 <bootloaderInit+0x17c>)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4413      	add	r3, r2
 8003040:	330a      	adds	r3, #10
 8003042:	460a      	mov	r2, r1
 8003044:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < PAYLOAD_LEN; i++)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3301      	adds	r3, #1
 800304a:	607b      	str	r3, [r7, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b0f      	cmp	r3, #15
 8003050:	ddf1      	ble.n	8003036 <bootloaderInit+0x9e>
	}

	// create the NACK frame
	nackFrame.start_of_frame = 0x45444459;
 8003052:	4b31      	ldr	r3, [pc, #196]	; (8003118 <bootloaderInit+0x180>)
 8003054:	2200      	movs	r2, #0
 8003056:	f042 0259 	orr.w	r2, r2, #89	; 0x59
 800305a:	701a      	strb	r2, [r3, #0]
 800305c:	2200      	movs	r2, #0
 800305e:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 8003062:	705a      	strb	r2, [r3, #1]
 8003064:	2200      	movs	r2, #0
 8003066:	f042 0244 	orr.w	r2, r2, #68	; 0x44
 800306a:	709a      	strb	r2, [r3, #2]
 800306c:	2200      	movs	r2, #0
 800306e:	f042 0245 	orr.w	r2, r2, #69	; 0x45
 8003072:	70da      	strb	r2, [r3, #3]
	nackFrame.frame_id = 0x45634AED;
 8003074:	4b28      	ldr	r3, [pc, #160]	; (8003118 <bootloaderInit+0x180>)
 8003076:	2200      	movs	r2, #0
 8003078:	f062 0212 	orn	r2, r2, #18
 800307c:	711a      	strb	r2, [r3, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f042 024a 	orr.w	r2, r2, #74	; 0x4a
 8003084:	715a      	strb	r2, [r3, #5]
 8003086:	2200      	movs	r2, #0
 8003088:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800308c:	719a      	strb	r2, [r3, #6]
 800308e:	2200      	movs	r2, #0
 8003090:	f042 0245 	orr.w	r2, r2, #69	; 0x45
 8003094:	71da      	strb	r2, [r3, #7]
	nackFrame.payload_len = (uint16_t)65535;
 8003096:	4b20      	ldr	r3, [pc, #128]	; (8003118 <bootloaderInit+0x180>)
 8003098:	f04f 32ff 	mov.w	r2, #4294967295
 800309c:	721a      	strb	r2, [r3, #8]
 800309e:	f04f 32ff 	mov.w	r2, #4294967295
 80030a2:	725a      	strb	r2, [r3, #9]
	nackFrame.crc32 = 0xffffffff; // TODO:
 80030a4:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <bootloaderInit+0x180>)
 80030a6:	f04f 32ff 	mov.w	r2, #4294967295
 80030aa:	769a      	strb	r2, [r3, #26]
 80030ac:	f04f 32ff 	mov.w	r2, #4294967295
 80030b0:	76da      	strb	r2, [r3, #27]
 80030b2:	f04f 32ff 	mov.w	r2, #4294967295
 80030b6:	771a      	strb	r2, [r3, #28]
 80030b8:	f04f 32ff 	mov.w	r2, #4294967295
 80030bc:	775a      	strb	r2, [r3, #29]
	nackFrame.end_of_frame = 0x46414952;
 80030be:	4b16      	ldr	r3, [pc, #88]	; (8003118 <bootloaderInit+0x180>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	f042 0252 	orr.w	r2, r2, #82	; 0x52
 80030c6:	779a      	strb	r2, [r3, #30]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f042 0249 	orr.w	r2, r2, #73	; 0x49
 80030ce:	77da      	strb	r2, [r3, #31]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f042 0241 	orr.w	r2, r2, #65	; 0x41
 80030d6:	f883 2020 	strb.w	r2, [r3, #32]
 80030da:	2200      	movs	r2, #0
 80030dc:	f042 0246 	orr.w	r2, r2, #70	; 0x46
 80030e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	for (int i = 0; i < PAYLOAD_LEN; i++)
 80030e4:	2300      	movs	r3, #0
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	e00a      	b.n	8003100 <bootloaderInit+0x168>
	{
		nackFrame.payload[i] = i;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	b2d9      	uxtb	r1, r3
 80030ee:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <bootloaderInit+0x180>)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	4413      	add	r3, r2
 80030f4:	330a      	adds	r3, #10
 80030f6:	460a      	mov	r2, r1
 80030f8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < PAYLOAD_LEN; i++)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	3301      	adds	r3, #1
 80030fe:	603b      	str	r3, [r7, #0]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b0f      	cmp	r3, #15
 8003104:	ddf1      	ble.n	80030ea <bootloaderInit+0x152>
	}
}
 8003106:	bf00      	nop
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	2000015c 	.word	0x2000015c
 8003118:	20000114 	.word	0x20000114

0800311c <sendFrame>:
uint8_t *temp = NULL;
static void sendFrame(frame_format_t *frame)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	temp = (uint8_t *)frame;
 8003124:	4a06      	ldr	r2, [pc, #24]	; (8003140 <sendFrame+0x24>)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6013      	str	r3, [r2, #0]
	uart_send_data(temp, sizeof(frame_format_t));
 800312a:	4b05      	ldr	r3, [pc, #20]	; (8003140 <sendFrame+0x24>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2122      	movs	r1, #34	; 0x22
 8003130:	4618      	mov	r0, r3
 8003132:	f000 f9a5 	bl	8003480 <uart_send_data>
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20000054 	.word	0x20000054

08003144 <start_update_state_func>:
frame_format_t start_update_state_func(void)
{
 8003144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]

	// this will have STATE_START_UPDATE frame
	reset_recevied_frame();
 800314c:	f000 f90e 	bl	800336c <reset_recevied_frame>

	set_bl_state(STATE_UPDATING);
 8003150:	2002      	movs	r0, #2
 8003152:	f000 f8bd 	bl	80032d0 <set_bl_state>

	//TODO: send ack


	return ackFrame;
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <start_update_state_func+0x4c>)
 800315a:	4610      	mov	r0, r2
 800315c:	f103 0420 	add.w	r4, r3, #32
 8003160:	4602      	mov	r2, r0
 8003162:	4619      	mov	r1, r3
 8003164:	f8d1 c000 	ldr.w	ip, [r1]
 8003168:	684e      	ldr	r6, [r1, #4]
 800316a:	688d      	ldr	r5, [r1, #8]
 800316c:	68c9      	ldr	r1, [r1, #12]
 800316e:	f8c2 c000 	str.w	ip, [r2]
 8003172:	6056      	str	r6, [r2, #4]
 8003174:	6095      	str	r5, [r2, #8]
 8003176:	60d1      	str	r1, [r2, #12]
 8003178:	3310      	adds	r3, #16
 800317a:	3010      	adds	r0, #16
 800317c:	42a3      	cmp	r3, r4
 800317e:	d1ef      	bne.n	8003160 <start_update_state_func+0x1c>
 8003180:	4602      	mov	r2, r0
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	8013      	strh	r3, [r2, #0]
}
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800318e:	bf00      	nop
 8003190:	2000015c 	.word	0x2000015c

08003194 <updating_state_func>:
frame_format_t updating_state_func(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	// once we are updating for sure
	// we can go ahead and erase the required sectors only once
	static bool erased = false;
	if (parse_frame())
 800319c:	f000 f85a 	bl	8003254 <parse_frame>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d01d      	beq.n	80031e2 <updating_state_func+0x4e>
	{
		if (receivedFrame.frame_id == BL_PAYLOAD)
 80031a6:	4b11      	ldr	r3, [pc, #68]	; (80031ec <updating_state_func+0x58>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4a11      	ldr	r2, [pc, #68]	; (80031f0 <updating_state_func+0x5c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d111      	bne.n	80031d4 <updating_state_func+0x40>
		{
			if (!erased) // only do this once
 80031b0:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <updating_state_func+0x60>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	f083 0301 	eor.w	r3, r3, #1
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d004      	beq.n	80031c8 <updating_state_func+0x34>
			{
				erase_sector();
 80031be:	f000 f945 	bl	800344c <erase_sector>
				erased = true;
 80031c2:	4b0c      	ldr	r3, [pc, #48]	; (80031f4 <updating_state_func+0x60>)
 80031c4:	2201      	movs	r2, #1
 80031c6:	701a      	strb	r2, [r3, #0]
			}
			write_payload();
 80031c8:	f000 f892 	bl	80032f0 <write_payload>
			// reset received frame
			//reset_recevied_frame();
			// send ack frame
			sendFrame(&ackFrame);
 80031cc:	480a      	ldr	r0, [pc, #40]	; (80031f8 <updating_state_func+0x64>)
 80031ce:	f7ff ffa5 	bl	800311c <sendFrame>
 80031d2:	e006      	b.n	80031e2 <updating_state_func+0x4e>
		}
		else if (receivedFrame.frame_id == BL_UPDATE_DONE)
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <updating_state_func+0x58>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	4a08      	ldr	r2, [pc, #32]	; (80031fc <updating_state_func+0x68>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d101      	bne.n	80031e2 <updating_state_func+0x4e>
		{
			jump_to_user_app();
 80031de:	f000 f8b7 	bl	8003350 <jump_to_user_app>
		}
	}

	//return ackFrame;
}
 80031e2:	bf00      	nop
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	20000138 	.word	0x20000138
 80031f0:	deadbeef 	.word	0xdeadbeef
 80031f4:	20000058 	.word	0x20000058
 80031f8:	2000015c 	.word	0x2000015c
 80031fc:	deaddade 	.word	0xdeaddade

08003200 <idle_state_func>:
frame_format_t idle_state_func(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
	if (parse_frame())
 8003208:	f000 f824 	bl	8003254 <parse_frame>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d013      	beq.n	800323a <idle_state_func+0x3a>
	{

		switch (receivedFrame.frame_id)
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <idle_state_func+0x48>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	4a0d      	ldr	r2, [pc, #52]	; (800324c <idle_state_func+0x4c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d108      	bne.n	800322e <idle_state_func+0x2e>
		{
		case BL_START_UPDATE:
			set_bl_state(STATE_UPDATING);
 800321c:	2002      	movs	r0, #2
 800321e:	f000 f857 	bl	80032d0 <set_bl_state>
			reset_recevied_frame();
 8003222:	f000 f8a3 	bl	800336c <reset_recevied_frame>
			sendFrame(&ackFrame);
 8003226:	480a      	ldr	r0, [pc, #40]	; (8003250 <idle_state_func+0x50>)
 8003228:	f7ff ff78 	bl	800311c <sendFrame>
			break;
 800322c:	e006      	b.n	800323c <idle_state_func+0x3c>

		// only states above are valid to switch out of idle state
		default:
			set_bl_state(STATE_IDLE);
 800322e:	2000      	movs	r0, #0
 8003230:	f000 f84e 	bl	80032d0 <set_bl_state>
			reset_recevied_frame();
 8003234:	f000 f89a 	bl	800336c <reset_recevied_frame>
 8003238:	e000      	b.n	800323c <idle_state_func+0x3c>
		}
	}
 800323a:	bf00      	nop

	//return ackFrame;
}
 800323c:	bf00      	nop
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20000138 	.word	0x20000138
 800324c:	ba5eba11 	.word	0xba5eba11
 8003250:	2000015c 	.word	0x2000015c

08003254 <parse_frame>:
static bool parse_frame(void)
{
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	af00      	add	r7, sp, #0
	// checks if we have a frame to parse
	if (parse)
 8003258:	4b18      	ldr	r3, [pc, #96]	; (80032bc <parse_frame+0x68>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d02a      	beq.n	80032b6 <parse_frame+0x62>
	{
		parse = false;
 8003260:	4b16      	ldr	r3, [pc, #88]	; (80032bc <parse_frame+0x68>)
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]
		// assemble a frame from bytes_buff
		memcpy(&receivedFrame, bytes_buff, sizeof(frame_format_t));
 8003266:	4b16      	ldr	r3, [pc, #88]	; (80032c0 <parse_frame+0x6c>)
 8003268:	4a16      	ldr	r2, [pc, #88]	; (80032c4 <parse_frame+0x70>)
 800326a:	4614      	mov	r4, r2
 800326c:	469c      	mov	ip, r3
 800326e:	f104 0e20 	add.w	lr, r4, #32
 8003272:	4665      	mov	r5, ip
 8003274:	4626      	mov	r6, r4
 8003276:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003278:	6028      	str	r0, [r5, #0]
 800327a:	6069      	str	r1, [r5, #4]
 800327c:	60aa      	str	r2, [r5, #8]
 800327e:	60eb      	str	r3, [r5, #12]
 8003280:	3410      	adds	r4, #16
 8003282:	f10c 0c10 	add.w	ip, ip, #16
 8003286:	4574      	cmp	r4, lr
 8003288:	d1f3      	bne.n	8003272 <parse_frame+0x1e>
 800328a:	4662      	mov	r2, ip
 800328c:	4623      	mov	r3, r4
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	8013      	strh	r3, [r2, #0]
		// clear bytes buffer
		memset(bytes_buff, 0, sizeof(frame_format_t));
 8003292:	2222      	movs	r2, #34	; 0x22
 8003294:	2100      	movs	r1, #0
 8003296:	480b      	ldr	r0, [pc, #44]	; (80032c4 <parse_frame+0x70>)
 8003298:	f000 f944 	bl	8003524 <memset>
		// the type of frame we get will dictate what the next state should be
		if (receivedFrame.start_of_frame == BL_START_OF_FRAME && receivedFrame.end_of_frame == BL_END_OF_FRAME)
 800329c:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <parse_frame+0x6c>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a09      	ldr	r2, [pc, #36]	; (80032c8 <parse_frame+0x74>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d107      	bne.n	80032b6 <parse_frame+0x62>
 80032a6:	4b06      	ldr	r3, [pc, #24]	; (80032c0 <parse_frame+0x6c>)
 80032a8:	f8d3 301e 	ldr.w	r3, [r3, #30]
 80032ac:	4a07      	ldr	r2, [pc, #28]	; (80032cc <parse_frame+0x78>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d101      	bne.n	80032b6 <parse_frame+0x62>
		{
			// TODO: check CRC
			// if frame is valid
			return true;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <parse_frame+0x64>
		}
	}
	return false;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032bc:	20000050 	.word	0x20000050
 80032c0:	20000138 	.word	0x20000138
 80032c4:	2000002c 	.word	0x2000002c
 80032c8:	45444459 	.word	0x45444459
 80032cc:	46414952 	.word	0x46414952

080032d0 <set_bl_state>:
static void set_bl_state(bootloader_state state)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	4603      	mov	r3, r0
 80032d8:	71fb      	strb	r3, [r7, #7]
	bootlaoder_current_state = state;
 80032da:	4a04      	ldr	r2, [pc, #16]	; (80032ec <set_bl_state+0x1c>)
 80032dc:	79fb      	ldrb	r3, [r7, #7]
 80032de:	7013      	strb	r3, [r2, #0]
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	2000004f 	.word	0x2000004f

080032f0 <write_payload>:
static void write_payload(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0

	HAL_FLASH_Unlock();
 80032f6:	f7fd fdbd 	bl	8000e74 <HAL_FLASH_Unlock>
	for (int i = 0; i < 16; i += 4)
 80032fa:	2300      	movs	r3, #0
 80032fc:	607b      	str	r3, [r7, #4]
 80032fe:	e017      	b.n	8003330 <write_payload+0x40>
	{
		uint32_t *val = (uint32_t *)&receivedFrame.payload[i];
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3308      	adds	r3, #8
 8003304:	4a10      	ldr	r2, [pc, #64]	; (8003348 <write_payload+0x58>)
 8003306:	4413      	add	r3, r2
 8003308:	3302      	adds	r3, #2
 800330a:	603b      	str	r3, [r7, #0]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_address, *val);
 800330c:	4b0f      	ldr	r3, [pc, #60]	; (800334c <write_payload+0x5c>)
 800330e:	6819      	ldr	r1, [r3, #0]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	f04f 0300 	mov.w	r3, #0
 800331a:	2002      	movs	r0, #2
 800331c:	f7fd fd56 	bl	8000dcc <HAL_FLASH_Program>
		start_address += 4;
 8003320:	4b0a      	ldr	r3, [pc, #40]	; (800334c <write_payload+0x5c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3304      	adds	r3, #4
 8003326:	4a09      	ldr	r2, [pc, #36]	; (800334c <write_payload+0x5c>)
 8003328:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < 16; i += 4)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3304      	adds	r3, #4
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b0f      	cmp	r3, #15
 8003334:	dde4      	ble.n	8003300 <write_payload+0x10>
	}
	HAL_FLASH_Unlock();
 8003336:	f7fd fd9d 	bl	8000e74 <HAL_FLASH_Unlock>
	// clear receivedFrame for next packet
	reset_recevied_frame();
 800333a:	f000 f817 	bl	800336c <reset_recevied_frame>
	// this print will change to be an ack once crc read checks out ok

	//print("o");

	//	HAL_FLASH_Lock();
}
 800333e:	bf00      	nop
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000138 	.word	0x20000138
 800334c:	2000000c 	.word	0x2000000c

08003350 <jump_to_user_app>:

static void jump_to_user_app(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
	void (*user_app_reset_handler)(void) = (void *)(*((uint32_t *)(USER_APP_LOCATION)));
 8003356:	4b04      	ldr	r3, [pc, #16]	; (8003368 <jump_to_user_app+0x18>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	607b      	str	r3, [r7, #4]
	user_app_reset_handler();
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4798      	blx	r3
}
 8003360:	bf00      	nop
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	08020004 	.word	0x08020004

0800336c <reset_recevied_frame>:
static void reset_recevied_frame(void)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
	receivedFrame.start_of_frame = 0;
 8003372:	4b20      	ldr	r3, [pc, #128]	; (80033f4 <reset_recevied_frame+0x88>)
 8003374:	2200      	movs	r2, #0
 8003376:	701a      	strb	r2, [r3, #0]
 8003378:	2200      	movs	r2, #0
 800337a:	705a      	strb	r2, [r3, #1]
 800337c:	2200      	movs	r2, #0
 800337e:	709a      	strb	r2, [r3, #2]
 8003380:	2200      	movs	r2, #0
 8003382:	70da      	strb	r2, [r3, #3]
	receivedFrame.frame_id = 0;
 8003384:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <reset_recevied_frame+0x88>)
 8003386:	2200      	movs	r2, #0
 8003388:	711a      	strb	r2, [r3, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	715a      	strb	r2, [r3, #5]
 800338e:	2200      	movs	r2, #0
 8003390:	719a      	strb	r2, [r3, #6]
 8003392:	2200      	movs	r2, #0
 8003394:	71da      	strb	r2, [r3, #7]
	receivedFrame.payload_len = 0;
 8003396:	4b17      	ldr	r3, [pc, #92]	; (80033f4 <reset_recevied_frame+0x88>)
 8003398:	2200      	movs	r2, #0
 800339a:	721a      	strb	r2, [r3, #8]
 800339c:	2200      	movs	r2, #0
 800339e:	725a      	strb	r2, [r3, #9]
	receivedFrame.crc32 = 0;
 80033a0:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <reset_recevied_frame+0x88>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	769a      	strb	r2, [r3, #26]
 80033a6:	2200      	movs	r2, #0
 80033a8:	76da      	strb	r2, [r3, #27]
 80033aa:	2200      	movs	r2, #0
 80033ac:	771a      	strb	r2, [r3, #28]
 80033ae:	2200      	movs	r2, #0
 80033b0:	775a      	strb	r2, [r3, #29]
	receivedFrame.end_of_frame = 0;
 80033b2:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <reset_recevied_frame+0x88>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	779a      	strb	r2, [r3, #30]
 80033b8:	2200      	movs	r2, #0
 80033ba:	77da      	strb	r2, [r3, #31]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2020 	strb.w	r2, [r3, #32]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	for (int i = 0; i < 16; i++)
 80033c8:	2300      	movs	r3, #0
 80033ca:	607b      	str	r3, [r7, #4]
 80033cc:	e008      	b.n	80033e0 <reset_recevied_frame+0x74>
	{
		receivedFrame.payload[i] = 0;
 80033ce:	4a09      	ldr	r2, [pc, #36]	; (80033f4 <reset_recevied_frame+0x88>)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4413      	add	r3, r2
 80033d4:	330a      	adds	r3, #10
 80033d6:	2200      	movs	r2, #0
 80033d8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3301      	adds	r3, #1
 80033de:	607b      	str	r3, [r7, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b0f      	cmp	r3, #15
 80033e4:	ddf3      	ble.n	80033ce <reset_recevied_frame+0x62>
	}
}
 80033e6:	bf00      	nop
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	20000138 	.word	0x20000138

080033f8 <bootloader_USART2_callback>:
	while (!(USART2->SR & USART_SR_TC))
		;
}
// TODO: lots to do here keep playing with it....
void bootloader_USART2_callback(uint8_t data)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
	// filll buffer until we have enough bytes to assemble a frame
	if (bytes_received_count <= sizeof(frame_format_t))
 8003402:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <bootloader_USART2_callback+0x48>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b22      	cmp	r3, #34	; 0x22
 8003408:	d813      	bhi.n	8003432 <bootloader_USART2_callback+0x3a>
	{
		bytes_buff[bytes_received_count++] = data;
 800340a:	4b0d      	ldr	r3, [pc, #52]	; (8003440 <bootloader_USART2_callback+0x48>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	b2d1      	uxtb	r1, r2
 8003412:	4a0b      	ldr	r2, [pc, #44]	; (8003440 <bootloader_USART2_callback+0x48>)
 8003414:	7011      	strb	r1, [r2, #0]
 8003416:	4619      	mov	r1, r3
 8003418:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <bootloader_USART2_callback+0x4c>)
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	5453      	strb	r3, [r2, r1]
		if (bytes_received_count == sizeof(frame_format_t))
 800341e:	4b08      	ldr	r3, [pc, #32]	; (8003440 <bootloader_USART2_callback+0x48>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b22      	cmp	r3, #34	; 0x22
 8003424:	d105      	bne.n	8003432 <bootloader_USART2_callback+0x3a>
		{

			bytes_received_count = 0;
 8003426:	4b06      	ldr	r3, [pc, #24]	; (8003440 <bootloader_USART2_callback+0x48>)
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
			parse = true;
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <bootloader_USART2_callback+0x50>)
 800342e:	2201      	movs	r2, #1
 8003430:	701a      	strb	r2, [r3, #0]
		}
	}
	// USART2->DR = data; //echo the data
	//  HAL_GPIO_TogglePin(GPIOA, user_led_Pin);
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	2000004e 	.word	0x2000004e
 8003444:	2000002c 	.word	0x2000002c
 8003448:	20000050 	.word	0x20000050

0800344c <erase_sector>:

// TODO:  abstract sector erasing based user app memory locationa and size
void erase_sector(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0

	FLASH_EraseInitTypeDef erase;
	erase.NbSectors = 1;
 8003452:	2301      	movs	r3, #1
 8003454:	613b      	str	r3, [r7, #16]
	erase.Sector = FLASH_SECTOR_5;
 8003456:	2305      	movs	r3, #5
 8003458:	60fb      	str	r3, [r7, #12]
	erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800345a:	2302      	movs	r3, #2
 800345c:	617b      	str	r3, [r7, #20]
	uint32_t err = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	603b      	str	r3, [r7, #0]

	HAL_FLASH_Unlock();
 8003462:	f7fd fd07 	bl	8000e74 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&erase, &err);
 8003466:	463a      	mov	r2, r7
 8003468:	1d3b      	adds	r3, r7, #4
 800346a:	4611      	mov	r1, r2
 800346c:	4618      	mov	r0, r3
 800346e:	f7fd fe73 	bl	8001158 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 8003472:	f7fd fd21 	bl	8000eb8 <HAL_FLASH_Lock>
}
 8003476:	bf00      	nop
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <uart_send_data>:
static void uart_send_data(uint8_t *data, uint16_t len)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < len; i++)
 800348c:	2300      	movs	r3, #0
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	e00f      	b.n	80034b2 <uart_send_data+0x32>
	{
		USART2->DR = data[i];
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	4413      	add	r3, r2
 8003498:	781a      	ldrb	r2, [r3, #0]
 800349a:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <uart_send_data+0x58>)
 800349c:	605a      	str	r2, [r3, #4]
		while (!(USART2->SR & USART_SR_TXE))
 800349e:	bf00      	nop
 80034a0:	4b0d      	ldr	r3, [pc, #52]	; (80034d8 <uart_send_data+0x58>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f9      	beq.n	80034a0 <uart_send_data+0x20>
	for (int i = 0; i < len; i++)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	3301      	adds	r3, #1
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	887b      	ldrh	r3, [r7, #2]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	dbeb      	blt.n	8003492 <uart_send_data+0x12>
			;
	}

	while (!(USART2->SR & USART_SR_TC))
 80034ba:	bf00      	nop
 80034bc:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <uart_send_data+0x58>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f9      	beq.n	80034bc <uart_send_data+0x3c>
		;
}
 80034c8:	bf00      	nop
 80034ca:	bf00      	nop
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	40004400 	.word	0x40004400

080034dc <__libc_init_array>:
 80034dc:	b570      	push	{r4, r5, r6, lr}
 80034de:	4d0d      	ldr	r5, [pc, #52]	; (8003514 <__libc_init_array+0x38>)
 80034e0:	4c0d      	ldr	r4, [pc, #52]	; (8003518 <__libc_init_array+0x3c>)
 80034e2:	1b64      	subs	r4, r4, r5
 80034e4:	10a4      	asrs	r4, r4, #2
 80034e6:	2600      	movs	r6, #0
 80034e8:	42a6      	cmp	r6, r4
 80034ea:	d109      	bne.n	8003500 <__libc_init_array+0x24>
 80034ec:	4d0b      	ldr	r5, [pc, #44]	; (800351c <__libc_init_array+0x40>)
 80034ee:	4c0c      	ldr	r4, [pc, #48]	; (8003520 <__libc_init_array+0x44>)
 80034f0:	f000 f820 	bl	8003534 <_init>
 80034f4:	1b64      	subs	r4, r4, r5
 80034f6:	10a4      	asrs	r4, r4, #2
 80034f8:	2600      	movs	r6, #0
 80034fa:	42a6      	cmp	r6, r4
 80034fc:	d105      	bne.n	800350a <__libc_init_array+0x2e>
 80034fe:	bd70      	pop	{r4, r5, r6, pc}
 8003500:	f855 3b04 	ldr.w	r3, [r5], #4
 8003504:	4798      	blx	r3
 8003506:	3601      	adds	r6, #1
 8003508:	e7ee      	b.n	80034e8 <__libc_init_array+0xc>
 800350a:	f855 3b04 	ldr.w	r3, [r5], #4
 800350e:	4798      	blx	r3
 8003510:	3601      	adds	r6, #1
 8003512:	e7f2      	b.n	80034fa <__libc_init_array+0x1e>
 8003514:	0800356c 	.word	0x0800356c
 8003518:	0800356c 	.word	0x0800356c
 800351c:	0800356c 	.word	0x0800356c
 8003520:	08003570 	.word	0x08003570

08003524 <memset>:
 8003524:	4402      	add	r2, r0
 8003526:	4603      	mov	r3, r0
 8003528:	4293      	cmp	r3, r2
 800352a:	d100      	bne.n	800352e <memset+0xa>
 800352c:	4770      	bx	lr
 800352e:	f803 1b01 	strb.w	r1, [r3], #1
 8003532:	e7f9      	b.n	8003528 <memset+0x4>

08003534 <_init>:
 8003534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003536:	bf00      	nop
 8003538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353a:	bc08      	pop	{r3}
 800353c:	469e      	mov	lr, r3
 800353e:	4770      	bx	lr

08003540 <_fini>:
 8003540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003542:	bf00      	nop
 8003544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003546:	bc08      	pop	{r3}
 8003548:	469e      	mov	lr, r3
 800354a:	4770      	bx	lr
